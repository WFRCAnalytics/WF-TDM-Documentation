[
  {
    "objectID": "v9x/v910/validation/1-tripgen.html",
    "href": "v9x/v910/validation/1-tripgen.html",
    "title": "Trip Generation",
    "section": "",
    "text": "Trip Generation validation was considered for both production ratios and relative shares."
  },
  {
    "objectID": "v9x/v910/validation/1-tripgen.html#ratios",
    "href": "v9x/v910/validation/1-tripgen.html#ratios",
    "title": "Trip Generation",
    "section": "Ratios",
    "text": "Ratios\nValidation for production ratios looked at three sets of measures: productions-to-household ratios (Figure 1), total trips (Figure 2), and trip balance ratios (Figure 3). The sources of the data include the Utah Household Travel Survey from 2012 (2012 HTS), the base year model (BY 2019 Model), and the National Household Travel Survey from 2017 with data from the Mountain Census Division (2017 NHTS - Mountain).\nThe model shows an average 4.01 trips per person which is slightly higher than the 2017 NHTS - Mountain average of 3.54. The model also shows an average 12.4 trips per household which is higher than the 2017 NHTS - Mountain average of 9.1. Utah, including the Wasatch Front, has a significantly higher average household size of 3.09 persons per household when compared to the Mountain Census Division average of 2.58, which accounts for the differences when compared to the 2017 NHTS - Mountain averages.\n\n\n\n\n                                                \nFigure 1: Productions to Households Ratios – Total Trip Ends (II + IX).\n\n\n\n\n\n\n\n                                                \nFigure 2: Total Trip Validation\n\n\n\n\n\n\n\n                                                \nFigure 3: Trip Balance Ratios"
  },
  {
    "objectID": "v9x/v910/validation/1-tripgen.html#relative-shares",
    "href": "v9x/v910/validation/1-tripgen.html#relative-shares",
    "title": "Trip Generation",
    "section": "Relative Shares",
    "text": "Relative Shares\nValidation for production relative shares considered the reasonableness of relative shares as shown in Table 1. The relative share between HBW, HBO and NHB trips looks reasonable with HBW at about 14% of the total and the highest share going to HBO. Commercial vehicles account for about 22% of the total trips generated by the model. This is within the expected range for an urban area like the Wasatch Front. IX and XI trips account for around 2% of the total trip generation. This also appears to be reasonable.\n\n\n\n\n\n\n\n\n\nTable 1: Relative Shares of Trip Productions\n\n\nPurpose\nProduction\nShare\n\n\n\n\nHBW\n1,758,104\n14.1%\n\n\nHBO\n5,317,476\n42.5%\n\n\n     HBShp\n908,733\n7.3%\n\n\n     HBOth\n3,719,191\n29.7%\n\n\n     HBScK6\n365,084\n2.9%\n\n\n     HBsc712\n324,468\n2.6%\n\n\nNHB\n2,405,720\n19.2%\n\n\n     NHBW\n812,855\n6.5%\n\n\n     NHBNW\n1,592,865\n12.7%\n\n\nTotal Person\n9,481,300\n75.8%\n\n\nTotal External\n172,855\n1.4%\n\n\n     IX\n78,057\n0.6%\n\n\n     XI\n94,798\n0.8%\n\n\nTotal Truck\n2,802,234\n22.4%\n\n\n     LT\n1,553,653\n12.4%\n\n\n     MD\n884,558\n7.1%\n\n\n     HV\n364,023\n2.9%\n\n\nTotal IX Truck\n21,750\n0.2%\n\n\n     IX MD\n10,716\n0.1%\n\n\n     IX HV\n11,034\n0.1%\n\n\nTotal XI Truck\n30,741\n0.2%\n\n\n     XI MD\n14,372\n0.1%\n\n\n     XI HV\n16,369\n0.1%\n\n\nTelecommute Share of HBW\n69,175\n0.6%\n\n\nTelecommute Share of NHBW\n19,552\n0.2%\n\n\nTOTAL\n12,508,880\n100.0%"
  },
  {
    "objectID": "v9x/v910/validation/2-distribute.html",
    "href": "v9x/v910/validation/2-distribute.html",
    "title": "Trip Distribution",
    "section": "",
    "text": "Modeled average trip lengths for the base year were compared to the 2012 Household Travel Survey. The model was validated for for distance, time, and generalized cost using the following measures:"
  },
  {
    "objectID": "v9x/v910/validation/2-distribute.html#average-trip-lengths",
    "href": "v9x/v910/validation/2-distribute.html#average-trip-lengths",
    "title": "Trip Distribution",
    "section": "Average Trip Lengths",
    "text": "Average Trip Lengths\nThe following figure shows the average trip lengths the modeled and observed time, distance, and generalized cost.\n\n\n\n\n\n\n\nCode\nviewof varSelect = Inputs.select(new Map([['Generalized Cost','GC'], ['Distance', 'Dist'], ['Time', 'Time']]), {value: 'Variable', label: \"Variable\"})\n\nviewof purpSelect  = Inputs.select(new Map([['Internal Trip Purposes', 'MainPurposes'], ['External Trip Purposes', 'Externals']]), {value: 'PurpType', label: \"Purpose Set\"});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndataLT = transpose(dataStats)\nfiltered_data = dataLT.filter(function(dataL) {\n    return varSelect == dataL.Variable &&\n           purpSelect == dataL.PurpType;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotTable\n\n\n\n\nCode\n//https://observablehq.com/@d3/grouped-bar-chart\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Purpose,\n    y: d =&gt; d.AVG_TRIP_LEN,\n    z: d =&gt; d.DataSource,\n    yLabel: \"Average Trip Length\",\n    zDomain: ['Model','Observed'],\n    height: 500,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\nFigure 1: Average Trip Length between model and observed.\n\n\n\n\n\n\n\nCode\nInputs.table(filtered_data)"
  },
  {
    "objectID": "v9x/v910/validation/2-distribute.html#trip-length-frequencies",
    "href": "v9x/v910/validation/2-distribute.html#trip-length-frequencies",
    "title": "Trip Distribution",
    "section": "Trip Length Frequencies",
    "text": "Trip Length Frequencies\nModeled trip lengths for the base year were compared to the 2012 Household Travel Survey. The following figures shows the modeled and observed time and distance average trip lengths and trip length frequencies.\n\n\n\n\n\n\n\n\n\n\n\n\nCode\noptionsTripPurp = \n[\n    ['Home-Based Work'                   , 'HBW'    ],\n    ['Home-Based Shopping'               , 'HBShp'  ],\n    ['Home-Based Other'                  , 'HBOth'  ],\n    ['Home-Based School - Primary'       , 'HBSchPr'],\n    ['Home-Based School - Secondary'     , 'HBSchSc'],\n    ['Non-Home-Based Work'               , 'NHBW'   ],\n    ['Non-Home-Based Non-Work'           , 'NHBNW'  ],\n    ['Light Trucks'                      , 'LT'     ],\n    ['Medium Trucks'                     , 'MD'     ],\n    ['Heavy Trucks'                      , 'HV'     ],\n    ['Internal-to-External'              , 'IX'     ],\n    ['External-to-Internal'              , 'XI'     ]\n]\n\nviewof vTripPurp = Inputs.select(new Map(optionsTripPurp), {value: 'HBW', label: \"Trip Purpose:\"})\n\nviewof vTlfType = Inputs.select(new Map([['Generalized Cost','GC'],['Distance','Dist'],['Time','Time']]), {value: 'Dist', label: \"Variable:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfreqT = transpose(freq)\n\nfreqT_filtered_Obs = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqObs' == freqData.freqSource;\n})\n\nfreqT_filtered_Mod = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqMod' == freqData.freqSource;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\ndataX = transpose(xvals)\nfiltered_x = dataX.filter(function(dx) {\n    return vTripPurp == dx.Purpose &&\n           vTlfType == dx.TLF;\n})\n\nmaxXValue = Math.max(...filtered_x.map(function(dx){ \n    return dx.xValue;\n}));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Distance/Time/Cost', tickFormat: d =&gt; d,domain: [0, maxXValue] },\n  y: {label: 'Frequency', tickFormat: f =&gt; `${Math.round(f * 100)}%`},\n  marginRight: 60,\n  marginLeft: 60,\n  style: {\n    fontSize: 15\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  marks: [\n    Plot.line(\n      freqT_filtered_Mod, {x: 'BIN', y: 'freq', stroke: \"#376092\", strokeWidth: 4}),\n    Plot.line(\n      freqT_filtered_Obs, {x: 'BIN', y: 'freq', stroke:  \"#77933c\", strokeWidth: 4}),\n    Plot.frame({strokeOpacity: 0.2}),\n    ]\n});\n\n\n\n\n\n\nFigure 2: Trip Length Frequencies between Model and Observed."
  },
  {
    "objectID": "v9x/v910/validation/3-modechoice.html",
    "href": "v9x/v910/validation/3-modechoice.html",
    "title": "Mode Choice",
    "section": "",
    "text": "The validation results for the Mode Choice portion of the model are shown in this section. Mode Choice was validated against the Utah Transit Authority 2019 On-Board Survey as well as the 2012 Household Travel Survey. Validation is summarized by the following categories:"
  },
  {
    "objectID": "v9x/v910/validation/3-modechoice.html#transit-trips-and-boardings",
    "href": "v9x/v910/validation/3-modechoice.html#transit-trips-and-boardings",
    "title": "Mode Choice",
    "section": "Transit Trips and Boardings",
    "text": "Transit Trips and Boardings\nThe validation of daily transit trips and boardings is shown through the comparison of model and observed data by mode. The model was validated by the following measures:\n\nTrips by Hierarchical Mode\nBoardings by Hierarchical Mode\nTransfer Ratio by Hierarchical Mode\nBoardings by Surveyed Mode (for comparison only)\n\nThe three hierarchical mode measures are summarized by the highest hierarchy mode in a given trip with local bus being the lowest on the hierarchy and commuter rail being the highest. For example, if a trip uses Local Bus and then transfers to LRT, the trip is stored as a LRT trip. Trips by Hierarchical Mode represent each trip as a single number, regardless of the number of transfer or different modes that were used on a trip.\nBoardings by Hierarchical Mode represent each boarding separately but summarized at the highest hierarchical mode of the trip. For example, for one transfer from Local Bus to LRT there are two boardings, one on each mode, but they are both stored in the highest hierarchal mode of LRT. The Transfer Ratio by Hierarchical Mode is the ratio between boardings and trips for any given mode.\nThe final measure Boardings by Surveyed Mode represents the total boardings on each mode individually. They are not summarize at the highest hierarchical mode of the trip but rather at the mode on which the boarding actually occurred. For example, the Local Bus to LRT trip mentioned previously would be summarized in this measure as one boarding on Local Bus and one boarding one LRT. This measure is for comparison use only, since the structure of the Mode Choice model does not consider this measure during calibration.\nThe total number of boardings are the same between hierarchical mode and surveyed mode, but depending on the make-up of the trips, their totals by mode will vary.\nThe model data for hierarchical mode measures is taken from the shares reports WFv910_BY_2019_RegionShares_Pk.csv and WFv910_BY_2019_RegionShares_Ok.csv. The model data for the surveyed mode comparison is taken from WFv910_BY_2019_transit_brding_summary_node.csv.\nThe interactive Figure 1 allows for the visual comparison of model and observed values for each Transit Trips and Boardings category.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bPlotSelect = Inputs.select(new Map([['Trips by Hierarchical Mode', 'Trips by Hierarchical Mode'], ['Boardings by Hierarchical Mode', 'Boardings by Hierarchical Mode'], ['Transfer Ratio by Hierarchical Mode','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: \"Category\"})\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"% Difference\", \"% Difference\"]]), {value: \"Difference\", label: \"View:\"})\n\ndataBLC = transpose(boardChart)\nfiltered_bDataC = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title &&\n           \"Value\" == dataBLC.View;\n})\ndataBTT = transpose(boardTable)\nfiltered_bDataT = dataBTT.filter(function(dataBTT) {\n    return bPlotSelect == dataBTT.Title;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n            const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_bDataT.map(row =&gt; {\n            const isBold = row['Mode'] === 'Total';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n                    const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]}; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${row[d]}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(bChart.scales.color, {title: \"Data Source\"})\n\nbChart = GroupedBarChart(filtered_bDataC, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'],\n    yLabel: \"Value\",\n    zDomain: ['Model','Observed'],\n    width: 500,\n    height: 225,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_bData2 = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title  &&\n           metric == dataBLC.View;\n})\n\n//https://observablehq.com/@d3/diverging-bar-chart\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_bData2, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.Mode,\n    xFormat: metric === \"Difference\" ? \"+,d\" : \"+%\",\n    xLabel: \"Model vs Observed Differences\",\n    height: 200,\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell = 1\n\n\n\n\n\n\nFigure 1: Transit Trips and Boardings Model vs Observed Comparison\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\nWhen considering Trips by Hierarchical Mode, the calibration routine of the model results in the total number of transit trips in the model being very close to the observed. For this model the model trips are only 1.6% higher than observed for the total number of trips. By mode the differences are within reasonable ranges for the higher trip modes. For example, LRT is 5.2% high and CRT is only 1.5% low.\nDue to the very low number of trips for Core Bus and Express Bus, their differences are acceptable. Currently, Core Bus for example has only one route. In future phases of the RTP, additional Core Bus service is planned. While further calibration could have brought the Core Bus validation more in line with observed, over-calibrating the model was not desired.\nBoardings by Hierarchical Mode show a similar pattern. Overall boardings are only 0.8% lower in model compared to observed, and the modes Local Bus, LRT, and CRT all within 5%. Core Bus and Express Bus are the furthest away, but they have a lower number of boardings as compared to the higher boarding modes.\nThe Transfer Ratio by Hierarchical Mode shows the relationship between the trips and the boardings. While the model was only slightly higher in trips, the boardings were low. This results in a lower transfer ratio, which is still acceptable with all values being within about 5%.\nAnd for comparison, Boardings by Mode Surveyed shows acceptable differences. The Core Bus and Express Bus values show much larger differences; but again given their low volumes, these are reasonable differences."
  },
  {
    "objectID": "v9x/v910/validation/3-modechoice.html#mode-share",
    "href": "v9x/v910/validation/3-modechoice.html#mode-share",
    "title": "Mode Choice",
    "section": "Mode Share",
    "text": "Mode Share\nMode Share validation is shown through the comparison by groups of mode, time period, and trip purpose. For model and observed shares, the total percent for each combination of mode group, time period, and trip purpose adds up to 100%.\nMode groups compared include groupings of auto, transit, vehicle occupancy, and transit modes. The highest nest is motorized and non-motorized down to lower nests of individual transit modes and transit access modes. Shares were calculated for the following mode groupings:\n\nMotorized / Non-Motorized\nAuto / Transit\nDrive Alone / Shared Ride\nShared Ride # of Occupants\nTransit Mode\nTransit Access Mode\n\nAdditionally, the shares were compared by the following time period groupings:\n\nDaily\nPeak\nOff-peak\n\nFinally, the shares were further compared for each of the following trip purposes:\n\nAll Purposes\nHome-Based Work\nHome-Based College\nHome-Based Other\nNon-Home Based\n\nIn the model, Home-Based College is the only trip purpose that does not include trips in the off-peak time period. So, any trips with this purpose in the observed data were moved to the peak time period for comparison.\nThe interactive Figure 2 allows for selecting of different combinations to visualize the comparisons. The observed data comes from a combination of the Household Travel Survey and the 2019 Transit On-Board Survey.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof plotSelect    = Inputs.select(new Map([[nameModeMnMShare,nameModeMnMShare],\n                                              [nameModeATShare ,nameModeATShare ],\n                                              [nameModeDAShare ,nameModeDAShare ],\n                                              [nameMode23Share ,nameMode23Share ],\n                                              [nameModeTransit ,nameModeTransit ],\n                                              [nameModeAccess  ,nameModeAccess  ]\n                                             ]), {value: nameGroup, label: \"Mode Group:\"})\nviewof periodSelect  = Inputs.select(new Map([['Daily', 'DY'], ['Peak', 'PK'], ['Off-Peak', 'OK']]), {value: namePeriod, label: \"Time Period:\"});\nviewof purposeSelect = Inputs.select(new Map([['All Purposes', 'All'], ['Home-Based Work', 'HBW'], ['Home-Based College', 'HBC'], ['Home-Based Other', 'HBO'], ['Non-Home Based', 'NHB']]), {value: 'TripPurpose', label: \"Trip Purpose:\"});\n\ndataLT = transpose(dataLong)\ndataTT = transpose(dataTable)\n\nfiltered_data = dataLT.filter(function(dataL) {\n    return plotSelect == dataL.Group &&\n           periodSelect == dataL.Period &&\n           purposeSelect == dataL.TripPurpose;\n})\ntable_filtered_data = dataTT.filter(function(dataTT) {\n    return plotSelect == dataTT.Group &&\n           periodSelect == dataTT.Period &&\n           purposeSelect == dataTT.TripPurpose;\n})\n\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\nxDomain = {\n    switch(plotSelect) {  // assuming all data points have the same Mode\n        case nameModeMnMShare:\n            return ['Motorized', 'Non-Motorized'];\n            break;\n        case nameModeATShare:\n            return ['Auto', 'Transit'];\n            break;\n        case nameModeDAShare:\n            return ['Drive Alone', 'Shared Ride'];\n            break;\n        case nameMode23Share:\n            return ['Shared Ride 2 Occupants', 'Shared Ride 3+ Occupants'];\n            break;\n        case nameModeTransit:\n            return ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'];\n            break;\n        case nameModeAccess:\n            return ['Walk', 'Drive'];\n            break;\n        default:\n            return [];  // or set some sensible default\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[plotSelect, \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n        html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${d}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    ${table_filtered_data.map(row =&gt; html`\n        &lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n            html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${row[d]}&lt;/td&gt;`)}\n        &lt;/tr&gt;`)}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.Percent,\n    z: d =&gt; d.DataSource,\n    xDomain: xDomain,\n    yLabel: \"Percent\",\n    yDomain: [0,1],\n    zDomain: ['Model','Observed'],\n    width: 400,\n    height: 250,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbEmtptyCell=1\n\n\n\n\n\n\nFigure 2: Model vs Observed Mode Shares by Mode Group, Time Period, and Trip Purpose\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;br/&gt;`\n\n\n\n\n\n\n\nThe Motorized / Non-motorized grouping of model shares are within 0.3% of the observed data for the daily time period and all trip purposes with non-motorized shares being slightly higher than observed and motorized shares being slightly lower. The model shares for additional combinations of time period and purpose are all within 0.5%.\nThe Transit Mode group of model shares are also close to observed with all modes for all time periods and trip purposes. At the Daily time period for all purposes, LRT has slightly higher share at 1.2% compared to observed than other modes, such as CRT that is 0.8% lower than observed and Local Bus that is 0.7% higher than observed. All the model shares for Transit Mode combinations of time period and trip purpose and are within 5% of observed. Transit Access Mode model shares are all within 5% of observed shares."
  },
  {
    "objectID": "v9x/v910/validation/4-assignhwy.html",
    "href": "v9x/v910/validation/4-assignhwy.html",
    "title": "Highway Assignment",
    "section": "",
    "text": "Validation of final highway assignment was done comparing model outputs from the final loaded networks with observed data. The comparisons were done with volumes and speeds."
  },
  {
    "objectID": "v9x/v910/validation/4-assignhwy.html#volumes",
    "href": "v9x/v910/validation/4-assignhwy.html#volumes",
    "title": "Highway Assignment",
    "section": "Volumes",
    "text": "Volumes\nThe validation results for the Highway Assignment portion of the model are shown in this section. The observed data for 2019 volumes is taken from the Utah Department of Transportation (UDOT) Average Annual Daily Traffic (AADT) History and associated with their respective model segments. The traffic model data is taken from segment summary report for the 2019 base year model: WFv910_BY_2019_Summary_SEGID.csv. The results are divided into three sections:\n\nSummary Comparison\nDetailed Comparison\nMap Comparison\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Comparison\nThe summary comparison shows region and county-wide differences between model and observed for Average Daily Volume and Vehicle-Miles Traveled (VMT) by vehicle type. The values for Box Elder and Weber counties are only the portions within the MPO planning area. Validation was checked comparing the average daily volume at the region and county levels. Figure 1, below, contains an interactive view of model vs observed differences by roadway class and vehicle type.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bSummaryFuncClass = Inputs.select(new Map([['All Roadways','All Roadways'], ['Freeway','Freeway'], ['Principal','Principal'], ['Minor', 'Minor'], ['Collector', 'Collector']]), {value: 'All Roadways', label: \"Roadway Class:\"})\nviewof bSummaryVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\nviewof bSummaryDiffType = Inputs.select(new Map([['Percent Difference','DiffPct'], ['Difference','Diff']]), {value: 'DiffPct', label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nvolDiffLongT = transpose(volDiffLong)\nvmtDiffLongT = transpose(vmtDiffLong)\n\nvolDiffLongT_filtered = volDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vol' + bSummaryDiffType) == dataL.View);\n})\nvmtDiffLongT_filtered = vmtDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vmt' + bSummaryDiffType) == dataL.View);\n})\n\nvvp = transpose(vvpct)\nvvpL = transpose(vvpctLong)\nvvaL = transpose(vvabsLong)\nvvaLR = transpose(vvabsLongR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXDomainVol(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_volDiff * -1, max_abs_value_volDiff];\n    } else {\n        //return [max_abs_value_volDiffPct * -1, max_abs_value_volDiff]; // -100% to 100%\n        return [-100, 100]\n    }\n}\n\nfunction getXDomainVmt(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff];\n    } else {\n        //return [max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiff]; // -100% to 100%\n        return [-1,1]\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Average Daily Volume&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVolDiff = DivergingBarChart(volDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_volDiff * -1, max_abs_value_volDiff] : [-1, 1], //[max_abs_value_volDiffPct * -1, max_abs_value_volDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Vehicle-Miles Traveled&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVmtDiff = DivergingBarChart(vmtDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff] : [-1, 1], //[max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell1 = 1\n\n\n\n\n\n\nFigure 1: Highway Assignment Summary Comparison\n\n\n\nAt the region level model volume is 1.7% higher than observed volume. The four more urban counties (Weber, Davis, Salt Lake, and Davis) were all within 5% of observed volumes with Salt Lake County being the closest. Davis and Utah were slightly higher and Weber County was slightly lower. Box Elder County is more rural than the other counties. Box Elder model volumes are about 10% lower than observed. Time did not allow for further calibration of the volumes in Box Elder area to account for the larger differences.\nOne important observation at the Collector and All Vehicles level is that Utah County shows a much higher difference than the other counties. Upon further investigation of observed Collector volumes in Utah County, many roadway segments had very low volumes compared to what was expected. Utah County is one of the highest growth areas in the region. For this reason, we expect that the observed count data may be underrepresenting actual volumes. We also anticipate observed volumes in Utah County to improve in the near-term. Within the last several years, a large investment in continuous count station in Utah County has been made. The new counters will add additional information to generate observed volumes for all roadway segments.\nThe largest differences in model vs observed volumes occur in the Medium Truck and Heavy Truck vehicle types. A good amount of time was spent attempting to bring model truck volumes closer to observed. However, due to the limited data sources for truck information, further need to investigate observed truck volumes, and a desire to not over-calibrate the model, further calibration was stopped. Truck modeling remains a future priority for model improvement.\n\n\nDetailed Comparison\nThe model vs observed details in this section are presented by volume and Vehicle-Miles Traveled (VMT) through the comparison of model and observed data facility type by region and also by county. Figure 2 allows for the interactive visual comparison of model and observed values for the region and each county for all vehicles, cars, medium trucks, and heavy trucks. The comparisons are shown in four different types of charts and tables:\n\nAverage Daily Volume by Roadway Class (2a): The daily volume is averaged across all segments within their respective geography and vehicle type.\nTotal VMT by Roadway Class (2b): For each segment*, the daily volume is multiplied by segment distance and then summed across all segments within their respective geography and vehicle type.\nModel vs Count Segment Volume (2c): This is a scatter plot of segment daily volume with the x-axis as the observed volume and the y-axis as the model volume. The red line shows the location of where model and observed volumes are equal. The dashed blue line shows a least-squares linear regression. The further the blue line moved away from the red line, the further the model is from observed.\nSegment Percent Error (2d): This is a scatter plot showing the amount of error (percent difference) between the observed volume and the model volume. The observed volume is the x-axis and the percent error is the y-axis. The red lines are a bounding box that shows the control target. As volume increases, it is expected that the percent error should decrease.\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bCountySelect = Inputs.select(new Map([['Region', 'Region'], ['Box Elder County - WFRC',3], ['Weber County - WFRC',57], ['Davis County',11], ['Salt Lake County',35], ['Utah County',49]]), {value: 'All', label: \"Geography:\"})\nviewof bVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\n\nsortOrder = ['Freeway', 'Principal', 'Minor', 'Collector', 'All Roadways'];\n\nvolT = transpose(vol)\nvmtT = transpose(vmt)\nfiltered_volData = volT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtData = vmtT.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\nvolTL = transpose(volLong)\nvmtTL = transpose(vmtLong)\nfiltered_volDataL = volTL.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtDataL = vmtTL.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\n\nallvehplotT = transpose(allvehplot)\nfiltered_allvehplotData = allvehplotT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfunction formatNumber(value, isPercentage=false) {\n    if (typeof value === 'undefined') {\n        return '';  // or return a default value or message\n    }\n    \n    if (isPercentage) {\n        return (Number(value) * 100).toFixed(1) + '%';\n    }\n    return Number(value.toFixed(0)).toLocaleString();\n}\n\nwidthsVol = ['100px', '52px', '70px', '70px', '73px', '73px', '63px', '63px']; // Define the widths\nwidthsVmt = ['100px', '88px', '88px', '88px', '88px'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2a. Average Daily Volume by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"# Segs\", \"Volume\", \"Observed\", \"Difference\", \"Percent Difference\", \"RMSE\", \"Percent RMSE\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVol[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_volData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"numSegs\", \"volMod\", \"volObs\", \"volDiff\", \"volDiffPct\", \"volRmse\", \"volRmsePct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 5 || i === 7) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 4) || i==6) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVol = Legend(bChartVol.scales.color, {title: \"Data Source\"})\n\nbChartVol = GroupedBarChart(filtered_volDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"Volume (thousands)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2b. Total Daily VMT by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"Model\", \"Observed\", \"Difference\", \"Percent Difference\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVmt[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_vmtData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"vmtMod\", \"vmtObs\", \"vmtDiff\", \"vmtDiffPct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 4 || i === 6) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 3) || i==5) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVmt = Legend(bChartVmt.scales.color, {title: \"Data Source\"})\n\nbChartVmt = GroupedBarChart(filtered_vmtDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"VMT (millions)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {max} from 'd3-array';\n\n\n\n\n\n\n\n\n\nCode\nmaxVal = {\n  return Math.max(\n    d3.max(filtered_allvehplotData, d =&gt; d.volObs),\n    d3.max(filtered_allvehplotData, d =&gt; d.volMod)\n  );\n}\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2c. Model vs Observed Volumes&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Model Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.link([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x1: 0,\n      y1: 0,\n      x2: maxVal,\n      y2: (k) =&gt; maxVal * k,\n      strokeOpacity: (k) =&gt; k === 1 ? 1 : 0.2,\n      stroke: \"red\",\n      strokeWidth: (k) =&gt; k === 1 ? 2 : 1.5\n    }),\n    Plot.text([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x: maxVal,\n      y: (k) =&gt; maxVal * k,\n      text: ((f) =&gt; (k) =&gt; k === 1 ? \"Equal\" : f(k - 1))(d3.format(\"+.0%\")),\n      textAnchor: \"start\",\n      dx: 6\n    }),\n    Plot.linearRegressionY(filtered_allvehplotData, {\n        x: \"volObs\",\n        y: \"volMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2d. Segment Percent Error&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Percent Error\",\n    domain: [-2, 2],\n    tickFormat: d3.format(\".0%\")\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volErrorPct\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.ruleY([2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: 1,\n      y2: 2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: 0.5,\n      y2: 1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: 0.25,\n      y2: 0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: 0.20,\n      y2: 0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: 0.15,\n      y2: 0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: 0.10,\n      y2: 0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: -1,\n      y2: -2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: -0.5,\n      y2: -1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: -0.25,\n      y2: -0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: -0.20,\n      y2: -0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: -0.15,\n      y2: -0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: -0.10,\n      y2: -0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell2 = 1\n\n\n\n\n\n\nFigure 2: Detailed Model vs Observed Comparison of Highway Assignment\n\n\n\n\n\nMap Comparison\nThe maps in Figure 3 through Figure 6 shows a comparison of segment level model vs observed volumes by vehicle types. Red represents model lower than observed and blue represents model volume higher than observed.\n\nAll Vehicles & Cars/Light TrucksMedium & Heavy Trucks\n\n\n\n\n\n\n\n\nFigure 3: Segment-Level Model vs Observed Volume Comparison – All Vehicles\n\n\n\n\n\n\n\nFigure 4: Segment-Level Model vs Observed Volume Comparison – Cars and Light Trucks\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Segment-Level Model vs Observed Volume Comparison – Medium Trucks\n\n\n\n\n\n\n\nFigure 6: Segment-Level Model vs Observed Volume Comparison – Heavy Trucks\n\n\n\n\n\n\n\n\nLooking at the All Vehicles map, the model volumes are lower than observed for by more than 7,500 vehicles per day for the east side of I-215 and by more than 15,000 vehicles per day for I-15 through northern Utah County. Model volumes are higher than observed volumes by more than 15,000 vehicles for I-15 in southern Salt lake County and for I-15 in Utah County between Springville and Spanish Fork. When looking at these areas by vehicle type, the drop in Cars and Light Trucks are actual greater since the Medium Trucks and Heavy Trucks in these areas are greater in the model vs observed. Outside of these areas, the volume differences between model and observed are relatively minor.\nThe lower arterial model vs observed volumes of Heavy Trucks on 9000 South in Salt Lake County was further investigated. The Heavy Truck observed volume for this roadway seemed much higher than expected for this roadway. The lower volumes are likely due to the observed data and not anything in the model."
  },
  {
    "objectID": "v9x/v910/validation/4-assignhwy.html#speeds",
    "href": "v9x/v910/validation/4-assignhwy.html#speeds",
    "title": "Highway Assignment",
    "section": "Speeds",
    "text": "Speeds\nComparisons were made between model and observed for a sample of OD pairs. Observed speeds come from sampled data at various time periods in 2019 for the WFRC area using the Google API for reported travel times between coordinates for an origin and destination. Model speeds come from the final network skims that report travel times between all TAZs in the model for each period of the day. The two data sets were joined using a coordinate to TAZ spatial join to locate Google end points to match their respective TAZ.\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof vPeriod = Inputs.select(new Map([['AM','AM'], ['Midday','MD'], ['PM','PM'], ['Evening', 'EV']]), {value: 'AM', label: \"Period:\"})\n\nspeedT = transpose(speed)\n\nspeedT_filtered = speedT.filter(function(dataSpd) {\n    return vPeriod == dataSpd.Period;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;Model vs Observed Speeds&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Speed (mph)\",\n    domain: [0, 70]\n  },\n  y: {\n    label: \"Model Speed (mph)\",\n    domain: [0, 70]\n  },\n  marks: [\n    Plot.dot(speedT_filtered, {\n      x: \"spdObs\",\n      y: \"spdMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.linearRegressionY(speedT_filtered, {\n        x: \"spdObs\",\n        y: \"spdMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "v9x/v910/validation/change-in-volume.html",
    "href": "v9x/v910/validation/change-in-volume.html",
    "title": "WFTDM Documentation",
    "section": "",
    "text": "Code\nimport os\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport contextily as ctx\n\n\n\n\nCode\ndf_obs = pd.read_csv(\"data/5-assignhwy/observed-volumes.csv\")\ndf_mod = pd.read_csv(\"data/5-assignhwy/WFv910_OY_2023_Summary_SEGID.csv\")\ndf_ft = df_mod[['SEGID','FTCLASS']]\n\n\nFileNotFoundError: [Errno 2] No such file or directory: 'data/5-assignhwy/WFv910_OY_2023_Summary_SEGID.csv'\n\n\n\n\nCode\ndf_obs[['data']] = 'Observed'\ndf_mod[['data']] = 'Modeled'\n\n\n\n\nCode\ndf_mod1 = df_mod[['SEGID','CO_FIPS','DISTANCE','DY_Vol','DY_Vol_PC','DY_Vol_MD','DY_Vol_HV']].rename(columns={'DY_Vol':'Mod_AWDT','DY_Vol_PC':'Mod_Car','DY_Vol_MD':'Mod_MD','DY_Vol_HV':'Mod_HV'})\ndf_obs1 = df_obs[['SEGID', 'Obs_AWDT', 'Obs_Car', 'Obs_MD', 'Obs_HV']]\nallveh = pd.merge(df_mod1,df_obs1,on='SEGID',how='left')\nallveh = pd.merge(allveh,df_ft, on='SEGID', how='left')\nallveh\n\n\n\n\n\n\n\n\n\nSEGID\nCO_FIPS\nDISTANCE\nMod_AWDT\nMod_Car\nMod_MD\nMod_HV\nObs_AWDT\nObs_Car\nObs_MD\nObs_HV\nFTCLASS\n\n\n\n\n0\n0006_141.0\n49.0\n5.843\n1644.1\n1372.1\n152.0\n120.0\n1492.728\n1346.857127\n51.900660\n93.970213\nPrincipal Arterial\n\n\n1\n0006_146.9\n49.0\n3.039\n1648.5\n1374.5\n153.0\n120.0\n1492.728\n1346.857127\n51.900660\n93.970213\nPrincipal Arterial\n\n\n2\n0006_149.9\n49.0\n0.678\n1597.7\n1153.6\n179.4\n86.2\n2401.944\n1949.021430\n226.822778\n226.099793\nPrincipal Arterial\n\n\n3\n0006_150.6\n49.0\n1.973\n1751.5\n1247.6\n197.3\n91.6\n2401.944\n1949.021430\n226.822778\n226.099793\nPrincipal Arterial\n\n\n4\n0006_152.6\n49.0\n0.316\n2363.4\n1542.2\n289.5\n136.2\n2378.328\n1713.801752\n366.493210\n298.033038\nMinor Arterial\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4402\nWFRC_8486\n35.0\n0.501\n1820.2\n1338.9\n177.0\n47.8\nNaN\nNaN\nNaN\nNaN\nCollector\n\n\n4403\nWFRC_8487\n35.0\n0.501\n1127.8\n900.1\n81.7\n24.7\nNaN\nNaN\nNaN\nNaN\nCollector\n\n\n4404\nWFRC_8488\n35.0\n0.529\n2789.1\n2140.7\n230.6\n98.8\nNaN\nNaN\nNaN\nNaN\nCollector\n\n\n4405\nWFRC_8491\n35.0\n0.265\n462.7\n322.6\n47.1\n4.2\nNaN\nNaN\nNaN\nNaN\nCollector\n\n\n4406\nWFRC_8492\n35.0\n0.445\n6086.9\n3672.8\n810.5\n317.5\nNaN\nNaN\nNaN\nNaN\nCollector\n\n\n\n\n4407 rows × 12 columns\n\n\n\n\n\nCode\ndf_obs = df_obs[['SEGID','data','Obs_AWDT','Obs_Car','Obs_MD','Obs_HV']].rename(columns={'Obs_AWDT':'Total','Obs_Car':'Car','Obs_MD':'MD','Obs_HV':'HV'})\n\ndf_mod['Car'] = df_mod['DY_Vol_PC'] + df_mod['DY_Vol_LT']\ndf_mod = df_mod.rename(columns={'DY_Vol':'Total','DY_Vol_MD':'MD','DY_Vol_HV':'HV'})\ndf_mod = df_mod[['SEGID','data','Total', 'Car','MD', 'HV']]\n\n\n\n\nCode\ndfSegSum = pd.concat([df_mod,df_obs],ignore_index=True)\ndfSegSum = pd.merge(dfSegSum,df_ft,on='SEGID',how='left')\n\n\n\n\nCode\n# read segment shapefile into spatial enabled dataframe\ndirSegShp = r'D:\\GitHub\\WF-TDM-v9x\\1_Inputs\\6_Segment\\WFv910_Segments.shp'\nsegShp = gpd.read_file(dirSegShp)\nsegShp.head()\nsegShp = segShp[['SEGID','geometry']]\n\n\n\n\nCode\ndef plot_volume_diff(segSum, varOption, segShp):\n    scenario1 = 'Modeled'\n    scenario2 = 'Observed'\n\n    segSum = segSum[['SEGID', 'FTCLASS', 'data', varOption]]\n    dfSegSum1 = segSum.query('data == @scenario1')\n    dfSegSum2 = segSum.query('data == @scenario2')\n\n    dfSegSum2[varOption] *= -1\n    dfSegSumDiff = pd.merge(dfSegSum1, dfSegSum2, on= ['SEGID'], how='left')\n    dfSegSumDiff['diff'] = dfSegSumDiff[varOption + '_x'] + dfSegSumDiff[varOption + '_y']\n    dfSegSumDiff['FTCLASS'] = dfSegSumDiff['FTCLASS_x']\n\n    sdfSegSumDiff = segShp.merge(dfSegSumDiff, on = 'SEGID')\n\n    conditions = [\n        (sdfSegSumDiff['diff'].lt(-10000)),\n        (sdfSegSumDiff['diff'].ge(-10000) & sdfSegSumDiff['diff'].lt(-3000)),\n        (sdfSegSumDiff['diff'].ge(-3000) & sdfSegSumDiff['diff'].lt(-1000)),\n        (sdfSegSumDiff['diff'].ge(-1000) & sdfSegSumDiff['diff'].lt(1000)),\n        (sdfSegSumDiff['diff'].ge(1000) & sdfSegSumDiff['diff'].lt(3000)),\n        (sdfSegSumDiff['diff'].ge(3000) & sdfSegSumDiff['diff'].le(10000)),\n        (sdfSegSumDiff['diff'].gt(10000)),\n    ]\n    choices = [2.4,2,1.7,1.7,1.7,2,2.4]\n    sdfSegSumDiff[\"lw\"] = np.select(conditions, choices)\n    sdfSegSumDiff['lwf'] = np.where(sdfSegSumDiff['FTCLASS'] == 'Freeway', sdfSegSumDiff['lw'], sdfSegSumDiff['lw'] - 1.6)\n\n    # Create the figure and axis\n    fig, ax = plt.subplots()\n\n    # Print current CRS\n    print(\"Current CRS:\", sdfSegSumDiff.crs)\n\n    # Check and set CRS if necessary\n    if sdfSegSumDiff.crs is None:\n        # Assuming your original data is in EPSG:4326 (WGS84)\n        sdfSegSumDiff.set_crs(epsg=26912, inplace=True)\n\n    # Check if we need to reproject to Web Mercator\n    if sdfSegSumDiff.crs.to_string() != 'EPSG:3857':\n        sdfSegSumDiff = sdfSegSumDiff.to_crs(epsg=3857)\n    \n    bin1 = [-15000, -7500, -2500, 0, 2500, 7500, 15000]\n    bin2 = [-5000, -1500, -500, 0, 500, 1500, 5000]\n    \n    if varOption=='Total':\n        bin = bin1\n    else:\n        bin = bin2\n    \n    # Plot your geospatial data\n    sdfSegSumDiff.plot(\n        column='diff', \n        cmap='RdBu', \n        scheme=\"userdefined\", \n        legend=True, \n        classification_kwds=dict(bins=bin),\n        linewidth=sdfSegSumDiff['lwf'], \n        ax=ax,\n        antialiased=False\n    )\n\n    # Add basemap using contextily with OpenStreetMap\n    ctx.add_basemap(ax, source=ctx.providers.CartoDB.PositronNoLabels, alpha=1)\n\n    # Adjust the margins and axis\n    ax.margins(0.1)\n    ax.axis('off')\n\n    # Adjust the x-axis limits to cut off the right side of the map\n    xlim = ax.get_xlim()  # Get current x-axis limits\n    cutoff_value = xlim[1] - 65000  # Define how much you want to cut off (adjust value as needed)\n    ax.set_xlim(xlim[0], cutoff_value)  # Set new x-axis limits\n\n\n    # Adjust legend size\n    leg = ax.get_legend()  # Get the current legend\n    leg.set_bbox_to_anchor((1, 1))  # Move the legend outside the plot area if necessary\n    leg.set_title('Difference Scale', prop={'size': 8})  # Adjust the title size\n    for text in leg.get_texts():\n        text.set_fontsize(8)  # Adjust the size of the legend text\n\n\n    # Show the plot\n    plt.rcParams[\"figure.figsize\"]=6,12\n    plt.savefig(f'_pictures/vol-diff-{varOption}.png', bbox_inches='tight', dp=12000)\n    plt.tight_layout()\n\n\n\n\nCode\nplot_volume_diff(dfSegSum,'Car', segShp)\n\n\nC:\\Users\\cday\\AppData\\Local\\Temp\\ipykernel_24536\\4189449411.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  dfSegSum2[varOption] *= -1\nC:\\Users\\cday\\AppData\\Local\\Temp\\ipykernel_24536\\4189449411.py:87: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument \"dp\" which is no longer supported as of 3.3 and will become an error two minor releases later\n  plt.savefig(f'_pictures/vol-diff-{varOption}.png', bbox_inches='tight', dp=12000)\n\n\nCurrent CRS: EPSG:26912"
  },
  {
    "objectID": "v9x/v910/validation/3modechoice.html",
    "href": "v9x/v910/validation/3modechoice.html",
    "title": "Mode Choice",
    "section": "",
    "text": "The validation results for the Mode Choice portion of the model are shown in this section. Mode Choice was validated against the Utah Transit Authority 2019 On-Board Survey as well as the 2012 Household Travel Survey. Validation is summarized by the following categories:"
  },
  {
    "objectID": "v9x/v910/validation/3modechoice.html#transit-trips-and-boardings",
    "href": "v9x/v910/validation/3modechoice.html#transit-trips-and-boardings",
    "title": "Mode Choice",
    "section": "Transit Trips and Boardings",
    "text": "Transit Trips and Boardings\nThe validation of daily transit trips and boardings is shown through the comparison of model and observed data by mode. The model was validated by the following measures:\n\nTrips by Hierarchical Mode\nBoardings by Hierarchical Mode\nTransfer Ratio by Hierarchical Mode\nBoardings by Surveyed Mode (for comparison only)\n\nThe three hierarchical mode measures are summarized by the highest hierarchy mode in a given trip with local bus being the lowest on the hierarchy and commuter rail being the highest. For example, if a trip uses Local Bus and then transfers to LRT, the trip is stored as a LRT trip. Trips by Hierarchical Mode represent each trip as a single number, regardless of the number of transfer or different modes that were used on a trip.\nBoardings by Hierarchical Mode represent each boarding separately but summarized at the highest hierarchical mode of the trip. For example, for one transfer from Local Bus to LRT there are two boardings, one on each mode, but they are both stored in the highest hierarchal mode of LRT. The Transfer Ratio by Hierarchical Mode is the ratio between boardings and trips for any given mode.\nThe final measure Boardings by Surveyed Mode represents the total boardings on each mode individually. They are not summarize at the highest hierarchical mode of the trip but rather at the mode on which the boarding actually occurred. For example, the Local Bus to LRT trip mentioned previously would be summarized in this measure as one boarding on Local Bus and one boarding one LRT. This measure is for comparison use only, since the structure of the Mode Choice model does not consider this measure during calibration.\nThe total number of boardings are the same between hierarchical mode and surveyed mode, but depending on the make-up of the trips, there totals by mode will vary.\nThe model data for hierarchical mode measures is taken from the shares reports v902_SE19_Net19_RegionShares_Pk.csv and v902_SE19_Net19_RegionShares_Ok.csv. The model data for the surveyed mode comparison is taken from _v902_SE19_Net19_1_PA_Route.dbf.\nThe interactive Figure 1 allows for the visual comparison of model and observed values for each Transit Trips and Boardings category.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bPlotSelect = Inputs.select(new Map([['Trips by Hierarchical Mode', 'Trips by Hierarchical Mode'], ['Boardings by Hierarchical Mode', 'Boardings by Hierarchical Mode'], ['Transfer Ratio by Hierarchical Mode','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: \"Category\"})\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"% Difference\", \"% Difference\"]]), {value: \"Difference\", label: \"View:\"})\n\ndataBLC = transpose(boardChart)\nfiltered_bDataC = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title &&\n           \"Value\" == dataBLC.View;\n})\ndataBTT = transpose(boardTable)\nfiltered_bDataT = dataBTT.filter(function(dataBTT) {\n    return bPlotSelect == dataBTT.Title;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n            const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_bDataT.map(row =&gt; {\n            const isBold = row['Mode'] === 'Total';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n                    const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]}; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${row[d]}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(bChart.scales.color, {title: \"Data Source\"})\n\nbChart = GroupedBarChart(filtered_bDataC, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'],\n    yLabel: \"Value\",\n    zDomain: ['Model','Observed'],\n    width: 500,\n    height: 225,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_bData2 = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title  &&\n           metric == dataBLC.View;\n})\n\n//https://observablehq.com/@d3/diverging-bar-chart\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_bData2, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.Mode,\n    xFormat: metric === \"Difference\" ? \"+,d\" : \"+%\",\n    xLabel: \"Model vs Observed Differences\",\n    height: 200,\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell = 1\n\n\n\n\n\n\nFigure 1: Transit Trips and Boardings Model vs Observed Comparison\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\nWhen considering Trips by Hierarchical Mode, the calibration routine of the model results in the total number of transit trips in the model being very close to the observed. For this model the model trips are only 1.4% lower than observed for the total number of trips. By mode the differences are within reasonable ranges for the higher trip modes. For example, LRT is only 0.2% high and CRT is only 8.0% low.\nDue to the very low number of trips for Core Bus and Express Bus, their differences are acceptable. Currently, Core Bus for example has only one route. In future phases of the RTP, additional Core Bus service is planned. While further calibration could have brought the Core Bus validation more in line with observed, over-calibrating the model was not desired.\nBoardings by Hierarchical Mode show a similar pattern. Overall boardings are only 3.9% lower in model compared to observed, and the modes Local Bus, LRT, and CRT all within 5%. Express Bus is the furthest away, but it has a lower number of boardings as compared to the higher boarding modes.\nThe Transfer Ratio by Hierarchical Mode shows the relationship between the trips and the boardings. While the model was only slightly higher in trips, the boardings were low. This results in a lower transfer ratio, which is still acceptable with all values being within about 5%.\nAnd for comparison, Boardings by Mode Surveyed shows acceptable differences. The Core Bus and Express Bus values show much larger differences; but again given their low volumes, these are reasonable differences."
  },
  {
    "objectID": "v9x/v910/validation/3modechoice.html#mode-share",
    "href": "v9x/v910/validation/3modechoice.html#mode-share",
    "title": "Mode Choice",
    "section": "Mode Share",
    "text": "Mode Share\nMode Share validation is shown through the comparison by groups of mode, time period, and trip purpose. For model and observed shares, the total percent for each combination of mode group, time period, and trip purpose adds up to 100%.\nMode groups compared include groupings of auto, transit, vehicle occupancy, and transit modes. The highest nest is motorized and non-motorized down to lower nests of individual transit modes and transit access modes. Shares were calculated for the following mode groupings:\n\nMotorized / Non-Motorized\nAuto / Transit\nDrive Alone / Shared Ride\nShared Ride # of Occupants\nTransit Mode\nTransit Access Mode\n\nAdditionally, the shares were compared by the following time period groupings:\n\nDaily\nPeak\nOff-peak\n\nFinally, the shares were further compared for each of the following trip purposes:\n\nAll Purposes\nHome-Based Work\nHome-Based College\nHome-Based Other\nNon-Home Based\n\nIn the model, Home-Based College is the only trip purpose that does not include trips in the off-peak time period. So, any trips with this purpose in the observed data were moved to the peak time period for comparison.\nThe interactive Figure 2 allows for selecting of different combinations to visualize the comparisons. The observed data comes from a combination of the Household Travel Survey and the 2019 Transit On-Board Survey.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof plotSelect    = Inputs.select(new Map([[nameModeMnMShare,nameModeMnMShare],\n                                              [nameModeATShare ,nameModeATShare ],\n                                              [nameModeDAShare ,nameModeDAShare ],\n                                              [nameMode23Share ,nameMode23Share ],\n                                              [nameModeTransit ,nameModeTransit ],\n                                              [nameModeAccess  ,nameModeAccess  ]\n                                             ]), {value: nameGroup, label: \"Mode Group:\"})\nviewof periodSelect  = Inputs.select(new Map([['Daily', 'DY'], ['Peak', 'PK'], ['Off-Peak', 'OK']]), {value: namePeriod, label: \"Time Period:\"});\nviewof purposeSelect = Inputs.select(new Map([['All Purposes', 'All'], ['Home-Based Work', 'HBW'], ['Home-Based College', 'HBC'], ['Home-Based Other', 'HBO'], ['Non-Home Based', 'NHB']]), {value: 'TripPurpose', label: \"Trip Purpose:\"});\n\ndataLT = transpose(dataLong)\ndataTT = transpose(dataTable)\n\nfiltered_data = dataLT.filter(function(dataL) {\n    return plotSelect == dataL.Group &&\n           periodSelect == dataL.Period &&\n           purposeSelect == dataL.TripPurpose;\n})\ntable_filtered_data = dataTT.filter(function(dataTT) {\n    return plotSelect == dataTT.Group &&\n           periodSelect == dataTT.Period &&\n           purposeSelect == dataTT.TripPurpose;\n})\n\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\nxDomain = {\n    switch(plotSelect) {  // assuming all data points have the same Mode\n        case nameModeMnMShare:\n            return ['Motorized', 'Non-Motorized'];\n            break;\n        case nameModeATShare:\n            return ['Auto', 'Transit'];\n            break;\n        case nameModeDAShare:\n            return ['Drive Alone', 'Shared Ride'];\n            break;\n        case nameMode23Share:\n            return ['Shared Ride 2 Occupants', 'Shared Ride 3+ Occupants'];\n            break;\n        case nameModeTransit:\n            return ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'];\n            break;\n        case nameModeAccess:\n            return ['Walk', 'Drive'];\n            break;\n        default:\n            return [];  // or set some sensible default\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[plotSelect, \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n        html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${d}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    ${table_filtered_data.map(row =&gt; html`\n        &lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n            html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${row[d]}&lt;/td&gt;`)}\n        &lt;/tr&gt;`)}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.Percent,\n    z: d =&gt; d.DataSource,\n    xDomain: xDomain,\n    yLabel: \"Percent\",\n    yDomain: [0,1],\n    zDomain: ['Model','Observed'],\n    width: 400,\n    height: 250,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbEmtptyCell=1\n\n\n\n\n\n\nFigure 2: Model vs Observed Mode Shares by Mode Group, Time Period, and Trip Purpose\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;br/&gt;`\n\n\n\n\n\n\n\nThe Motorized / Non-motorized grouping of model shares are within 0.2% of the observed data for the daily time period and all trip purposes with non-motorized shares being slightly higher than observed and motorized shares being slightly lower. The model shares for additional combinations of time period and purpose are all within 0.5%.\nThe Transit Mode group of model shares are also close to observed with all modes for all time periods and trip purposes. At the Daily time period for all purposes, Local Bus has slightly higher share at 1.5% compared to observed than other modes, such as CRT that is 0.3% lower than observed and LRT that is 0.2% lower than observed. Nearly all the model shares for Transit Mode combinations of time period and are within 5% of observed. The one exception is Home-Based Other which in the peak period for Local Bus is 5.5% higher than observed. Transit Access Mode model shares are all within 5% of observed shares."
  },
  {
    "objectID": "v9x/v902/validation/3-modechoice.html",
    "href": "v9x/v902/validation/3-modechoice.html",
    "title": "Mode Choice",
    "section": "",
    "text": "The validation results for the Mode Choice portion of the model are shown in this section. Mode Choice was validated against the Utah Transit Authority 2019 On-Board Survey as well as the 2012 Household Travel Survey. Validation is summarized by the following categories:"
  },
  {
    "objectID": "v9x/v902/validation/3-modechoice.html#transit-trips-and-boardings",
    "href": "v9x/v902/validation/3-modechoice.html#transit-trips-and-boardings",
    "title": "Mode Choice",
    "section": "Transit Trips and Boardings",
    "text": "Transit Trips and Boardings\nThe validation of daily transit trips and boardings is shown through the comparison of model and observed data by mode. The model was validated by the following measures:\n\nTrips by Hierarchical Mode\nBoardings by Hierarchical Mode\nTransfer Ratio by Hierarchical Mode\nBoardings by Surveyed Mode (for comparison only)\n\nThe three hierarchical mode measures are summarized by the highest hierarchy mode in a given trip with local bus being the lowest on the hierarchy and commuter rail being the highest. For example, if a trip uses Local Bus and then transfers to LRT, the trip is stored as a LRT trip. Trips by Hierarchical Mode represent each trip as a single number, regardless of the number of transfer or different modes that were used on a trip.\nBoardings by Hierarchical Mode represent each boarding separately but summarized at the highest hierarchical mode of the trip. For example, for one transfer from Local Bus to LRT there are two boardings, one on each mode, but they are both stored in the highest hierarchal mode of LRT. The Transfer Ratio by Hierarchical Mode is the ratio between boardings and trips for any given mode.\nThe final measure Boardings by Surveyed Mode represents the total boardings on each mode individually. They are not summarize at the highest hierarchical mode of the trip but rather at the mode on which the boarding actually occurred. For example, the Local Bus to LRT trip mentioned previously would be summarized in this measure as one boarding on Local Bus and one boarding one LRT. This measure is for comparison use only, since the structure of the Mode Choice model does not consider this measure during calibration.\nThe total number of boardings are the same between hierarchical mode and surveyed mode, but depending on the make-up of the trips, there totals by mode will vary.\nThe model data for hierarchical mode measures is taken from the shares reports v902_SE19_Net19_RegionShares_Pk.csv and v902_SE19_Net19_RegionShares_Ok.csv. The model data for the surveyed mode comparison is taken from _v902_SE19_Net19_1_PA_Route.dbf.\nThe interactive Figure 1 allows for the visual comparison of model and observed values for each Transit Trips and Boardings category.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bPlotSelect = Inputs.select(new Map([['Trips by Hierarchical Mode', 'Trips by Hierarchical Mode'], ['Boardings by Hierarchical Mode', 'Boardings by Hierarchical Mode'], ['Transfer Ratio by Hierarchical Mode','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: \"Category\"})\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"% Difference\", \"% Difference\"]]), {value: \"Difference\", label: \"View:\"})\n\ndataBLC = transpose(boardChart)\nfiltered_bDataC = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title &&\n           \"Value\" == dataBLC.View;\n})\ndataBTT = transpose(boardTable)\nfiltered_bDataT = dataBTT.filter(function(dataBTT) {\n    return bPlotSelect == dataBTT.Title;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n            const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_bDataT.map(row =&gt; {\n            const isBold = row['Mode'] === 'Total';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n                    const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]}; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${row[d]}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(bChart.scales.color, {title: \"Data Source\"})\n\nbChart = GroupedBarChart(filtered_bDataC, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'],\n    yLabel: \"Value\",\n    zDomain: ['Model','Observed'],\n    width: 500,\n    height: 225,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_bData2 = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title  &&\n           metric == dataBLC.View;\n})\n\n//https://observablehq.com/@d3/diverging-bar-chart\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_bData2, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.Mode,\n    xFormat: metric === \"Difference\" ? \"+,d\" : \"+%\",\n    xLabel: \"Model vs Observed Differences\",\n    height: 200,\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell = 1\n\n\n\n\n\n\nFigure 1: Transit Trips and Boardings Model vs Observed Comparison\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\nWhen considering Trips by Hierarchical Mode, the calibration routine of the model results in the total number of transit trips in the model being very close to the observed. For this model the model trips are only 1.4% lower than observed for the total number of trips. By mode the differences are within reasonable ranges for the higher trip modes. For example, LRT is only 0.2% high and CRT is only 8.0% low.\nDue to the very low number of trips for Core Bus and Express Bus, their differences are acceptable. Currently, Core Bus for example has only one route. In future phases of the RTP, additional Core Bus service is planned. While further calibration could have brought the Core Bus validation more in line with observed, over-calibrating the model was not desired.\nBoardings by Hierarchical Mode show a similar pattern. Overall boardings are only 3.9% lower in model compared to observed, and the modes Local Bus, LRT, and CRT all within 5%. Express Bus is the furthest away, but it has a lower number of boardings as compared to the higher boarding modes.\nThe Transfer Ratio by Hierarchical Mode shows the relationship between the trips and the boardings. While the model was only slightly higher in trips, the boardings were low. This results in a lower transfer ratio, which is still acceptable with all values being within about 5%.\nAnd for comparison, Boardings by Mode Surveyed shows acceptable differences. The Core Bus and Express Bus values show much larger differences; but again given their low volumes, these are reasonable differences."
  },
  {
    "objectID": "v9x/v902/validation/3-modechoice.html#mode-share",
    "href": "v9x/v902/validation/3-modechoice.html#mode-share",
    "title": "Mode Choice",
    "section": "Mode Share",
    "text": "Mode Share\nMode Share validation is shown through the comparison by groups of mode, time period, and trip purpose. For model and observed shares, the total percent for each combination of mode group, time period, and trip purpose adds up to 100%.\nMode groups compared include groupings of auto, transit, vehicle occupancy, and transit modes. The highest nest is motorized and non-motorized down to lower nests of individual transit modes and transit access modes. Shares were calculated for the following mode groupings:\n\nMotorized / Non-Motorized\nAuto / Transit\nDrive Alone / Shared Ride\nShared Ride # of Occupants\nTransit Mode\nTransit Access Mode\n\nAdditionally, the shares were compared by the following time period groupings:\n\nDaily\nPeak\nOff-peak\n\nFinally, the shares were further compared for each of the following trip purposes:\n\nAll Purposes\nHome-Based Work\nHome-Based College\nHome-Based Other\nNon-Home Based\n\nIn the model, Home-Based College is the only trip purpose that does not include trips in the off-peak time period. So, any trips with this purpose in the observed data were moved to the peak time period for comparison.\nThe interactive Figure 2 allows for selecting of different combinations to visualize the comparisons. The observed data comes from a combination of the Household Travel Survey and the 2019 Transit On-Board Survey.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof plotSelect    = Inputs.select(new Map([[nameModeMnMShare,nameModeMnMShare],\n                                              [nameModeATShare ,nameModeATShare ],\n                                              [nameModeDAShare ,nameModeDAShare ],\n                                              [nameMode23Share ,nameMode23Share ],\n                                              [nameModeTransit ,nameModeTransit ],\n                                              [nameModeAccess  ,nameModeAccess  ]\n                                             ]), {value: nameGroup, label: \"Mode Group:\"})\nviewof periodSelect  = Inputs.select(new Map([['Daily', 'DY'], ['Peak', 'PK'], ['Off-Peak', 'OK']]), {value: namePeriod, label: \"Time Period:\"});\nviewof purposeSelect = Inputs.select(new Map([['All Purposes', 'All'], ['Home-Based Work', 'HBW'], ['Home-Based College', 'HBC'], ['Home-Based Other', 'HBO'], ['Non-Home Based', 'NHB']]), {value: 'TripPurpose', label: \"Trip Purpose:\"});\n\ndataLT = transpose(dataLong)\ndataTT = transpose(dataTable)\n\nfiltered_data = dataLT.filter(function(dataL) {\n    return plotSelect == dataL.Group &&\n           periodSelect == dataL.Period &&\n           purposeSelect == dataL.TripPurpose;\n})\ntable_filtered_data = dataTT.filter(function(dataTT) {\n    return plotSelect == dataTT.Group &&\n           periodSelect == dataTT.Period &&\n           purposeSelect == dataTT.TripPurpose;\n})\n\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\nxDomain = {\n    switch(plotSelect) {  // assuming all data points have the same Mode\n        case nameModeMnMShare:\n            return ['Motorized', 'Non-Motorized'];\n            break;\n        case nameModeATShare:\n            return ['Auto', 'Transit'];\n            break;\n        case nameModeDAShare:\n            return ['Drive Alone', 'Shared Ride'];\n            break;\n        case nameMode23Share:\n            return ['Shared Ride 2 Occupants', 'Shared Ride 3+ Occupants'];\n            break;\n        case nameModeTransit:\n            return ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'];\n            break;\n        case nameModeAccess:\n            return ['Walk', 'Drive'];\n            break;\n        default:\n            return [];  // or set some sensible default\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[plotSelect, \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n        html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${d}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    ${table_filtered_data.map(row =&gt; html`\n        &lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n            html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${row[d]}&lt;/td&gt;`)}\n        &lt;/tr&gt;`)}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.Percent,\n    z: d =&gt; d.DataSource,\n    xDomain: xDomain,\n    yLabel: \"Percent\",\n    yDomain: [0,1],\n    zDomain: ['Model','Observed'],\n    width: 400,\n    height: 250,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbEmtptyCell=1\n\n\n\n\n\n\nFigure 2: Model vs Observed Mode Shares by Mode Group, Time Period, and Trip Purpose\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;br/&gt;`\n\n\n\n\n\n\n\nThe Motorized / Non-motorized grouping of model shares are within 0.2% of the observed data for the daily time period and all trip purposes with non-motorized shares being slightly higher than observed and motorized shares being slightly lower. The model shares for additional combinations of time period and purpose are all within 0.5%.\nThe Transit Mode group of model shares are also close to observed with all modes for all time periods and trip purposes. At the Daily time period for all purposes, Local Bus has slightly higher share at 1.5% compared to observed than other modes, such as CRT that is 0.3% lower than observed and LRT that is 0.2% lower than observed. Nearly all the model shares for Transit Mode combinations of time period and are within 5% of observed. The one exception is Home-Based Other which in the peak period for Local Bus is 5.5% higher than observed. Transit Access Mode model shares are all within 5% of observed shares."
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy.html",
    "href": "v9x/v902/validation/4-assignhwy.html",
    "title": "Highway Assignment",
    "section": "",
    "text": "Validation of final highway assignment was done comparing model outputs from the final loaded networks with observed data. The comparisons were done with volumes and speeds."
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy.html#volumes",
    "href": "v9x/v902/validation/4-assignhwy.html#volumes",
    "title": "Highway Assignment",
    "section": "Volumes",
    "text": "Volumes\nThe validation results for the Highway Assignment portion of the model are shown in this section. The observed data for 2019 volumes is taken from the Utah Department of Transportation (UDOT) Average Annual Daily Traffic (AADT) History and associated with their respective model segments. The traffic model data is taken from segment summary report for the 2019 base year model: v902_SE19_Net19_Summary_SEGID.csv. The results are divided into three sections:\n\nSummary Comparison\nDetailed Comparison\nMap Comparison\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Comparison\nThe summary comparison shows region and county-wide differences between model and observed for Average Daily Volume and Vehicle-Miles Traveled (VMT) by vehicle type. The values for Box Elder and Weber counties are only the portions within the MPO planning area. Validation was checked comparing the average daily volume at the region and county levels. Figure 1, below, contains an interactive view of model vs observed differences by roadway class and vehicle type.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bSummaryFuncClass = Inputs.select(new Map([['All Roadways','All Roadways'], ['Freeway','Freeway'], ['Principal','Principal'], ['Minor', 'Minor'], ['Collector', 'Collector']]), {value: 'All Roadways', label: \"Roadway Class:\"})\nviewof bSummaryVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\nviewof bSummaryDiffType = Inputs.select(new Map([['Percent Difference','DiffPct'], ['Difference','Diff']]), {value: 'DiffPct', label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nvolDiffLongT = transpose(volDiffLong)\nvmtDiffLongT = transpose(vmtDiffLong)\n\nvolDiffLongT_filtered = volDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vol' + bSummaryDiffType) == dataL.View);\n})\nvmtDiffLongT_filtered = vmtDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vmt' + bSummaryDiffType) == dataL.View);\n})\n\nvvp = transpose(vvpct)\nvvpL = transpose(vvpctLong)\nvvaL = transpose(vvabsLong)\nvvaLR = transpose(vvabsLongR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXDomainVol(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_volDiff * -1, max_abs_value_volDiff];\n    } else {\n        //return [max_abs_value_volDiffPct * -1, max_abs_value_volDiff]; // -100% to 100%\n        return [-100, 100]\n    }\n}\n\nfunction getXDomainVmt(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff];\n    } else {\n        //return [max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiff]; // -100% to 100%\n        return [-1,1]\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Average Daily Volume&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVolDiff = DivergingBarChart(volDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_volDiff * -1, max_abs_value_volDiff] : [-1, 1], //[max_abs_value_volDiffPct * -1, max_abs_value_volDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Vehicle-Miles Traveled&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVmtDiff = DivergingBarChart(vmtDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff] : [-1, 1], //[max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell1 = 1\n\n\n\n\n\n\nFigure 1: Highway Assignment Summary Comparison\n\n\n\nAt the region level model volume is 0.4% lower than observed volume. The four more urban counties (Weber, Davis, Salt Lake, and Davis) were all within 5% of observed volumes with Salt Lake County being the closest. Weber and Davis were slightly lower and Utah County was slightly higher. Box Elder County is more rural than the other counties. Box Elder model volumes are about 10% lower than observed. Time did not allow for further calibration of the volumes in Box Elder area to account for the larger differences.\nOne important observation at the Collector and All Vehicles level is that Utah County shows a much higher difference than the other counties. Upon further investigation of observed Collector volumes in Utah County, many roadway segments had very low volumes compared to what was expected. Utah County is one of the highest growth areas in the region. For this reason, we expect that the observed count data may be underrepresenting actual volumes. We also anticipate observed volumes in Utah County to improve in the near-term. Within the last several years, a large investment in continuous count station in Utah County has been made. The new counters will add additional information to generate observed volumes for all roadway segments.\nThe largest differences in model vs observed volumes occur in the Medium Truck and Heavy Truck vehicle types. A good amount of time was spent attempting to bring model truck volumes closer to observed. However, due to the limited data sources for truck information, further need to investigate observed truck volumes, and a desire to not over-calibrate the model, further calibration was stopped. Truck modeling remains a future priority for model improvement.\n\n\nDetailed Comparison\nThe model vs observed details in this section are presented by volume and Vehicle-Miles Traveled (VMT) through the comparison of model and observed data facility type by region and also by county. Figure 2 allows for the interactive visual comparison of model and observed values for the region and each county for all vehicles, cars, medium trucks, and heavy trucks. The comparisons are shown in four different types of charts and tables:\n\nAverage Daily Volume by Roadway Class (2a): The daily volume is averaged across all segments within their respective geography and vehicle type.\nTotal VMT by Roadway Class (2b): For each segment*, the daily volume is multiplied by segment distance and then summed across all segments within their respective geography and vehicle type.\nModel vs Count Segment Volume (2c): This is a scatter plot of segment daily volume with the x-axis as the observed volume and the y-axis as the model volume. The red line shows the location of where model and observed volumes are equal. The dashed blue line shows a least-squares linear regression. The further the blue line moved away from the red line, the further the model is from observed.\nSegment Percent Error (2d): This is a scatter plot showing the amount of error (percent difference) between the observed volume and the model volume. The observed volume is the x-axis and the percent error is the y-axis. The red lines are a bounding box that shows the control target. As volume increases, it is expected that the percent error should decrease.\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bCountySelect = Inputs.select(new Map([['Region', 'Region'], ['Box Elder County - WFRC',3], ['Weber County - WFRC',57], ['Davis County',11], ['Salt Lake County',35], ['Utah County',49]]), {value: 'All', label: \"Geography:\"})\nviewof bVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\n\nsortOrder = ['Freeway', 'Principal', 'Minor', 'Collector', 'All Roadways'];\n\nvolT = transpose(vol)\nvmtT = transpose(vmt)\nfiltered_volData = volT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtData = vmtT.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\nvolTL = transpose(volLong)\nvmtTL = transpose(vmtLong)\nfiltered_volDataL = volTL.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtDataL = vmtTL.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\n\nallvehplotT = transpose(allvehplot)\nfiltered_allvehplotData = allvehplotT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfunction formatNumber(value, isPercentage=false) {\n    if (typeof value === 'undefined') {\n        return '';  // or return a default value or message\n    }\n    \n    if (isPercentage) {\n        return (Number(value) * 100).toFixed(1) + '%';\n    }\n    return Number(value.toFixed(0)).toLocaleString();\n}\n\nwidthsVol = ['100px', '52px', '70px', '70px', '73px', '73px', '63px', '63px']; // Define the widths\nwidthsVmt = ['100px', '88px', '88px', '88px', '88px'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2a. Average Daily Volume by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"# Segs\", \"Volume\", \"Observed\", \"Difference\", \"Percent Difference\", \"RMSE\", \"Percent RMSE\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVol[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_volData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"numSegs\", \"volMod\", \"volObs\", \"volDiff\", \"volDiffPct\", \"volRmse\", \"volRmsePct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 5 || i === 7) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 4) || i==6) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVol = Legend(bChartVol.scales.color, {title: \"Data Source\"})\n\nbChartVol = GroupedBarChart(filtered_volDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"Volume (thousands)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2b. Total Daily VMT by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"Model\", \"Observed\", \"Difference\", \"Percent Difference\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVmt[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_vmtData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"vmtMod\", \"vmtObs\", \"vmtDiff\", \"vmtDiffPct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 4 || i === 6) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 3) || i==5) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVmt = Legend(bChartVmt.scales.color, {title: \"Data Source\"})\n\nbChartVmt = GroupedBarChart(filtered_vmtDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"VMT (millions)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {max} from 'd3-array';\n\n\n\n\n\n\n\n\n\nCode\nmaxVal = {\n  return Math.max(\n    d3.max(filtered_allvehplotData, d =&gt; d.volObs),\n    d3.max(filtered_allvehplotData, d =&gt; d.volMod)\n  );\n}\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2c. Model vs Observed Volumes&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Model Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.link([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x1: 0,\n      y1: 0,\n      x2: maxVal,\n      y2: (k) =&gt; maxVal * k,\n      strokeOpacity: (k) =&gt; k === 1 ? 1 : 0.2,\n      stroke: \"red\",\n      strokeWidth: (k) =&gt; k === 1 ? 2 : 1.5\n    }),\n    Plot.text([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x: maxVal,\n      y: (k) =&gt; maxVal * k,\n      text: ((f) =&gt; (k) =&gt; k === 1 ? \"Equal\" : f(k - 1))(d3.format(\"+.0%\")),\n      textAnchor: \"start\",\n      dx: 6\n    }),\n    Plot.linearRegressionY(filtered_allvehplotData, {\n        x: \"volObs\",\n        y: \"volMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2d. Segment Percent Error&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Percent Error\",\n    domain: [-2, 2],\n    tickFormat: d3.format(\".0%\")\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volErrorPct\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.ruleY([2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: 1,\n      y2: 2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: 0.5,\n      y2: 1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: 0.25,\n      y2: 0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: 0.20,\n      y2: 0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: 0.15,\n      y2: 0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: 0.10,\n      y2: 0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: -1,\n      y2: -2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: -0.5,\n      y2: -1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: -0.25,\n      y2: -0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: -0.20,\n      y2: -0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: -0.15,\n      y2: -0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: -0.10,\n      y2: -0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell2 = 1\n\n\n\n\n\n\nFigure 2: Detailed Model vs Observed Comparison of Highway Assignment\n\n\n\n\n\nMap Comparison\nThe maps in Figure 3 shows a comparison of segment level model vs observed volumes by vehicle types. Blue represents model lower than observed and red represent model volume higher than observed.\n\n\n\nFigure 3: Segment-Level Model vs Observed Volume Comparison by Vehicle Type\n\n\nLooking at the All Vehicles map, the model volumes are lower than observed for by more than 15,000 vehicles per day for the east side of I-215 and for I-15 through northern Utah County. Model volumes are higher than observed volumes by more than than 15,000 vehicles for I-15 in southern Salt lake County and for I-15 in Utah County between Springville and Spanish Fork. When looking at these areas by vehicle type, the drop in Cars and Light Trucks are actual greater since the Medium Trucks and Heavy Trucks in these areas are greater in the model vs observed. Outside of these areas, the volume differences between model and observed are relatively minor.\nThe lower arterial model vs observed volumes of Heavy Trucks on 9000 South in Salt Lake County was further investigated. The Heavy Truck observed volume for this roadway seemed much higher than expected for this roadway. The lower volumes are likely due to the observed data and not anything in the model."
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy.html#speeds",
    "href": "v9x/v902/validation/4-assignhwy.html#speeds",
    "title": "Highway Assignment",
    "section": "Speeds",
    "text": "Speeds\nComparisons were made between model and observed for a sample of OD pairs. Observed speeds come from sampled data at various time periods in 2019 for the WFRC area using the Google API for reported travel times between coordinates for an origin and destination. Model speeds come from the final network skims that report travel times between all TAZs in the model for each period of the day. The two data sets were joined using a coordinate to TAZ spatial join to locate Google end points to match their respective TAZ.\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof vPeriod = Inputs.select(new Map([['AM','AM'], ['Midday','MD'], ['PM','PM'], ['Evening', 'EV']]), {value: 'AM', label: \"Period:\"})\n\nspeedT = transpose(speed)\n\nspeedT_filtered = speedT.filter(function(dataSpd) {\n    return vPeriod == dataSpd.Period;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;Model vs Observed Speeds&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Speed (mph)\",\n    domain: [0, 70]\n  },\n  y: {\n    label: \"Model Speed (mph)\",\n    domain: [0, 70]\n  },\n  marks: [\n    Plot.dot(speedT_filtered, {\n      x: \"spdObs\",\n      y: \"spdMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.linearRegressionY(speedT_filtered, {\n        x: \"spdObs\",\n        y: \"spdMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "v9x/v902/whats-new/1-overview.html",
    "href": "v9x/v902/whats-new/1-overview.html",
    "title": "Overview",
    "section": "",
    "text": "Version 9.0.2 reflects the Amendment #1 changes to the WFRC & MAG Regional Transportation Plans (adopted May/June 2024).\nThe model processes and parameters in version 9.0.2 are the same as version 9.0.0 and version 9.0.1. Version 9.0.2 includes all the highway, transit, and segment maintenance and clean-up work completed up through version 9.0.1-patch2 (06-24-2024).\nChanges to the model inputs in version 9.0.2 include updates to the highway and transit networks, as well as the creation of a few new folders and files that serve as resources.\nModel comparisons between version 9.0.2 and version 9.0.1-patch2 were created to demonstrate the location and magnitude of roadway volume and transit ridership differences."
  },
  {
    "objectID": "v9x/v902/whats-new/2-input-files.html",
    "href": "v9x/v902/whats-new/2-input-files.html",
    "title": "Changes to Input Files",
    "section": "",
    "text": "The following edits were made to the highway network to account for Amendment #1:\n\nA HOT Lane on I-15 from Farmington to 2600 S was converted to a general-purpose lane (4 GP + 2 HOT  5 GP + 1 HOT) as a direct result of the EIS (section R-D-45)\nHighway network attributes were also updated in all phases of the plan to accommodate additional passing lanes for the operational project on I-15 in Box Elder from US-91 North to 3000 N\nUpdated 12600 S from 6400 W to Bacchus Highway to 5 lanes\nAdded Freedom Point Way from 100 W to Pony Express Rd (3 lanes)\nRemoved lanes in 2023 and 2028 from Granville Ave from Old Bingham Highway to 10200 S\nFixed HOT23_32 through HOT23_50UF fields to correctly reflect the RTP projects and Amendment from Farmington to the Utah/Salt Lake County Line\nFixed auxiliary lane FT on I-15 from Farmington to 400 S in Salt Lake\nAdded new underpass north of 2600 S in North Salt Lake/Bountiful\nAdded new configuration at 1000 N to 600 N interchanges on I-15\nAltered Davis-SLC Community Connector from 400 W to 300 W\nAdded Maker Way to accommodate for the Farmington Station circulator\n\nA summary of the specific edits done to the link and nodes (in comparison to v901-patch2) are shown below:\nLinks\n\nNo new links were added to the highway network\nOver 300 links had at least one field variable updated (i.e. lanes, functional type, street name distance, direction)\n30 links where the LINK_ID attribute was renamed to point to a different node (24 in Salt Lake County, 4 in Utah County, 2 in Weber County)\n\nNodes\n\nNo new nodes were added to the highway network\n7 nodes were repositioned (5 in Salt Lake County, 1 in Utah County, 1 in Davis County)\n\nThe following figures show the lane and functional type coding differences between version 9.0.2 and version 9.0.1-patch2. Differences are shown at the segment level.\n\n2019203220422050\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 1: Lanes and Functional Type Model Differences – 2019\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 2: Lanes and Functional Type Model Differences – 2032\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 3: Lanes and Functional Type Model Differences – 2042\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 4: Lanes and Functional Type Model Differences – 2050\n\n\n\n\n\n\n\n\nAmendment #1 led to the following updates to the highway network’s rail component:\n\nA new Bluffdale commuter rail station was added at the former point of the mountain prison site (this included updating the rail speeds to/from this station)\nFrontRunner speeds were adjusted to match UTA’s FrontRunner Forward study. Phases and speed changes are outlined in Table 1.\nThe following 6 transit speed fields corresponding to the 6 phases of the FrontRunner Speed Study were added to the highway network as a reference (information regarding the process for determining the transit speeds based on the FrontRunner Speed study can be found in the CRTSpeedSummaryFile.xlsx located in the Inputs/Transit folder):\n\nTRNSPD_FF1\nTRNSPD_FF2\nTRNSPD_FF3\nTRNSPD_FF4\nTRNSPD_FF5\nTRNSPD_FF6\n\n\n\n\n\n\nTable 1: Version 9.0.2 Transit Speed Field Correspondence to UTA FrontRunner Study Reference Fields\n\n\n\n\n\n\n\n\nPlan Phase (2023-2050)\nAssumptions\nField Calculation\nField Calculation (Additional)\n\n\n\n\nPhase 1 Fiscally Constrained\n15/30, POTM Station, Payson Extension\nTSPD23_32 = TRNSPD_FF1\nProvo to Payson (TSPD23_32 = TRNSPD_FF2)\n\n\nPhase 1 Needed\n15/30, POTM Station, Payson Extension\nTSPD23_32U = TRNSPD_FF1\nProvo to Payson (TSPD23_32U = TRNSPD_FF2)\n\n\nPhase 2 Fiscally Constrained\n15/30, POTM Station, Payson Extension\nTSPD23_42 = TRNSPD_FF1\nProvo to Payson (TSPD23_42 = TRNSPD_FF2)\n\n\nPhase 2 Needed\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_42U = TRNSPD_FF3\n\n\n\nPhase 3 Fiscally Constrained\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_50 = TRNSPD_FF3\n\n\n\nPhase 3 Needed\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_50U = TRNSPD_FF3\n\n\n\n\n\n\n\nA comparison of the FrontRunner speeds and travel time savings between versions 9.0.2 and 9.0.1-patch2 are found in Figure 5. The difference in speeds results in a savings of 10 to 15 minutes along the entire route in 2032 and 2042. In 2050, the difference in speeds results in a time savings of 26 to 33 minutes.\n\n\n\n\n\n\n\nCode\nodstationdata_t = transpose(odstationdata);\n\n\n\n\n\n\n\n\n\nCode\nviewof bVariable = Inputs.select(new Map([\n  ['Distance (miles)', 'Distance'],\n  ['NB Travel Time (minutes)', 'PkTimeDir1'],\n  ['SB Travel Time (minutes)', 'PkTimeDir2'],\n  ['NB Travel Speed (mph)', 'PkSpeedDir1'],\n  ['SB Travel Speed (mph)', 'PkSpeedDir2']\n]), { value: 'Distance', label: \"Variable:\" });\nviewof bYear = Inputs.select(new Map([[2032, 2032], [2042, 2042], [2050, 2050]]), { value: '2050', label: \"Year:\" });\n\nfiltered_odstationdata_t = odstationdata_t.filter(function(dataL) {\n  return bVariable == dataL.Variable &&\n         bYear == dataL.modYear;\n});\n\n// Define columns based on the first item in filtered_odstationdata_t\ncolumns = ['Seq', 'Segment', 'v901-patch2', 'v902', 'Difference'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n// Display the filtered data as a table\nhtml`\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      ${columns.map((col, index) =&gt; html`&lt;th style=\"text-align: center; ${index === 0 ? 'display: none;' : ''}\"&gt;${col}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    ${filtered_odstationdata_t.map((row, rowIndex) =&gt; html`\n      &lt;tr style=\"background-color: ${rowIndex % 2 === 0 ? '#f2f2f2' : 'white'}; ${rowIndex === filtered_odstationdata_t.length - 1 ? 'font-weight: bold;' : ''}\"&gt;\n        ${columns.map((col, index) =&gt; html`\n          &lt;td style=\"text-align: ${index &gt;= 2 && index &lt;= 4 ? 'right' : 'left'}; width: ${index &gt;= 2 && index &lt;= 4 ? '80px' : 'auto'}; ${index === 0 ? 'display: none;' : ''}\"&gt;\n            ${index &gt;= 2 && index &lt;= 4 ? parseFloat(row[col]).toFixed(1) : row[col]}\n          &lt;/td&gt;`)}\n      &lt;/tr&gt;`)}\n  &lt;/tbody&gt;\n&lt;/table&gt;`;\n\n\n\n\n\n\nFigure 5: FrontRunner Distance, Travel Time, adn Speed Differences by Year\n\n\n\n\n\n\nIn the 1_Inputs/3_Highway/_Network Processing Tools folder, the Network QA-QC folder was added containing new Jupyter Notebook files. The 0-Network-QA-QC-Process.ipynb describes a process for verifying the quality of the highway network, segment shapefile, and transit networks before running/releasing a new version of the model. The 1-Network-QA-QC-Checks.ipynb is a placeholder for the future checks that will be programmatically made. However, for now, this file is empty."
  },
  {
    "objectID": "v9x/v902/whats-new/2-input-files.html#highway-network",
    "href": "v9x/v902/whats-new/2-input-files.html#highway-network",
    "title": "Changes to Input Files",
    "section": "",
    "text": "The following edits were made to the highway network to account for Amendment #1:\n\nA HOT Lane on I-15 from Farmington to 2600 S was converted to a general-purpose lane (4 GP + 2 HOT  5 GP + 1 HOT) as a direct result of the EIS (section R-D-45)\nHighway network attributes were also updated in all phases of the plan to accommodate additional passing lanes for the operational project on I-15 in Box Elder from US-91 North to 3000 N\nUpdated 12600 S from 6400 W to Bacchus Highway to 5 lanes\nAdded Freedom Point Way from 100 W to Pony Express Rd (3 lanes)\nRemoved lanes in 2023 and 2028 from Granville Ave from Old Bingham Highway to 10200 S\nFixed HOT23_32 through HOT23_50UF fields to correctly reflect the RTP projects and Amendment from Farmington to the Utah/Salt Lake County Line\nFixed auxiliary lane FT on I-15 from Farmington to 400 S in Salt Lake\nAdded new underpass north of 2600 S in North Salt Lake/Bountiful\nAdded new configuration at 1000 N to 600 N interchanges on I-15\nAltered Davis-SLC Community Connector from 400 W to 300 W\nAdded Maker Way to accommodate for the Farmington Station circulator\n\nA summary of the specific edits done to the link and nodes (in comparison to v901-patch2) are shown below:\nLinks\n\nNo new links were added to the highway network\nOver 300 links had at least one field variable updated (i.e. lanes, functional type, street name distance, direction)\n30 links where the LINK_ID attribute was renamed to point to a different node (24 in Salt Lake County, 4 in Utah County, 2 in Weber County)\n\nNodes\n\nNo new nodes were added to the highway network\n7 nodes were repositioned (5 in Salt Lake County, 1 in Utah County, 1 in Davis County)\n\nThe following figures show the lane and functional type coding differences between version 9.0.2 and version 9.0.1-patch2. Differences are shown at the segment level.\n\n2019203220422050\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 1: Lanes and Functional Type Model Differences – 2019\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 2: Lanes and Functional Type Model Differences – 2032\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 3: Lanes and Functional Type Model Differences – 2042\n\n\n\n\n\n\n\n\n\n\n\n(a) Lanes\n\n\n\n\n\n\n\n\n\n\n(b) Functional Type\n\n\n\n\n\n\n\nFigure 4: Lanes and Functional Type Model Differences – 2050\n\n\n\n\n\n\n\n\nAmendment #1 led to the following updates to the highway network’s rail component:\n\nA new Bluffdale commuter rail station was added at the former point of the mountain prison site (this included updating the rail speeds to/from this station)\nFrontRunner speeds were adjusted to match UTA’s FrontRunner Forward study. Phases and speed changes are outlined in Table 1.\nThe following 6 transit speed fields corresponding to the 6 phases of the FrontRunner Speed Study were added to the highway network as a reference (information regarding the process for determining the transit speeds based on the FrontRunner Speed study can be found in the CRTSpeedSummaryFile.xlsx located in the Inputs/Transit folder):\n\nTRNSPD_FF1\nTRNSPD_FF2\nTRNSPD_FF3\nTRNSPD_FF4\nTRNSPD_FF5\nTRNSPD_FF6\n\n\n\n\n\n\nTable 1: Version 9.0.2 Transit Speed Field Correspondence to UTA FrontRunner Study Reference Fields\n\n\n\n\n\n\n\n\nPlan Phase (2023-2050)\nAssumptions\nField Calculation\nField Calculation (Additional)\n\n\n\n\nPhase 1 Fiscally Constrained\n15/30, POTM Station, Payson Extension\nTSPD23_32 = TRNSPD_FF1\nProvo to Payson (TSPD23_32 = TRNSPD_FF2)\n\n\nPhase 1 Needed\n15/30, POTM Station, Payson Extension\nTSPD23_32U = TRNSPD_FF1\nProvo to Payson (TSPD23_32U = TRNSPD_FF2)\n\n\nPhase 2 Fiscally Constrained\n15/30, POTM Station, Payson Extension\nTSPD23_42 = TRNSPD_FF1\nProvo to Payson (TSPD23_42 = TRNSPD_FF2)\n\n\nPhase 2 Needed\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_42U = TRNSPD_FF3\n\n\n\nPhase 3 Fiscally Constrained\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_50 = TRNSPD_FF3\n\n\n\nPhase 3 Needed\n15/30, POTM Station, Payson Extension, Electrification\nTSPD23_50U = TRNSPD_FF3\n\n\n\n\n\n\n\nA comparison of the FrontRunner speeds and travel time savings between versions 9.0.2 and 9.0.1-patch2 are found in Figure 5. The difference in speeds results in a savings of 10 to 15 minutes along the entire route in 2032 and 2042. In 2050, the difference in speeds results in a time savings of 26 to 33 minutes.\n\n\n\n\n\n\n\nCode\nodstationdata_t = transpose(odstationdata);\n\n\n\n\n\n\n\n\n\nCode\nviewof bVariable = Inputs.select(new Map([\n  ['Distance (miles)', 'Distance'],\n  ['NB Travel Time (minutes)', 'PkTimeDir1'],\n  ['SB Travel Time (minutes)', 'PkTimeDir2'],\n  ['NB Travel Speed (mph)', 'PkSpeedDir1'],\n  ['SB Travel Speed (mph)', 'PkSpeedDir2']\n]), { value: 'Distance', label: \"Variable:\" });\nviewof bYear = Inputs.select(new Map([[2032, 2032], [2042, 2042], [2050, 2050]]), { value: '2050', label: \"Year:\" });\n\nfiltered_odstationdata_t = odstationdata_t.filter(function(dataL) {\n  return bVariable == dataL.Variable &&\n         bYear == dataL.modYear;\n});\n\n// Define columns based on the first item in filtered_odstationdata_t\ncolumns = ['Seq', 'Segment', 'v901-patch2', 'v902', 'Difference'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n// Display the filtered data as a table\nhtml`\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      ${columns.map((col, index) =&gt; html`&lt;th style=\"text-align: center; ${index === 0 ? 'display: none;' : ''}\"&gt;${col}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    ${filtered_odstationdata_t.map((row, rowIndex) =&gt; html`\n      &lt;tr style=\"background-color: ${rowIndex % 2 === 0 ? '#f2f2f2' : 'white'}; ${rowIndex === filtered_odstationdata_t.length - 1 ? 'font-weight: bold;' : ''}\"&gt;\n        ${columns.map((col, index) =&gt; html`\n          &lt;td style=\"text-align: ${index &gt;= 2 && index &lt;= 4 ? 'right' : 'left'}; width: ${index &gt;= 2 && index &lt;= 4 ? '80px' : 'auto'}; ${index === 0 ? 'display: none;' : ''}\"&gt;\n            ${index &gt;= 2 && index &lt;= 4 ? parseFloat(row[col]).toFixed(1) : row[col]}\n          &lt;/td&gt;`)}\n      &lt;/tr&gt;`)}\n  &lt;/tbody&gt;\n&lt;/table&gt;`;\n\n\n\n\n\n\nFigure 5: FrontRunner Distance, Travel Time, adn Speed Differences by Year\n\n\n\n\n\n\nIn the 1_Inputs/3_Highway/_Network Processing Tools folder, the Network QA-QC folder was added containing new Jupyter Notebook files. The 0-Network-QA-QC-Process.ipynb describes a process for verifying the quality of the highway network, segment shapefile, and transit networks before running/releasing a new version of the model. The 1-Network-QA-QC-Checks.ipynb is a placeholder for the future checks that will be programmatically made. However, for now, this file is empty."
  },
  {
    "objectID": "v9x/v902/whats-new/2-input-files.html#transit-networks",
    "href": "v9x/v902/whats-new/2-input-files.html#transit-networks",
    "title": "Changes to Input Files",
    "section": "Transit Networks",
    "text": "Transit Networks\n\nChanges to Transit Line Files Due to Amendment #1\nThe following edits were made to the transit network to account for Amendment #1:\n\nAdded a shuttle service at the Point of the Mountain in Phase 1 of the RTP\nReplaced BRT with LRT through the Point of the Mountain in Phase 2 of the RTP\nAdded a new shuttle service at the Farmington Transit Station\nAdded Bluffdale commuter rail station\n\nWith the Amendment #1 edits, transit projects crossing the border between Salt Lake and Utah counties are now consistent between WFRC and MAG’s unfunded need project lists.\nMinor edits were made to the transit line files to ensure consistency with the changes made to the highway network."
  },
  {
    "objectID": "v9x/v902/whats-new/3-modelresults.html",
    "href": "v9x/v902/whats-new/3-modelresults.html",
    "title": "Compare Model Results",
    "section": "",
    "text": "This section compares the model results between version 9.0.2 and version 9.0.1-patch2."
  },
  {
    "objectID": "v9x/v902/whats-new/3-modelresults.html#road-volume-comparisons",
    "href": "v9x/v902/whats-new/3-modelresults.html#road-volume-comparisons",
    "title": "Compare Model Results",
    "section": "Road Volume Comparisons",
    "text": "Road Volume Comparisons\nThe comparison between daily volumes at the segment level can be found in Figure 1 for 2019 and 2050. Decreases in volume in version 9.0.2 compared to version 9.0.1-patch2 are shown in blue, while increases are shown in red. Figure 2 shows a similar comparison, displaying medium plus heavy truck volumes.\nFor 2019, the differences are negligible in all vehicle and truck volumes between the model versions.\nFor 2050, there are increases in both all vehicle and truck volumes on I-15 in Davis County due to increased general purpose capacity. Other differences are negligible.\n\nVolume Change - All VehiclesVolume Change - Truck\n\n\n\n\n\n\n\n\n\n(a) 2019\n\n\n\n\n\n\n\n(b) 2050 Fiscally Constrained\n\n\n\n\n\n\n\nFigure 1: Daily Volume Comparison – All Vehicles\n\n\n\n\n\n\n\n\n\n\n\n(a) 2019\n\n\n\n\n\n\n\n(b) 2050 Fiscally Constrained\n\n\n\n\n\n\n\nFigure 2: Daily Volume Comparison – Medium+Heavy Truck"
  },
  {
    "objectID": "v9x/v902/whats-new/3-modelresults.html#transit-comparisons",
    "href": "v9x/v902/whats-new/3-modelresults.html#transit-comparisons",
    "title": "Compare Model Results",
    "section": "Transit Comparisons",
    "text": "Transit Comparisons\nVersion 9.0.2 showed a slight increase in transit trips in 2042 and 2050 compared to version 9.0.1-patch2 (see Figure 3 through Figure 9). The total transit trips in 2050 for version 9.0.2 is 337,000 daily trips compared to the version 9.0.1-patch2 model that showed 320,000 daily trips, which equates to 5% more trips.\nCommuter Rail saw the greatest increase in trips, some of which were new trips and some that had shifted from Express Bus to Commuter Rail. The shift from Express Bus to Commuter Rail is primarily due to the improvements in commuter rail speeds and to the additional stop in Bluffdale. These improvements make Commuter Rail more attractive and accessible which draws trips away from Express Bus since they compete for trips in similar markets.\nBRT saw a slight increase in future trips. Light Rail, Core Route, and Local Bus trips remained relatively unchanged.\n\nAll ModesCommuter RailLight RailBus Rapid TransitExpress BusCore BusLocal Bus\n\n\n\n\n\n\n                                                \nFigure 3: Daily Transit Ridership - All Modes\n\n\n\n\n\n\n\n\n\n                                                \nFigure 4: Daily Transit Ridership - Commuter-Rail Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 5: Daily Transit Ridership - Light-Rail Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 6: Daily Transit Ridership - Bus Rapid Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 7: Daily Transit Ridership - Express Bus\n\n\n\n\n\n\n\n\n\n                                                \nFigure 8: Daily Transit Ridership - Core Bus\n\n\n\n\n\n\n\n\n\n                                                \nFigure 9: Daily Transit Ridership - Local Bus"
  },
  {
    "objectID": "v9x/v910/index.html",
    "href": "v9x/v910/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model Version 9.1.0. The documentation includes the following reports:\n\nWhat’s New Document\nModel Validation Report (coming soon)\n\nFor access to this version of the TDM please contact the following persons:\n\nSuzie Swim (WFRC): sswim@wfrc.org\nTim Hereth (MAG): thereth@magutah.org"
  },
  {
    "objectID": "v9x/v910/downloads.html",
    "href": "v9x/v910/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 9.1.0 documentation is shown below by category.\n\nWhat’s New Document\n\n What’s New (Pdf) \n\n\n\nModel Validation Report\n\ncoming soon"
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy - revised.html",
    "href": "v9x/v902/validation/4-assignhwy - revised.html",
    "title": "Highway Assignment",
    "section": "",
    "text": "Validation of final highway assignment was done comparing model outputs from the final loaded networks with observed data. The comparisons were done with volumes and speeds."
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy - revised.html#volumes",
    "href": "v9x/v902/validation/4-assignhwy - revised.html#volumes",
    "title": "Highway Assignment",
    "section": "Volumes",
    "text": "Volumes\nThe validation results for the Highway Assignment portion of the model are shown in this section. The observed data for 2019 volumes is taken from the Utah Department of Transportation (UDOT) Average Annual Daily Traffic (AADT) History and associated with their respective model segments. The traffic model data is taken from segment summary report for the 2019 base year model: WFv910_BY_2019_Summary_SEGID.csv. The results are divided into three sections:\n\nSummary Comparison\nDetailed Comparison\nMap Comparison\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Comparison\nThe summary comparison shows region and county-wide differences between model and observed for Average Daily Volume and Vehicle-Miles Traveled (VMT) by vehicle type. The values for Box Elder and Weber counties are only the portions within the MPO planning area. Validation was checked comparing the average daily volume at the region and county levels. Figure 1, below, contains an interactive view of model vs observed differences by roadway class and vehicle type.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bSummaryFuncClass = Inputs.select(new Map([['All Roadways','All Roadways'], ['Freeway','Freeway'], ['Principal','Principal'], ['Minor', 'Minor'], ['Collector', 'Collector']]), {value: 'All Roadways', label: \"Roadway Class:\"})\nviewof bSummaryVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\nviewof bSummaryDiffType = Inputs.select(new Map([['Percent Difference','DiffPct'], ['Difference','Diff']]), {value: 'DiffPct', label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nvolDiffLongT = transpose(volDiffLong)\nvmtDiffLongT = transpose(vmtDiffLong)\n\nvolDiffLongT_filtered = volDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vol' + bSummaryDiffType) == dataL.View);\n})\nvmtDiffLongT_filtered = vmtDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vmt' + bSummaryDiffType) == dataL.View);\n})\n\nvvp = transpose(vvpct)\nvvpL = transpose(vvpctLong)\nvvaL = transpose(vvabsLong)\nvvaLR = transpose(vvabsLongR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXDomainVol(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_volDiff * -1, max_abs_value_volDiff];\n    } else {\n        //return [max_abs_value_volDiffPct * -1, max_abs_value_volDiff]; // -100% to 100%\n        return [-100, 100]\n    }\n}\n\nfunction getXDomainVmt(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff];\n    } else {\n        //return [max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiff]; // -100% to 100%\n        return [-1,1]\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Average Daily Volume&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVolDiff = DivergingBarChart(volDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_volDiff * -1, max_abs_value_volDiff] : [-1, 1], //[max_abs_value_volDiffPct * -1, max_abs_value_volDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Vehicle-Miles Traveled&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVmtDiff = DivergingBarChart(vmtDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff] : [-1, 1], //[max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell1 = 1\n\n\n\n\n\n\nFigure 1: Highway Assignment Summary Comparison\n\n\n\nAt the region level model volume is 0.4% lower than observed volume. The four more urban counties (Weber, Davis, Salt Lake, and Davis) were all within 5% of observed volumes with Salt Lake County being the closest. Weber and Davis were slightly lower and Utah County was slightly higher. Box Elder County is more rural than the other counties. Box Elder model volumes are about 10% lower than observed. Time did not allow for further calibration of the volumes in Box Elder area to account for the larger differences.\nOne important observation at the Collector and All Vehicles level is that Utah County shows a much higher difference than the other counties. Upon further investigation of observed Collector volumes in Utah County, many roadway segments had very low volumes compared to what was expected. Utah County is one of the highest growth areas in the region. For this reason, we expect that the observed count data may be underrepresenting actual volumes. We also anticipate observed volumes in Utah County to improve in the near-term. Within the last several years, a large investment in continuous count station in Utah County has been made. The new counters will add additional information to generate observed volumes for all roadway segments.\nThe largest differences in model vs observed volumes occur in the Medium Truck and Heavy Truck vehicle types. A good amount of time was spent attempting to bring model truck volumes closer to observed. However, due to the limited data sources for truck information, further need to investigate observed truck volumes, and a desire to not over-calibrate the model, further calibration was stopped. Truck modeling remains a future priority for model improvement.\n\n\nDetailed Comparison\nThe model vs observed details in this section are presented by volume and Vehicle-Miles Traveled (VMT) through the comparison of model and observed data facility type by region and also by county. Figure 2 allows for the interactive visual comparison of model and observed values for the region and each county for all vehicles, cars, medium trucks, and heavy trucks. The comparisons are shown in four different types of charts and tables:\n\nAverage Daily Volume by Roadway Class (2a): The daily volume is averaged across all segments within their respective geography and vehicle type.\nTotal VMT by Roadway Class (2b): For each segment*, the daily volume is multiplied by segment distance and then summed across all segments within their respective geography and vehicle type.\nModel vs Count Segment Volume (2c): This is a scatter plot of segment daily volume with the x-axis as the observed volume and the y-axis as the model volume. The red line shows the location of where model and observed volumes are equal. The dashed blue line shows a least-squares linear regression. The further the blue line moved away from the red line, the further the model is from observed.\nSegment Percent Error (2d): This is a scatter plot showing the amount of error (percent difference) between the observed volume and the model volume. The observed volume is the x-axis and the percent error is the y-axis. The red lines are a bounding box that shows the control target. As volume increases, it is expected that the percent error should decrease.\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bCountySelect = Inputs.select(new Map([['Region', 'Region'], ['Box Elder County - WFRC',3], ['Weber County - WFRC',57], ['Davis County',11], ['Salt Lake County',35], ['Utah County',49]]), {value: 'All', label: \"Geography:\"})\nviewof bVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\n\nsortOrder = ['Freeway', 'Principal', 'Minor', 'Collector', 'All Roadways'];\n\nvolT = transpose(vol)\nvmtT = transpose(vmt)\nfiltered_volData = volT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtData = vmtT.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\nvolTL = transpose(volLong)\nvmtTL = transpose(vmtLong)\nfiltered_volDataL = volTL.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtDataL = vmtTL.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\n\nallvehplotT = transpose(allvehplot)\nfiltered_allvehplotData = allvehplotT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfunction formatNumber(value, isPercentage=false) {\n    if (typeof value === 'undefined') {\n        return '';  // or return a default value or message\n    }\n    \n    if (isPercentage) {\n        return (Number(value) * 100).toFixed(1) + '%';\n    }\n    return Number(value.toFixed(0)).toLocaleString();\n}\n\nwidthsVol = ['100px', '52px', '70px', '70px', '73px', '73px', '63px', '63px']; // Define the widths\nwidthsVmt = ['100px', '88px', '88px', '88px', '88px'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2a. Average Daily Volume by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"# Segs\", \"Volume\", \"Observed\", \"Difference\", \"Percent Difference\", \"RMSE\", \"Percent RMSE\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVol[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_volData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"numSegs\", \"volMod\", \"volObs\", \"volDiff\", \"volDiffPct\", \"volRmse\", \"volRmsePct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 5 || i === 7) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 4) || i==6) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVol = Legend(bChartVol.scales.color, {title: \"Data Source\"})\n\nbChartVol = GroupedBarChart(filtered_volDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"Volume (thousands)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2b. Total Daily VMT by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"Model\", \"Observed\", \"Difference\", \"Percent Difference\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVmt[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_vmtData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"vmtMod\", \"vmtObs\", \"vmtDiff\", \"vmtDiffPct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 4 || i === 6) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 3) || i==5) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVmt = Legend(bChartVmt.scales.color, {title: \"Data Source\"})\n\nbChartVmt = GroupedBarChart(filtered_vmtDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"VMT (millions)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {max} from 'd3-array';\n\n\n\n\n\n\n\n\n\nCode\nmaxVal = {\n  return Math.max(\n    d3.max(filtered_allvehplotData, d =&gt; d.volObs),\n    d3.max(filtered_allvehplotData, d =&gt; d.volMod)\n  );\n}\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2c. Model vs Observed Volumes&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Model Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.link([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x1: 0,\n      y1: 0,\n      x2: maxVal,\n      y2: (k) =&gt; maxVal * k,\n      strokeOpacity: (k) =&gt; k === 1 ? 1 : 0.2,\n      stroke: \"red\",\n      strokeWidth: (k) =&gt; k === 1 ? 2 : 1.5\n    }),\n    Plot.text([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x: maxVal,\n      y: (k) =&gt; maxVal * k,\n      text: ((f) =&gt; (k) =&gt; k === 1 ? \"Equal\" : f(k - 1))(d3.format(\"+.0%\")),\n      textAnchor: \"start\",\n      dx: 6\n    }),\n    Plot.linearRegressionY(filtered_allvehplotData, {\n        x: \"volObs\",\n        y: \"volMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2d. Segment Percent Error&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Percent Error\",\n    domain: [-2, 2],\n    tickFormat: d3.format(\".0%\")\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volErrorPct\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.ruleY([2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: 1,\n      y2: 2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: 0.5,\n      y2: 1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: 0.25,\n      y2: 0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: 0.20,\n      y2: 0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: 0.15,\n      y2: 0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: 0.10,\n      y2: 0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: -1,\n      y2: -2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: -0.5,\n      y2: -1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: -0.25,\n      y2: -0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: -0.20,\n      y2: -0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: -0.15,\n      y2: -0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: -0.10,\n      y2: -0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell2 = 1\n\n\n\n\n\n\nFigure 2: Detailed Model vs Observed Comparison of Highway Assignment\n\n\n\n\n\nMap Comparison\nThe maps in Figure 3 through Figure 6 shows a comparison of segment level model vs observed volumes by vehicle types. Blue represents model lower than observed and red represent model volume higher than observed.\n\nAll Vehicles & Cars/Light TrucksMedium & Heavy Trucks\n\n\n\n\n\n\n\n\nFigure 3: Segment-Level Model vs Observed Volume Comparison – All Vehicles\n\n\n\n\n\n\n\nFigure 4: Segment-Level Model vs Observed Volume Comparison – Cars and Light Trucks\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Segment-Level Model vs Observed Volume Comparison – Medium Trucks\n\n\n\n\n\n\n\nFigure 6: Segment-Level Model vs Observed Volume Comparison – Heavy Trucks\n\n\n\n\n\n\n\n\nLooking at the All Vehicles map, the model volumes are lower than observed for by more than 15,000 vehicles per day for the east side of I-215 and for I-15 through northern Utah County. Model volumes are higher than observed volumes by more than than 15,000 vehicles for I-15 in southern Salt lake County and for I-15 in Utah County between Springville and Spanish Fork. When looking at these areas by vehicle type, the drop in Cars and Light Trucks are actual greater since the Medium Trucks and Heavy Trucks in these areas are greater in the model vs observed. Outside of these areas, the volume differences between model and observed are relatively minor.\nThe lower arterial model vs observed volumes of Heavy Trucks on 9000 South in Salt Lake County was further investigated. The Heavy Truck observed volume for this roadway seemed much higher than expected for this roadway. The lower volumes are likely due to the observed data and not anything in the model."
  },
  {
    "objectID": "v9x/v902/validation/4-assignhwy - revised.html#speeds",
    "href": "v9x/v902/validation/4-assignhwy - revised.html#speeds",
    "title": "Highway Assignment",
    "section": "Speeds",
    "text": "Speeds\nComparisons were made between model and observed for a sample of OD pairs. Observed speeds come from sampled data at various time periods in 2019 for the WFRC area using the Google API for reported travel times between coordinates for an origin and destination. Model speeds come from the final network skims that report travel times between all TAZs in the model for each period of the day. The two data sets were joined using a coordinate to TAZ spatial join to locate Google end points to match their respective TAZ.\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof vPeriod = Inputs.select(new Map([['AM','AM'], ['Midday','MD'], ['PM','PM'], ['Evening', 'EV']]), {value: 'AM', label: \"Period:\"})\n\nspeedT = transpose(speed)\n\nspeedT_filtered = speedT.filter(function(dataSpd) {\n    return vPeriod == dataSpd.Period;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;Model vs Observed Speeds&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Speed (mph)\",\n    domain: [0, 70]\n  },\n  y: {\n    label: \"Model Speed (mph)\",\n    domain: [0, 70]\n  },\n  marks: [\n    Plot.dot(speedT_filtered, {\n      x: \"spdObs\",\n      y: \"spdMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.linearRegressionY(speedT_filtered, {\n        x: \"spdObs\",\n        y: \"spdMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "v9x/v910/whats-new/1-input-updates.html",
    "href": "v9x/v910/whats-new/1-input-updates.html",
    "title": "Input Updates",
    "section": "",
    "text": "The highway network was updated minorly to accommodate projects from WFRC’s adopted Amendment #2 and MAG’s draft Amendment #2 of the 2023-2050 RTP. Figure 1 shows the areas that were updated for Amendment #2.\n\n\n\nFigure 1: Updated Lane and Operational Lane Fields (blue)\n\n\nThe SEGID field along with other fields were updated as part of regular network maintenance (See Figure 2).\n\n\n\nFigure 2: Updated SEGID Field (blue)"
  },
  {
    "objectID": "v9x/v910/whats-new/1-input-updates.html#highway-network",
    "href": "v9x/v910/whats-new/1-input-updates.html#highway-network",
    "title": "Input Updates",
    "section": "",
    "text": "The highway network was updated minorly to accommodate projects from WFRC’s adopted Amendment #2 and MAG’s draft Amendment #2 of the 2023-2050 RTP. Figure 1 shows the areas that were updated for Amendment #2.\n\n\n\nFigure 1: Updated Lane and Operational Lane Fields (blue)\n\n\nThe SEGID field along with other fields were updated as part of regular network maintenance (See Figure 2).\n\n\n\nFigure 2: Updated SEGID Field (blue)"
  },
  {
    "objectID": "v9x/v900/whats-new/3-sedata.html",
    "href": "v9x/v900/whats-new/3-sedata.html",
    "title": "Socioeconomic Data Updates",
    "section": "",
    "text": "The WF TDM version 9’s socioeconomic county control totals were updated based on the Gardner Policy Institute (GPI) 2021 release of the state’s residential and employment county forecasts. Significant changes were made relative to the 2017 release. A comparison between version 9 and version 8 of the model’s socioeconomic control totals can be found in Figure 1 and Figure 2.\n\n\n\n\n\n\n\nCode\nfaControlTotals = FileAttachment(\"data/controltotal.csv\").csv({ typed: true });\nfaCounties      = FileAttachment(\"data/counties.csv\"    ).csv({ typed: true });\n\ncats = new Map([//['Total Population'               , 'TOTPOP'    ],\n                //['Group Quarter Population'       , 'GQ_Pop'    ],\n                ['Population'                     , 'HH_Pop'    ],\n                ['Households'                     , 'HH'        ],\n                //['Household Size'                 , 'HH_Size'   ],\n                //['Population 0-17'                , 'POP_00_17' ],\n                //['Population 18-64'               , 'POP_18_64' ],\n                //['Population 65+'                 , 'POP_65P'   ],\n                ['All Employment'                 , 'ALLEMP'    ],\n                ['Retail Employment'              , 'RETL'      ],\n                ['Food Employment'                , 'FOOD'      ],\n                ['Manufacturing Employment'       , 'MANU'      ],\n                ['Wholesale Employment'           , 'WSLE'      ],\n                ['Office Employment'              , 'OFFI'      ],\n                ['Government/Education Employment', 'GVED'      ],\n                ['Health Employment'              , 'HLTH'      ],\n                ['Other Employment'               , 'OTHR'      ],\n                //['Agriculture Employment'         , 'AGRI'      ],\n                //['Mining Employment'              , 'MING'      ],\n                //['Construction Employment'        , 'CONS'      ],\n                ['Home-Based Job Employment'      , 'HBJ'       ]\n                //['Jobs per Household'             , 'Job_HH'    ],\n                //['Working Population per Job'     , 'WrkPop_Job']\n                ])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfilteredControlTotals = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         selectCategory == ct.Category;\n});\nviewof selectCategory = Inputs.select(cats, {value: 'HH_Pop', label: 'Category: '});\n\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"Percent Difference\", \"DifferencePct\"]]), {value: \"Difference\", label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndataCTDiff50 = transpose(diffConTot2050long)\nfiltered_dataCTDiff50 = dataCTDiff50.filter(function(dataL) {\n    return selectCategory == dataL.Category  &&\n           metric == dataL.View;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXFormat() {\n  if (metric === \"DifferencePct\") {\n    return \"+%\";\n  } else if (selectCategory === 'HH_Size' && metric === \"Difference\") {\n    return \".2f\";\n  } else {\n    return \"+,d\";\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_dataCTDiff50, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.CO_NAME,\n    xFormat: getXFormat(),\n    xLabel: \"2050 Difference\",\n    aspectRatio: 0.5,\n    colors: d3.schemeRdBu[3],\n    yDomain: ['Weber','Davis','Salt Lake','Utah', 'Wasatch Front']\n})\n\n\n\n\n\n\nFigure 1: 2050 Differences in Control Totals for Selected Category (v9.0 vs v8.3.2)\n\n\n\n\n\nCode\nviewof selectCounty = Inputs.select(new Map(['Wasatch Front', 'Weber', 'Davis', 'Salt Lake', 'Utah'].map(county =&gt; [county, county])), {value: 'Wasatch Front', label: 'County: '});\n\n// FILTER DATA\nfilteredCTPlot = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME; //&&\n         //selectCategoryPlot == ct.Category;\n});\nmaxY1 = Math.max(...filteredCTPlot.map(item =&gt; item.ControlTotal));\n\n// FILTER DATA for employment control totals\nfilteredCTPlot2 = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         [\"Typical\", \"Retail\", \"Industrial\", \"Other\"].includes(ct.Category);\n});\nmaxY2 = Math.max(...filteredCTPlot2.map(item =&gt; item.ControlTotal));\n\n// FILTER DATA for control totals ratios\nfilteredCTPlot3 = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         [\"HH_Size\", \"Job_HH\", \"WrkPop_Job\"].includes(ct.Category);\n});\nmaxY3 = Math.max(...filteredCTPlot3.map(item =&gt; item.ControlTotal));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhhPopData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Pop\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhPopData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Pop\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nhhData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH\" == ct.Category && 'v8.3.2' == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH\" == ct.Category && 'v9.0.0' == ct.ModelVersion;})\n\n// data for the employment control totals\ntypicalData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Typical\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\ntypicalData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Typical\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nretailData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Retail\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nretailData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Retail\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nindustrialData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Industrial\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nindustrialData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Industrial\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\notherData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Other\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\notherData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Other\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\n\n// data for control total ratios\nhhsize8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Size\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhsize9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Size\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\njobhh8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Job_HH\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\njobhh9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Job_HH\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nwrkpop8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"WrkPop_Job\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nwrkpop9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"WrkPop_Job\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY1]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      hhPopData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      hhPopData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f', strokeWidth: 3, text: ['']}),\n    Plot.text(\n      hhPopData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n    \n    Plot.line(\n      hhData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      hhData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      hhData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n    \n    Plot.frame({strokeOpacity: 0.2}),\n    [\n      Plot.text([`\\n   ——   Current Projection \\n\\n   —  — Previous Projection`], {frameAnchor: \"top-left\", fontSize: 24})\n  ]]\n})\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY2]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      typicalData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF6666', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      typicalData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF0000', strokeWidth: 3}),\n    Plot.text(\n      typicalData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      retailData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      retailData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      retailData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      industrialData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#A0A0A0', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      industrialData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#606060', strokeWidth: 3}),\n    Plot.text(\n      industrialData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      otherData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      otherData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f',strokeWidth: 3}),\n    Plot.text(\n      otherData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.frame({strokeOpacity: 0.2})\n  ]\n})\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY3]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      hhsize8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      hhsize9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f', strokeWidth: 3}),\n    Plot.text(\n      hhsize9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      jobhh8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      jobhh9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      jobhh9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      wrkpop8, {x: 'YEAR', y: 'ControlTotal', stroke: '#FFB266',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      wrkpop9, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF8000',strokeWidth: 3}),\n    Plot.text(\n      wrkpop9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.frame({strokeOpacity: 0.2})\n  ]\n})\n\n\n\n\n\n\n\n\n\n(a) Residential Control Total\n\n\n\n\n\n\n\n(b) Employment Control Total\n\n\n\n\n\n\n\n(c) Control Total Ratios\n\n\n\nFigure 2: Control Total Trends for Selected County for Selected Category\n\n\n\nHousehold Population\nThe 2021 forecasted household population of the combined, 4-county Wasatch Front remained relatively consistent relative to the 2017 projection, with the exception of a slight decrease in forecasted population in the later part of the forecast (-0.7% in 2050). County population, however, is quite different in the 2021 forecast. By 2050:\n\nUtah County saw a significant decrease (-8.7%) in household population with approximately 120,000 fewer people.\nSalt Lake county saw a moderate increase (2.7%) and Davis County saw a significant increase (7.4%) in population of approximately 40,000 people in each county.\nWeber County showed a modest increase (2.6%) of approximately 9,000 people. The forecasted age make-up of each county shifted to older populations in the 2021 projections compared to the 2017 projections. By 2050:\nChildren aged population (age 0-17) in Salt Lake and Utah counties decreased significantly, with Salt Lake County having 40,000 fewer people and Utah County having 120,000 fewer people.\nAdult aged population (age 18-64) increased in Weber County by 11,000, Davis County by 24,000, and Salt Lake County by 47,000, while Utah County decreased by 50,000.\nSenior aged population (age 65+) increased in all counites with the most significant increase in Salt Lake County of just less than 28,000.\nOverall, the new projection forecasts approximately 113,000 fewer children, 30,000 more adults, and 56,000 more seniors.\n\nHouseholds\nThe 2021 projections show an initial decrease over the 2017 projections of 43,000 households along the Wasatch Front in 2020, which then transitions to be a net increase of 18,000 households by 2050. Weber, Davis, and Salt Lake counties follow a similar pattern in the 2021 projections where each has a net increase in households between 2035 and 2045 ending with 2,500 more households in Weber County, 15,000 more households in Davis County, and 23,000 more households in Salt Lake County. Utah County shows a further decrease in households beginning in 2030 trending to 23,000 fewer households by 2050.\nPopulation-Housing Balance\nThe initial population/housing balance, as shown by the average household size, was higher in the 2021 projections relative to the 2017 projections, but quickly trends down to where the average household size is similar to the 2050 projections for Weber, Salt Lake, and Davis counites. The trend in the average household size in Utah County is considerably lower. This may be due to the dramatic drop in child-age population in Utah County which tend to live in households with higher household sizes and the increase in senior population which tend to live in households with lower household sizes.\nEmployment\nThe 2021 projections show an initial increase over the 2017 projections of 65,000 jobs along the Wasatch Front after a rebound from Covid. The new projections then transition to a slight decrease of 16,000 jobs by 2050. The differences in employment forecasts are most notable between Utah and Salt Lake counties. By 2050, the 2021 projections show an increase of 37,000 jobs (3.1%) in Salt Lake County and a decrease of 50,000 jobs (-8.5%) in Utah County. By 2050, Weber and Davis counites have little change from the previous forecast. The biggest change in employment was in the “other” employment category.\nEmployment Ratios\nThe 2021 projections showed a slight increase in working population per job in Weber and Davis counties compared to the 2017 projections. The working population per jobs ratio in Salt Lake and Utah counties remained fairly constant.\nImpact of Control Total Changes on Travel Demand Model Forecasts\nThe impact on the travel demand model of the socioeconomic control total changes will be most notable in the future volume forecasts in Utah and Salt Lake counties. Utah County has significantly fewer people and jobs in 2050 which translates to fewer trips and less traffic volume than in the previous model. Similarly, Salt Lake County saw an increase in the forecasted people and jobs which translates to more trips and volume. The impact will be more noticeable in Utah County than in Salt Lake County as the socioeconomic difference represents a much higher percent change of the total socioeconomic data. Also, the shift in jobs between Utah and Salt Lake counties is primarily in the “other” employment category, which averages longer commute distances and may cause the commuting pattern between Utah and Salt Lake counties to be different than in the previous model.\nIn addition, because the average household size control total in Utah County is lower in the later years than the previous socioeconomic projection, it will require more housing units to house a comparable amount of people, implying that the new Utah County socioeconomic forecast could exhibit slightly more sprawl and longer trip lengths per capita than the previous model.\nThe overall shift to more seniors and less children in the new control totals will have an effect in the future forecasted trip generation. Seniors typically have lower trip rates per household than households with children, with work and school trip purposes being most impacted.\n\n\n\nMany changes were made to the control total source spreadsheet in the 1_Inputs\\2_SEData\\_ControlTotals folder, including:\n\nThe new control total spreadsheet combines several processes that previously were in separate source files or that are needed to create new files required by the models:\n\nCounty SE control totals\nCounty Age Group control totals\nCounty Work-At-Home control totals\nCounty SE by 3-digit NAICS (needed for freight model)\nSeparating Weber County data into Wasatch Front and Ogden Valley datasets\nSeparating Weber, Davis, Salt Lake, and Utah counties into REMM and non-REMM datasets\n\nThe order and number of the output variables were changed in the model input files to make them more consistent with how the socioeconomic data is processed in the current travel and land use models.\nHistorical data going back to 1990 was added. The control total source spreadsheet now contains a nice, consistent database that allows a look back 30 years as well as a look ahead 40+ years.\n\nNote, some of the historical data had to be estimated to fill in data gaps and convert employment from SIC to NAICS for data prior to 2001.\n\nFunctionality was added to visualize and check the data.\nThe Work-At-Home (WAH) control total calculations now include information to siphon off the home-based jobs (HBJ) from each of the 23 GPI employment categories to become the HBJ category in the travel model. With WF TDM version 9, the process now includes county-specific HBJ rates rather than one set of rates for the whole state. HBJ rates were also updated to represent 2019 data.\nSimilarly, the Work-At-Home (WAH) control total calculations now include telecommuting information for all travel demand models in the state. The telecommuting rates pivot off of historic data from the 5-year 2019 ACS and the telecommuting forecasting work done for the WF TDM v8.3.2. County-specific telecommuting rates were generated for the following counties:\n\nWeber\nDavis\nSalt Lake\nUtah\nCache\nWashington\nSummit\nWasatch\nBox Elder\nTooele\nIron\n\nThe remaining rural counties had insufficient data in the ACS to generate unique rates. These counties were grouped together to generate a composite rate to reduce the sampling margin of error.\n\nWeber County contains two sets of data: one for all of Weber County, the other that separates the Weber County data for the UDOT planning domain (index=9057) and the Wasatch Front planning domain (index=9157).\n\nIn addition, the ControlTotal_Age.csv model input file in the 1_Inputs\\2_SEData\\_ControlTotals folder was combined with ControlTotal_SE_WF.csv file and renamed ControlTotal_SE_AllCounties.csv. The 1_DemographicsAnalysis.s script was updated to read ControlTotal_SE_AllCounties.csv."
  },
  {
    "objectID": "v9x/v900/whats-new/3-sedata.html#control-totals",
    "href": "v9x/v900/whats-new/3-sedata.html#control-totals",
    "title": "Socioeconomic Data Updates",
    "section": "",
    "text": "The WF TDM version 9’s socioeconomic county control totals were updated based on the Gardner Policy Institute (GPI) 2021 release of the state’s residential and employment county forecasts. Significant changes were made relative to the 2017 release. A comparison between version 9 and version 8 of the model’s socioeconomic control totals can be found in Figure 1 and Figure 2.\n\n\n\n\n\n\n\nCode\nfaControlTotals = FileAttachment(\"data/controltotal.csv\").csv({ typed: true });\nfaCounties      = FileAttachment(\"data/counties.csv\"    ).csv({ typed: true });\n\ncats = new Map([//['Total Population'               , 'TOTPOP'    ],\n                //['Group Quarter Population'       , 'GQ_Pop'    ],\n                ['Population'                     , 'HH_Pop'    ],\n                ['Households'                     , 'HH'        ],\n                //['Household Size'                 , 'HH_Size'   ],\n                //['Population 0-17'                , 'POP_00_17' ],\n                //['Population 18-64'               , 'POP_18_64' ],\n                //['Population 65+'                 , 'POP_65P'   ],\n                ['All Employment'                 , 'ALLEMP'    ],\n                ['Retail Employment'              , 'RETL'      ],\n                ['Food Employment'                , 'FOOD'      ],\n                ['Manufacturing Employment'       , 'MANU'      ],\n                ['Wholesale Employment'           , 'WSLE'      ],\n                ['Office Employment'              , 'OFFI'      ],\n                ['Government/Education Employment', 'GVED'      ],\n                ['Health Employment'              , 'HLTH'      ],\n                ['Other Employment'               , 'OTHR'      ],\n                //['Agriculture Employment'         , 'AGRI'      ],\n                //['Mining Employment'              , 'MING'      ],\n                //['Construction Employment'        , 'CONS'      ],\n                ['Home-Based Job Employment'      , 'HBJ'       ]\n                //['Jobs per Household'             , 'Job_HH'    ],\n                //['Working Population per Job'     , 'WrkPop_Job']\n                ])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfilteredControlTotals = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         selectCategory == ct.Category;\n});\nviewof selectCategory = Inputs.select(cats, {value: 'HH_Pop', label: 'Category: '});\n\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"Percent Difference\", \"DifferencePct\"]]), {value: \"Difference\", label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndataCTDiff50 = transpose(diffConTot2050long)\nfiltered_dataCTDiff50 = dataCTDiff50.filter(function(dataL) {\n    return selectCategory == dataL.Category  &&\n           metric == dataL.View;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXFormat() {\n  if (metric === \"DifferencePct\") {\n    return \"+%\";\n  } else if (selectCategory === 'HH_Size' && metric === \"Difference\") {\n    return \".2f\";\n  } else {\n    return \"+,d\";\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_dataCTDiff50, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.CO_NAME,\n    xFormat: getXFormat(),\n    xLabel: \"2050 Difference\",\n    aspectRatio: 0.5,\n    colors: d3.schemeRdBu[3],\n    yDomain: ['Weber','Davis','Salt Lake','Utah', 'Wasatch Front']\n})\n\n\n\n\n\n\nFigure 1: 2050 Differences in Control Totals for Selected Category (v9.0 vs v8.3.2)\n\n\n\n\n\nCode\nviewof selectCounty = Inputs.select(new Map(['Wasatch Front', 'Weber', 'Davis', 'Salt Lake', 'Utah'].map(county =&gt; [county, county])), {value: 'Wasatch Front', label: 'County: '});\n\n// FILTER DATA\nfilteredCTPlot = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME; //&&\n         //selectCategoryPlot == ct.Category;\n});\nmaxY1 = Math.max(...filteredCTPlot.map(item =&gt; item.ControlTotal));\n\n// FILTER DATA for employment control totals\nfilteredCTPlot2 = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         [\"Typical\", \"Retail\", \"Industrial\", \"Other\"].includes(ct.Category);\n});\nmaxY2 = Math.max(...filteredCTPlot2.map(item =&gt; item.ControlTotal));\n\n// FILTER DATA for control totals ratios\nfilteredCTPlot3 = faControlTotals.filter(function(ct) {\n  return selectCounty   == ct.CO_NAME &&\n         [\"HH_Size\", \"Job_HH\", \"WrkPop_Job\"].includes(ct.Category);\n});\nmaxY3 = Math.max(...filteredCTPlot3.map(item =&gt; item.ControlTotal));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhhPopData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Pop\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhPopData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Pop\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nhhData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH\" == ct.Category && 'v8.3.2' == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH\" == ct.Category && 'v9.0.0' == ct.ModelVersion;})\n\n// data for the employment control totals\ntypicalData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Typical\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\ntypicalData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Typical\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nretailData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Retail\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nretailData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Retail\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nindustrialData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Industrial\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nindustrialData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Industrial\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\notherData8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Other\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\notherData9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Other\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\n\n// data for control total ratios\nhhsize8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Size\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nhhsize9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"HH_Size\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\njobhh8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Job_HH\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\njobhh9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"Job_HH\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\nwrkpop8 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"WrkPop_Job\" == ct.Category && \"v8.3.2\" == ct.ModelVersion  && ct.YEAR &gt; 2020;})\nwrkpop9 = faControlTotals.filter(function(ct) { return selectCounty == ct.CO_NAME && \"WrkPop_Job\" == ct.Category && \"v9.0.0\" == ct.ModelVersion;})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY1]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      hhPopData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      hhPopData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f', strokeWidth: 3, text: ['']}),\n    Plot.text(\n      hhPopData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n    \n    Plot.line(\n      hhData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      hhData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      hhData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n    \n    Plot.frame({strokeOpacity: 0.2}),\n    [\n      Plot.text([`\\n   ——   Current Projection \\n\\n   —  — Previous Projection`], {frameAnchor: \"top-left\", fontSize: 24})\n  ]]\n})\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY2]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      typicalData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF6666', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      typicalData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF0000', strokeWidth: 3}),\n    Plot.text(\n      typicalData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      retailData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      retailData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      retailData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      industrialData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#A0A0A0', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      industrialData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#606060', strokeWidth: 3}),\n    Plot.text(\n      industrialData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      otherData8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      otherData9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f',strokeWidth: 3}),\n    Plot.text(\n      otherData9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.frame({strokeOpacity: 0.2})\n  ]\n})\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Year', tickFormat: d =&gt; d},\n  y: {label: 'Control Total', domain: [0, maxY3]},\n  marginRight:140,\n  marginLeft: 140,\n  color: { type: \"categorical\", legend: true, legendStyle: { fontSize: 24 } },\n  style: {\n    fontSize: 24\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  height: 1300,\n  marks: [\n    Plot.line(\n      hhsize8, {x: 'YEAR', y: 'ControlTotal', stroke: '#5b859e', strokeWidth: 3, strokeDasharray: '5,5'}),\n    Plot.line(\n      hhsize9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e395f', strokeWidth: 3}),\n    Plot.text(\n      hhsize9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      jobhh8, {x: 'YEAR', y: 'ControlTotal', stroke: '#75884b',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      jobhh9, {x: 'YEAR', y: 'ControlTotal', stroke: '#1e5a46',strokeWidth: 3}),\n    Plot.text(\n      jobhh9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.line(\n      wrkpop8, {x: 'YEAR', y: 'ControlTotal', stroke: '#FFB266',strokeWidth: 3,strokeDasharray: '5,5'}),\n    Plot.line(\n      wrkpop9, {x: 'YEAR', y: 'ControlTotal', stroke: '#FF8000',strokeWidth: 3}),\n    Plot.text(\n      wrkpop9, Plot.selectLast({x: \"YEAR\", y: \"ControlTotal\", text: \"Category\", textAnchor: \"start\", dx: 3})),\n\n    Plot.frame({strokeOpacity: 0.2})\n  ]\n})\n\n\n\n\n\n\n\n\n\n(a) Residential Control Total\n\n\n\n\n\n\n\n(b) Employment Control Total\n\n\n\n\n\n\n\n(c) Control Total Ratios\n\n\n\nFigure 2: Control Total Trends for Selected County for Selected Category\n\n\n\nHousehold Population\nThe 2021 forecasted household population of the combined, 4-county Wasatch Front remained relatively consistent relative to the 2017 projection, with the exception of a slight decrease in forecasted population in the later part of the forecast (-0.7% in 2050). County population, however, is quite different in the 2021 forecast. By 2050:\n\nUtah County saw a significant decrease (-8.7%) in household population with approximately 120,000 fewer people.\nSalt Lake county saw a moderate increase (2.7%) and Davis County saw a significant increase (7.4%) in population of approximately 40,000 people in each county.\nWeber County showed a modest increase (2.6%) of approximately 9,000 people. The forecasted age make-up of each county shifted to older populations in the 2021 projections compared to the 2017 projections. By 2050:\nChildren aged population (age 0-17) in Salt Lake and Utah counties decreased significantly, with Salt Lake County having 40,000 fewer people and Utah County having 120,000 fewer people.\nAdult aged population (age 18-64) increased in Weber County by 11,000, Davis County by 24,000, and Salt Lake County by 47,000, while Utah County decreased by 50,000.\nSenior aged population (age 65+) increased in all counites with the most significant increase in Salt Lake County of just less than 28,000.\nOverall, the new projection forecasts approximately 113,000 fewer children, 30,000 more adults, and 56,000 more seniors.\n\nHouseholds\nThe 2021 projections show an initial decrease over the 2017 projections of 43,000 households along the Wasatch Front in 2020, which then transitions to be a net increase of 18,000 households by 2050. Weber, Davis, and Salt Lake counties follow a similar pattern in the 2021 projections where each has a net increase in households between 2035 and 2045 ending with 2,500 more households in Weber County, 15,000 more households in Davis County, and 23,000 more households in Salt Lake County. Utah County shows a further decrease in households beginning in 2030 trending to 23,000 fewer households by 2050.\nPopulation-Housing Balance\nThe initial population/housing balance, as shown by the average household size, was higher in the 2021 projections relative to the 2017 projections, but quickly trends down to where the average household size is similar to the 2050 projections for Weber, Salt Lake, and Davis counites. The trend in the average household size in Utah County is considerably lower. This may be due to the dramatic drop in child-age population in Utah County which tend to live in households with higher household sizes and the increase in senior population which tend to live in households with lower household sizes.\nEmployment\nThe 2021 projections show an initial increase over the 2017 projections of 65,000 jobs along the Wasatch Front after a rebound from Covid. The new projections then transition to a slight decrease of 16,000 jobs by 2050. The differences in employment forecasts are most notable between Utah and Salt Lake counties. By 2050, the 2021 projections show an increase of 37,000 jobs (3.1%) in Salt Lake County and a decrease of 50,000 jobs (-8.5%) in Utah County. By 2050, Weber and Davis counites have little change from the previous forecast. The biggest change in employment was in the “other” employment category.\nEmployment Ratios\nThe 2021 projections showed a slight increase in working population per job in Weber and Davis counties compared to the 2017 projections. The working population per jobs ratio in Salt Lake and Utah counties remained fairly constant.\nImpact of Control Total Changes on Travel Demand Model Forecasts\nThe impact on the travel demand model of the socioeconomic control total changes will be most notable in the future volume forecasts in Utah and Salt Lake counties. Utah County has significantly fewer people and jobs in 2050 which translates to fewer trips and less traffic volume than in the previous model. Similarly, Salt Lake County saw an increase in the forecasted people and jobs which translates to more trips and volume. The impact will be more noticeable in Utah County than in Salt Lake County as the socioeconomic difference represents a much higher percent change of the total socioeconomic data. Also, the shift in jobs between Utah and Salt Lake counties is primarily in the “other” employment category, which averages longer commute distances and may cause the commuting pattern between Utah and Salt Lake counties to be different than in the previous model.\nIn addition, because the average household size control total in Utah County is lower in the later years than the previous socioeconomic projection, it will require more housing units to house a comparable amount of people, implying that the new Utah County socioeconomic forecast could exhibit slightly more sprawl and longer trip lengths per capita than the previous model.\nThe overall shift to more seniors and less children in the new control totals will have an effect in the future forecasted trip generation. Seniors typically have lower trip rates per household than households with children, with work and school trip purposes being most impacted.\n\n\n\nMany changes were made to the control total source spreadsheet in the 1_Inputs\\2_SEData\\_ControlTotals folder, including:\n\nThe new control total spreadsheet combines several processes that previously were in separate source files or that are needed to create new files required by the models:\n\nCounty SE control totals\nCounty Age Group control totals\nCounty Work-At-Home control totals\nCounty SE by 3-digit NAICS (needed for freight model)\nSeparating Weber County data into Wasatch Front and Ogden Valley datasets\nSeparating Weber, Davis, Salt Lake, and Utah counties into REMM and non-REMM datasets\n\nThe order and number of the output variables were changed in the model input files to make them more consistent with how the socioeconomic data is processed in the current travel and land use models.\nHistorical data going back to 1990 was added. The control total source spreadsheet now contains a nice, consistent database that allows a look back 30 years as well as a look ahead 40+ years.\n\nNote, some of the historical data had to be estimated to fill in data gaps and convert employment from SIC to NAICS for data prior to 2001.\n\nFunctionality was added to visualize and check the data.\nThe Work-At-Home (WAH) control total calculations now include information to siphon off the home-based jobs (HBJ) from each of the 23 GPI employment categories to become the HBJ category in the travel model. With WF TDM version 9, the process now includes county-specific HBJ rates rather than one set of rates for the whole state. HBJ rates were also updated to represent 2019 data.\nSimilarly, the Work-At-Home (WAH) control total calculations now include telecommuting information for all travel demand models in the state. The telecommuting rates pivot off of historic data from the 5-year 2019 ACS and the telecommuting forecasting work done for the WF TDM v8.3.2. County-specific telecommuting rates were generated for the following counties:\n\nWeber\nDavis\nSalt Lake\nUtah\nCache\nWashington\nSummit\nWasatch\nBox Elder\nTooele\nIron\n\nThe remaining rural counties had insufficient data in the ACS to generate unique rates. These counties were grouped together to generate a composite rate to reduce the sampling margin of error.\n\nWeber County contains two sets of data: one for all of Weber County, the other that separates the Weber County data for the UDOT planning domain (index=9057) and the Wasatch Front planning domain (index=9157).\n\nIn addition, the ControlTotal_Age.csv model input file in the 1_Inputs\\2_SEData\\_ControlTotals folder was combined with ControlTotal_SE_WF.csv file and renamed ControlTotal_SE_AllCounties.csv. The 1_DemographicsAnalysis.s script was updated to read ControlTotal_SE_AllCounties.csv."
  },
  {
    "objectID": "v9x/v900/whats-new/3-sedata.html#taz-level-forecasts",
    "href": "v9x/v900/whats-new/3-sedata.html#taz-level-forecasts",
    "title": "Socioeconomic Data Updates",
    "section": "TAZ-Level Forecasts",
    "text": "TAZ-Level Forecasts\nA new TAZ-level distribution of the updated county socioeconomic control totals was performed for WF TDM version 9. Updates to Weber, Davis, Salt Lake, and Utah counties TAZ-level socioeconomic forecasts were generated by REMM and included the following:\n\nBase and future year land use capacities based on updated city/county general plans, zoning, and centers (vision) location details.\nBase year residential dwelling units by type (single family, multi-family), household allocation, and population synthesis\nBase year commercial building square foot and employment allocation by employment category\n\nA detailed review of the TAZ-level socioeconomic forecasts was performed by an independent consultant. In addition, knowledgeable parties provided feedback for major development areas, including Falcon Hill, Day Break, Olympia Hills, and Point of the Mountain. A high-level review was also performed by local governments. Updates to socioeconomic data in Box Elder were provided by UDOT which included similar base year data updates and local review. The updated TAZ socioeconomic forecasts can be visualized with the Household and Job Forecasts Web App. Changes in the forecasts between versions 8 and 9 can be seen by clicking on View Advanced Version in the header and then selecting New vs. Old. You can explore the data in the embedded web application in Figure 3.\n\n\nCode\nhtml`&lt;div style=\"width: 765px; height: 680px; transform: scale(0.85); transform-origin: 0 0;\"&gt;\n         &lt;iframe width=\"900\" height=\"800\" src=\"https://wfrc.org/household-job-forecast-map/\" title=\"Household and Job Forecast\"&gt;&lt;/iframe&gt;\n     &lt;/div&gt;`\n\n\n\n\n\n\nFigure 3: Household and Job Forecast WebApp"
  },
  {
    "objectID": "v9x/v900/whats-new/3-sedata.html#base-year-taz-age-percent-lookup-file",
    "href": "v9x/v900/whats-new/3-sedata.html#base-year-taz-age-percent-lookup-file",
    "title": "Socioeconomic Data Updates",
    "section": "Base-Year TAZ Age Percent Lookup File",
    "text": "Base-Year TAZ Age Percent Lookup File\nThe TAZ-level age percent parameters were updated using 2020 Census block and 2020 ACS block group data. This update was done statewide by UDOT and provided for use in each travel model area in Utah. The Wasatch Front updated parameters are found in the 1_Inputs\\0_GlobalData\\1_HHDisag_AutoOwn \\Lookup - BYTAZAgePct - AllCo.csv lookup file."
  },
  {
    "objectID": "v9x/v910/whats-new/pvu-map.html",
    "href": "v9x/v910/whats-new/pvu-map.html",
    "title": "WFTDM Documentation",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport matplotlib.cm as cm\nimport numpy as np\nimport contextily as ctx\n\n\n\n\nCode\ntaz = gpd.read_file(r\"D:\\GitHub\\TDM-Documentation\\v9x\\v910\\whats-new\\data\\taz\\WFv900_TAZ.shp\")[['TAZID','CO_NAME','geometry']]\nbd = pd.read_csv(r\"D:\\GitHub\\TDM-Documentation\\v9x\\v910\\whats-new\\data\\BaseDistribution.csv\")[[';Z','Airport','PVU']].rename(columns={';Z':'TAZID'})\n\ntazbd = gpd.GeoDataFrame(pd.merge(bd,taz,on='TAZID',how='left'))\n\n\n\n\nCode\ndef plot_pvu(gdf,county):\n\n    # Fix CRS for basemap\n    if gdf.crs is None:\n        gdf.set_crs(epsg=26912, inplace=True)\n    if gdf.crs.to_string() != 'EPSG:3857':\n        gdf = gdf.to_crs(epsg=3857)\n        \n    # set color bins for legend\n    bins = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 40, 60, 80, 100]\n    cmap = plt.cm.get_cmap('YlOrRd', len(bins) - 2)\n    colors_list = ['#00000000'] + [cmap(i) for i in range(cmap.N)] \n    cmap_with_gray = colors.ListedColormap(colors_list)\n    norm = colors.BoundaryNorm(bins, cmap_with_gray.N)\n    \n    # Plot the data\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    \n    # Plot the TAZ polygons and color them by PVU using the new colormap\n    gdf.plot(column='PVU', cmap=cmap_with_gray, norm=norm, linewidth=0.05, ax=ax, edgecolor='black', legend=False)\n    centroid = gdf[gdf['TAZID'] == 2946].geometry.centroid\n    ax.scatter(centroid.x, centroid.y, color='blue', marker='*', s=100, edgecolor='blue', zorder=3)  # s controls dot size\n    \n    # Create the color bar with discrete intervals\n    sm = plt.cm.ScalarMappable(cmap=cmap_with_gray, norm=norm)\n    sm.set_array([])\n    cbar = plt.colorbar(sm, ax=ax, boundaries=bins, ticks=bins, shrink=0.5, aspect=12)\n    cbar.set_label('Number of Trips')\n\n    # Add basemap using contextily with OpenStreetMap\n    ctx.add_basemap(ax, source=ctx.providers.CartoDB.PositronNoLabels, alpha=.6)\n    \n    # PVU Legend\n    blue_patch = plt.Line2D([0], [0], marker='*', color='w', label='PVU', markerfacecolor='blue', markersize=15)\n    ax.legend(handles=[blue_patch], loc='upper right', bbox_to_anchor=(1.22, 0.235)) \n    \n    # Set axis limits to zoom (remove 30% from top and right)\n    xlim = ax.get_xlim()\n    ylim = ax.get_ylim()\n    \n    # Reduce by 30% on the right (x-axis) and 30% on the top (y-axis)\n    new_xlim = (xlim[0] + 0.18 * (xlim[1] - xlim[0]), xlim[0] + 0.6 * (xlim[1] - xlim[0]))\n    new_ylim = (ylim[0] + 0.15 * (ylim[1] - ylim[0]), ylim[0] + 0.58 * (ylim[1] - ylim[0]))\n    \n    # Set new axis limits\n    ax.set_xlim(new_xlim)\n    ax.set_ylim(new_ylim)\n\n    # Set plot title and labels and plot\n    ax.set_axis_off()\n    \n    plt.rcParams[\"figure.figsize\"]=6,12\n    plt.tight_layout()\n    plt.savefig(f'D:\\\\GitHub\\\\TDM-Documentation\\\\v9x\\\\v910\\\\whats-new\\\\_pictures\\\\pvu.png', bbox_inches='tight', dp=12000)\n    plt.close(fig)\n\n    plt.show\n\n\n\n\nCode\nplot_pvu(tazbd,'ALL')\n#plot_pvu(tazbd,'UTAH')\n#plot_pvu(tazbd,'SALT LAKE')\n\n\nC:\\Users\\cday\\AppData\\Local\\Temp\\ipykernel_24736\\3204087333.py:54: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument \"dp\" which is no longer supported as of 3.3 and will become an error two minor releases later\n  plt.savefig(f'D:\\\\GitHub\\\\TDM-Documentation\\\\v9x\\\\v910\\\\whats-new\\\\_pictures\\\\pvu.png', bbox_inches='tight', dp=12000)"
  },
  {
    "objectID": "v9x/v910/whats-new/1-input-updates.html#transit-networks",
    "href": "v9x/v910/whats-new/1-input-updates.html#transit-networks",
    "title": "Input Updates",
    "section": "Transit Networks",
    "text": "Transit Networks\nThe transit networks were updated to reflect changes in the highway network.\nOGX and MVX routes were updated to better align with current conditions and assumptions."
  },
  {
    "objectID": "v9x/v910/whats-new/1-input-updates.html#segment-shapefile",
    "href": "v9x/v910/whats-new/1-input-updates.html#segment-shapefile",
    "title": "Input Updates",
    "section": "Segment Shapefile",
    "text": "Segment Shapefile\nA DIRECTION field was added onto the segment shapefile where each segment was assigned NB/SB for a segment in the northbound or southbound direction, and EB/WB for a segment in the eastbound or westbound direction to support the segment-based link direction calculation (See Segment Direction). The Jupyter Notebooks within the 1_Inputs/6_Segment/_Segment Processing Tools folder were updated to account for the new DIRECTION field.\nA new folder called Corridors was added to the 1_Inputs/6_Segment directory. This folder includes various shapefiles and geojsons files describing corridors (highway, transit, freight, etc.) to support data aggregation and visualize in the vizTool."
  },
  {
    "objectID": "v9x/v910/whats-new/1-input-updates.html#taz-shapefile",
    "href": "v9x/v910/whats-new/1-input-updates.html#taz-shapefile",
    "title": "Input Updates",
    "section": "TAZ Shapefile",
    "text": "TAZ Shapefile\nThe TAZ.shp was updated by renumbering the small districts as well as including two new fields: PLANAREA and CITYGRP. PLANAREA describes which modeling region the TAZ falls in and CITYGRP represents city groups (a new geographic definition to describe groupings of cities).\nThe renumbering of the small districts was also reflected in the Small_Districts.shp. The small district geographies were also updated."
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html",
    "href": "v9x/v910/whats-new/2-python-updates.html",
    "title": "Python Updates",
    "section": "",
    "text": "A complete Python environment is included within the model to better support the execution of Python scripts used by the model. The environment is self-contained, meaning it contains all necessary Python packages and dependencies, eliminating the need for external installations or configuration. The environment is named py-tdm-env and is located in the 2_ModelScripts/_Python directory.\nA list of the main Python libraries included in the environment is given below. This is not an exhaustive list.\n\ndbfread\nfilelock\nfolium\ngeopandas\nipykernel\nipywidgets\njson\njupyter_server\nmatplotlib\nnumpy\nopenpyxl\npandas\nshapely\nyaml\n\nA full list of the Python libraries includes can be found in 2_ModelScripts/_Python/py-tdm-env/Lib/site-packages.\nThe Python environment also includes packages for a Jupyter Kernel to help run Jupyter Notebooks within the model. For more direction on setting up the py-tdm-env to be used in Jupyter Notebooks, follow the instructions here."
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html#python-environment",
    "href": "v9x/v910/whats-new/2-python-updates.html#python-environment",
    "title": "Python Updates",
    "section": "",
    "text": "A complete Python environment is included within the model to better support the execution of Python scripts used by the model. The environment is self-contained, meaning it contains all necessary Python packages and dependencies, eliminating the need for external installations or configuration. The environment is named py-tdm-env and is located in the 2_ModelScripts/_Python directory.\nA list of the main Python libraries included in the environment is given below. This is not an exhaustive list.\n\ndbfread\nfilelock\nfolium\ngeopandas\nipykernel\nipywidgets\njson\njupyter_server\nmatplotlib\nnumpy\nopenpyxl\npandas\nshapely\nyaml\n\nA full list of the Python libraries includes can be found in 2_ModelScripts/_Python/py-tdm-env/Lib/site-packages.\nThe Python environment also includes packages for a Jupyter Kernel to help run Jupyter Notebooks within the model. For more direction on setting up the py-tdm-env to be used in Jupyter Notebooks, follow the instructions here."
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html#ip_updatenetwork_walkbuffers.py",
    "href": "v9x/v910/whats-new/2-python-updates.html#ip_updatenetwork_walkbuffers.py",
    "title": "Python Updates",
    "section": "“ip_UpdateNetwork_WalkBuffers.py”",
    "text": "“ip_UpdateNetwork_WalkBuffers.py”\nIn previous model versions, Python was called in the 0_Update_TAZID_Distance.s, 1_NetProcessor.s, and 6_UpdateWalkBuffer.s scripts to perform geoprocessing tasks using the arcpy library. In version 9.1.0, the geoprocessing tasks were combined into one script ip_UpdateNetwork_WalkBuffers.py and the arcpy library was replaced with the geopandas library.\nThe ip_UpdateNetwork_WalkBuffers.py script creates files used to update the following fields on the highway network:\n\nDISTANCE\nDIRECTION (further details on the updates to the DIRECTION field can be found in Segment Direction)\nTAZID (links & nodes)\nHOT_ZONEID (links & nodes)"
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html#ip_foldersetup.py",
    "href": "v9x/v910/whats-new/2-python-updates.html#ip_foldersetup.py",
    "title": "Python Updates",
    "section": "“ip_FolderSetup.py”",
    "text": "“ip_FolderSetup.py”\nScenario folders are now created with Python in the ip_FolderSetup.py script instead of with a DOS batch file in the 0_FolderSetup.s script."
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html#py-viztool-folder",
    "href": "v9x/v910/whats-new/2-python-updates.html#py-viztool-folder",
    "title": "Python Updates",
    "section": "“py-vizTool” Folder",
    "text": "“py-vizTool” Folder\nA new folder called py-vizTool was added to the 2_ModelScripts/_Python directory. This folder houses the following four scripts that support the vizTool.\n\nvt_CompileJson.py: This script converts model outputs (.csv extension) to vizTool inputs (.json extension). It is called at the end of various scripts throughout the model. Section 3 outlines which scripts.\n_json_scripts.py: This script contains the functions for the vt_CompileJson.py script.\nvt_CreateGeoJsons.py: This script converts model input shapefiles to geojson format. It also contains logic that creates a project corridors geojson and transit stops geojson.\nvt_CreateScnJson.py: This script converts scenario attributes to a json file used to configure the vizTool data.\n\nIn addition, the py-vizTool folder contains a configs folder that contains multiple configuration json files that describe how to configure the vizTool inputs."
  },
  {
    "objectID": "v9x/v910/whats-new/2-python-updates.html#other-python-updates",
    "href": "v9x/v910/whats-new/2-python-updates.html#other-python-updates",
    "title": "Python Updates",
    "section": "Other Python Updates",
    "text": "Other Python Updates\nA new folder labeled _source - py script development exist within the 2_ModelScripts/_Python directory for the purpose of double checking the development of Python scripts within a Jupyter Notebook environment."
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html",
    "href": "v9x/v910/whats-new/3-viztool.html",
    "title": "Model Updates to Support vizTool",
    "section": "",
    "text": "The vizTool is a tool designed to visualize travel demand model The vizTool source code is located in the 2_ModelScripts/_CopyToFolders/vizTool folder. At the beginning of a model run, the vizTool folder is copied to the Scenarios/.vizTool directory (if it does not already exist in that location) via the 2_vizToolSetup.s script. As the model runs, outputs are converted to vizTool inputs and placed in the Scenarios/.vizTool directory. This ensures that the .vizTool folder remains a standalone application allowing users to open it via localhost or host it on their own server.\nA parameter called Run_vizTool was added to the 0GeneralParameters.block file that when set to 0 will avoid running all Python scripts used to prepare data for the vizTool as well as prevent the tool from opening at the end of the model run. By default, this parameter is set to 1 to support the vizTool implementation.\nFurther information on the vizTool can be found at the following links:\n\nvizTool User Guide\nvizTool Data Dictionary\nvizTool Development Details\nvizTool Code Documentation\nvizTool source code GitHub repository"
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#viztool-source-code-and-setup",
    "href": "v9x/v910/whats-new/3-viztool.html#viztool-source-code-and-setup",
    "title": "Model Updates to Support vizTool",
    "section": "",
    "text": "The vizTool is a tool designed to visualize travel demand model The vizTool source code is located in the 2_ModelScripts/_CopyToFolders/vizTool folder. At the beginning of a model run, the vizTool folder is copied to the Scenarios/.vizTool directory (if it does not already exist in that location) via the 2_vizToolSetup.s script. As the model runs, outputs are converted to vizTool inputs and placed in the Scenarios/.vizTool directory. This ensures that the .vizTool folder remains a standalone application allowing users to open it via localhost or host it on their own server.\nA parameter called Run_vizTool was added to the 0GeneralParameters.block file that when set to 0 will avoid running all Python scripts used to prepare data for the vizTool as well as prevent the tool from opening at the end of the model run. By default, this parameter is set to 1 to support the vizTool implementation.\nFurther information on the vizTool can be found at the following links:\n\nvizTool User Guide\nvizTool Data Dictionary\nvizTool Development Details\nvizTool Code Documentation\nvizTool source code GitHub repository"
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#expanded-socioeconomic-file",
    "href": "v9x/v910/whats-new/3-viztool.html#expanded-socioeconomic-file",
    "title": "Model Updates to Support vizTool",
    "section": "Expanded Socioeconomic File",
    "text": "Expanded Socioeconomic File\nAn expanded socioeconomic file, expanded_SE_File_{RID}.csv, that includes total workers and number of household vehicles was added as a new model output. The 2_HHDisaggregation.s and 3_AutoOwnerhsip.s scripts in the 2_ModelScripts/1_HHDisag_AutoOwn folder were adjusted accordingly."
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#mode-choice-reports-and-script-updates",
    "href": "v9x/v910/whats-new/3-viztool.html#mode-choice-reports-and-script-updates",
    "title": "Model Updates to Support vizTool",
    "section": "Mode Choice Reports and Script Updates",
    "text": "Mode Choice Reports and Script Updates\nThe following scripts within 2_ModelScripts/4_ModeChoice were either updated or created to support the vizTool:\n12_EstimateHBSchModeShare.s and 13_vizTool_TripsByMode.s\n\nScript 11-13_MC_HBW_HBO_NHB_HBC.s was renamed to 11_MC_HBW_HBO_NHB_HBC.s.\n12_EstimateHBSchModeShare.s was added to calculate two new detailed trip matrices that better summarize school trip data.\nThe 13_vizTool_TripsByMode.s script was added to summarize trip data by mode at the TAZ level. Data varies by period, purpose, and direction (production/attraction).\n\n17_BoardingsReport.s\n\nThis script was restructured and updated to calculate rider statistics in addition to boardings and alightings. Summaries are reported at the node, link, and segment levels by mode, hierarchical mode, and period. This new report takes the place of the previous mode choice boarding summary reports. The route and mode level summary for boardings and alightings is still output.\n\n18_SumToDistricts_FinalTripTables.s\n\nThis script was updated to create a new output summarized at the small district level. In addition, an error was fixed to include BRT records in all summaries."
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#highway-assignment-reports-and-script-updates",
    "href": "v9x/v910/whats-new/3-viztool.html#highway-assignment-reports-and-script-updates",
    "title": "Model Updates to Support vizTool",
    "section": "Highway Assignment Reports and Script Updates",
    "text": "Highway Assignment Reports and Script Updates\nThe following scripts within 2_ModelScripts/5_AssignHwy were either updated or created to support the vizTool:\n01_Convert_PA_to_OD and 02_Assign_AM_MD_PM_EV\n\nThe logic in these scripts (along with their supporting block files) were updated to output person trips instead of vehicle trips. The output matrices include more detail on school trips. The output matrices also specify direction in whether they go from the production zone to the attraction zone or vice versa to support TAZ-based metric calculations.\n\n06_SegmentSummary.s\n\nThe logic in this script was rewritten to better calculate highway statistics such as Vehicle Miles Traveled (VMT), Vehicle Hours Traveled (VHT), Vehicle Hours Delay (VHD), and Volume-Capacity (VC) Ratio at a wider breadth with data at the total, passenger car, medium truck, and heavy truck classifications. Minor logic errors were also corrected.\n\n09_TazBasedMetrics.s\n\nThis is a new script that summarizes final network skims and origin destination tables to calculate metrics at the TAZ level. Such metrics include Person Miles Traveled (PMT), Person Hours Traveled (PHT), Person Hours Delay (PHD), Vehicle Miles Traveled (VMT), Vehicle Hours Traveled (VHT), and Vehicle Hours Delay (VHD). These metrics are calculated with the congested network as well as the free flow.\nNote that the VMT, VHT, and VHD output from this script represent the metrics of those trips that are produced/attracted for a specific TAZ whereas the VMT, VHT, and VHD output from the 06_SegmentSummary.s script represent the metrics of those trips that travel along the segments within a specific TAZ."
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#log-files",
    "href": "v9x/v910/whats-new/3-viztool.html#log-files",
    "title": "Model Updates to Support vizTool",
    "section": "Log Files",
    "text": "Log Files\nVersion 9.1.0 adds the following log reports to the _Log folder to support the vizTool:\n\npy_LogFile: Files with this prefix store the logging statements associated with Python scripts that are run as part of the model.\npy_Variables: Files with this prefix store parameter type variables in a text file to be read in for Python scripts.\npy_Debug: Files with this prefix exist to show model appliers potential areas to debug within the model."
  },
  {
    "objectID": "v9x/v910/whats-new/3-viztool.html#opening-the-viztool",
    "href": "v9x/v910/whats-new/3-viztool.html#opening-the-viztool",
    "title": "Model Updates to Support vizTool",
    "section": "Opening the vizTool",
    "text": "Opening the vizTool\nAfter each model run, the vizTool application opens by default via localhost on the computer’s default internet browser. In addition, the _OpenVizTool.bat batch script is created and placed in the specific scenario directory. The batch script provides an easy way to re-open the vizTool.\nUsers may also navigate to the _start-server-static.py script in the Scenarios/.vizTool directory and run that script to open the vizTool. (Note that users must have Python set up on their machine.)"
  },
  {
    "objectID": "v9x/v910/whats-new/4-other-updates.html#netprocessor-script",
    "href": "v9x/v910/whats-new/4-other-updates.html#netprocessor-script",
    "title": "Other Model Updates",
    "section": "“1_NetProcessor” Script",
    "text": "“1_NetProcessor” Script\nThe 1_NetProcessor.s script was adjusted to accommodate new Python scripts, segment direction updates, reliability lane updates, and other bug fixes.\n\nSegment Direction\nThe link direction logic was updated to align with segment direction. All links that fall within a segment adopt the cardinal direction of the overarching segment. For example, in Figure 3 the segment (orange) has a northbound/southbound direction. All model links (blue) associated with this segment will also have a northbound/southbound despite several links within the segment being oriented more east/west.\n\n\n\nFigure 3: Segment and Link Direction Alignment\n\n\nThe segment direction code was added to the ip_UpdateNetwork_WalkBuffers.py script where it creates a temp scenario network with the DIRECTION field calculated. The temp scenario network is then read in for reference downstream.\n\n\nReliability Lanes\nReliability lane capacity calculations were moved to the 1_NetProcessor.s script. The link level outputs were updated to include the RelCap1Hr field as well as fields for period specific capacities. A new parameter Rel_LN_Toggle was added to the 0GeneralParameters.block file that acts as a switch to allow the user to determine if using reversible lanes adds lanes for the peak direction or repurposes off-peak direction lanes. Downstream scripts were updated to reflect these changes.\n\n\nBug Fixes\nThe 1_NetProcessor script was updated to fix minor errors in the following calculations:\n\nCharge point code was updated to ensure that links were tagged with the correct charge point ID.\nFixed a minor bug in the general purpose ramp ID classification.\nFT 39 was removed from the HOT speed calculation."
  },
  {
    "objectID": "v9x/v910/whats-new/4-other-updates.html#other-minor-updates",
    "href": "v9x/v910/whats-new/4-other-updates.html#other-minor-updates",
    "title": "Other Model Updates",
    "section": "Other Minor Updates",
    "text": "Other Minor Updates\nVarious inputs and outputs were renamed to comply with the new model file naming convention determined by the Interagency Modeling Technical Committee (IMTC)."
  },
  {
    "objectID": "v9x/v910/whats-new/4-other-updates.html",
    "href": "v9x/v910/whats-new/4-other-updates.html",
    "title": "Other Model Updates",
    "section": "",
    "text": "Version 9.1.0 inserts travel to/from the Provo Airport (PVU) by updating the 2_ModelScripts/0_InputProcessing/d_TripTable/1_TripTable.s and 2_ModelScripts/2_TripGen/1_TripGen.s scripts. The 0GeneralParameters.block file was also updated to include the PVU zone number parameter.\nThe TripTableControlTotal.csv file, located in the 1_Inputs/0_GlobalData/0_TripTables folder, was expanded to include trip totals by year for the Provo Airport. Figure 1 shows the calculated control total for the number of trips attracted to the Provo Airport compared to those attracted to the Salt Lake City Airport (SLC). The number of trips attracted to the Provo Airport were estimated using a ratio calculated from the SLC control totals as well as data from the Federal Aviation Administration (FAA).\n\n\n\nFigure 1: Number of Trips by Airport and Year\n\n\nThe BaseDistribution.csv file, located in the 1_Inputs/0_GlobalData/0_TripTables folder, was also expanded to include trip totals produced by zone for the Provo Airport. Figure 2 shows the base distribution of trips going to/from the Provo airport. This distribution was calculated using trip data from StreetLight.\n\n\n\nFigure 2: Base Trip Distribution by Zone for PVU"
  },
  {
    "objectID": "v9x/v910/whats-new/4-other-updates.html#provo-airport",
    "href": "v9x/v910/whats-new/4-other-updates.html#provo-airport",
    "title": "Other Model Updates",
    "section": "",
    "text": "Version 9.1.0 inserts travel to/from the Provo Airport (PVU) by updating the 2_ModelScripts/0_InputProcessing/d_TripTable/1_TripTable.s and 2_ModelScripts/2_TripGen/1_TripGen.s scripts. The 0GeneralParameters.block file was also updated to include the PVU zone number parameter.\nThe TripTableControlTotal.csv file, located in the 1_Inputs/0_GlobalData/0_TripTables folder, was expanded to include trip totals by year for the Provo Airport. Figure 1 shows the calculated control total for the number of trips attracted to the Provo Airport compared to those attracted to the Salt Lake City Airport (SLC). The number of trips attracted to the Provo Airport were estimated using a ratio calculated from the SLC control totals as well as data from the Federal Aviation Administration (FAA).\n\n\n\nFigure 1: Number of Trips by Airport and Year\n\n\nThe BaseDistribution.csv file, located in the 1_Inputs/0_GlobalData/0_TripTables folder, was also expanded to include trip totals produced by zone for the Provo Airport. Figure 2 shows the base distribution of trips going to/from the Provo airport. This distribution was calculated using trip data from StreetLight.\n\n\n\nFigure 2: Base Trip Distribution by Zone for PVU"
  },
  {
    "objectID": "v9x/v910/whats-new/5-modelresults.html",
    "href": "v9x/v910/whats-new/5-modelresults.html",
    "title": "Compare Model Results",
    "section": "",
    "text": "This section compares the model results between version 9.1.0 and version 9.0.2."
  },
  {
    "objectID": "v9x/v910/whats-new/5-modelresults.html#road-volume-comparisons",
    "href": "v9x/v910/whats-new/5-modelresults.html#road-volume-comparisons",
    "title": "Compare Model Results",
    "section": "Road Volume Comparisons",
    "text": "Road Volume Comparisons\nThe comparison between daily volumes at the segment level can be found in Figure 1 for 2019 and 2050. Decreases in volume in version 9.1.0 compared to version 9.0.2 are shown in blue, while increases are shown in red. Figure 2 shows a similar comparison, displaying medium plus heavy truck volumes.\nFor 2019, there are a few volume differences for all vehicles and trucks due to segment fixes. Other differences are negligible.\nFor 2050, there are a few volume differences for all vehicles and trucks due to segment fixes and project updates. Other differences are negligible.\n\nVolume Change - All VehiclesVolume Change - Truck\n\n\n\n\n\n\n\n\n\n(a) 2019\n\n\n\n\n\n\n\n(b) 2050 Fiscally Constrained\n\n\n\n\n\n\n\nFigure 1: Daily Volume Comparison – All Vehicles\n\n\n\n\n\n\n\n\n\n\n\n(a) 2019\n\n\n\n\n\n\n\n(b) 2050 Fiscally Constrained\n\n\n\n\n\n\n\nFigure 2: Daily Volume Comparison – Medium+Heavy Truck"
  },
  {
    "objectID": "v9x/v910/whats-new/5-modelresults.html#transit-comparisons",
    "href": "v9x/v910/whats-new/5-modelresults.html#transit-comparisons",
    "title": "Compare Model Results",
    "section": "Transit Comparisons",
    "text": "Transit Comparisons\nVersion 9.1.0 showed a slight increase in transit trips compared to version 9.0.2 in 2032, 2042, and 2050 (see Figure 3 through Figure 9). The total transit trips in 2050 for version 9.1.0 is 342,000 daily trips compared to the version 9.0.2 model that showed 337,000 daily trips, which equates to 1.5% more trips.\nCommuter Rail saw the greatest increase in trips, likely due to project updates. Express Bus saw a slight decrease in future trips, most likely due to the increase in trips to Commuter Rail since they compete for trips in similar markets. BRT, Core Route, and Local Bus trips remained relatively unchanged.\n\nAll ModesCommuter RailLight RailBus Rapid TransitExpress BusCore BusLocal Bus\n\n\n\n\n\n\n                                                \nFigure 3: Daily Transit Ridership - All Modes\n\n\n\n\n\n\n\n\n\n                                                \nFigure 4: Daily Transit Ridership - Commuter-Rail Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 5: Daily Transit Ridership - Light-Rail Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 6: Daily Transit Ridership - Bus Rapid Transit\n\n\n\n\n\n\n\n\n\n                                                \nFigure 7: Daily Transit Ridership - Express Bus\n\n\n\n\n\n\n\n\n\n                                                \nFigure 8: Daily Transit Ridership - Core Bus\n\n\n\n\n\n\n\n\n\n                                                \nFigure 9: Daily Transit Ridership - Local Bus"
  },
  {
    "objectID": "v8x/v810/downloads.html",
    "href": "v8x/v810/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 8.1.0 documentation is shown below by category.\n\nCalibration & Validation Report\n\n v8.1 Calib Valid"
  },
  {
    "objectID": "v8x/v810/index.html",
    "href": "v8x/v810/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model for Version 8.1.0. The documentation includes:\n\nCalibration & Validation Report"
  },
  {
    "objectID": "v8x/v830/downloads.html",
    "href": "v8x/v830/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 8.3.0 documentation is shown below by category.\n\nInputs Document\n\n v8.3 2019-06-18 Inputs"
  },
  {
    "objectID": "v8x/v830/index.html",
    "href": "v8x/v830/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model for Version 8.3.0. The documentation includes:\n\nInputs Document"
  },
  {
    "objectID": "v8x/v831/downloads.html",
    "href": "v8x/v831/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 8.3.1 documentation is shown below by category.\n\nWhat’s New Document\n\n v8.3.1 2020-08-17 Whats New \n v8.3.1 2020-05-08 Whats New \n\n\n\nModel Validation Report\n\n v8.3.1 2020-10-23 Calib Valid \n\n\n\nInputs Document\n\n v8.3.1 2020-05-08 Inputs"
  },
  {
    "objectID": "v8x/v831/index.html",
    "href": "v8x/v831/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model for Version 8.3.1. The documentation includes the following reports:\n\nWhat’s New Document\nModel Validation Report\nInputs Document"
  },
  {
    "objectID": "v8x/v831/whats-new/1-20200817-update.html",
    "href": "v8x/v831/whats-new/1-20200817-update.html",
    "title": "Updated Networks – Aug 17, 2020",
    "section": "",
    "text": "Updated Networks – Aug 17, 2020\nThe ‘WF TDM v8.3.1 - 2020-05-08’ model version included most but not all of the highway and transit network changes that were part of MAG’s RTP amendment. Because the networks reflect the “official” MAG amended plan, the travel model was reissued with a new date stamp. However, since there were no changes to the model itself or the other modeling inputs, the version number of the travel model remained the same.\nFigure 1 shows where lanes were added (green) or were taken away (orange) between ‘WF TDM v8.3.1 - 2020-05-08’ and ‘WF TDM v8.3.1 - 2020-08-17’ highway networks. Express bus routes were also removed from the MAG line files in the 2030, 2040 & 2050 Funded & Needed Transit folders .\n\n\n\nFigure 1: Added lanes between v8.3.1 2020-05-08 and v8.3.1 2020-08-17"
  },
  {
    "objectID": "v8x/v831/whats-new/1-inputdata.html",
    "href": "v8x/v831/whats-new/1-inputdata.html",
    "title": "Input Data",
    "section": "",
    "text": "A very minor change was made to the socioeconomic data in Utah County. A few households had been located in the Utah Lake TAZ. These were removed and relocated into nearby TAZ. This change would have very little affect to model results.\n\n\n\nThe highway network was updated in the MAG and WFRC areas to reflect the first round of Regional Transportation Plan (RTP) amendments. Additional edits were made in the MAG area to conform with more recent project clarification. The changes to the input highway network are significant, particularly in Utah County, and would most likely affect the travel model’s output. Projects in and around areas of high change may want to do sensitivity tests to better understand the impact that these input network changes may have had on project-level decisions. Figure 1 shows where lanes were added (green) or were taken away (orange) between versions 8.3 and 8.3.1 highway networks.\n\n\n\nFigure 1: Added lanes between version 8.3 and 8.3.1."
  },
  {
    "objectID": "v8x/v831/whats-new/1-inputdata.html#socioeconomic-data",
    "href": "v8x/v831/whats-new/1-inputdata.html#socioeconomic-data",
    "title": "Input Data",
    "section": "",
    "text": "A very minor change was made to the socioeconomic data in Utah County. A few households had been located in the Utah Lake TAZ. These were removed and relocated into nearby TAZ. This change would have very little affect to model results."
  },
  {
    "objectID": "v8x/v831/whats-new/1-inputdata.html#plan-amendment",
    "href": "v8x/v831/whats-new/1-inputdata.html#plan-amendment",
    "title": "Input Data",
    "section": "",
    "text": "The highway network was updated in the MAG and WFRC areas to reflect the first round of Regional Transportation Plan (RTP) amendments. Additional edits were made in the MAG area to conform with more recent project clarification. The changes to the input highway network are significant, particularly in Utah County, and would most likely affect the travel model’s output. Projects in and around areas of high change may want to do sensitivity tests to better understand the impact that these input network changes may have had on project-level decisions. Figure 1 shows where lanes were added (green) or were taken away (orange) between versions 8.3 and 8.3.1 highway networks.\n\n\n\nFigure 1: Added lanes between version 8.3 and 8.3.1."
  },
  {
    "objectID": "v8x/v831/whats-new/2-cube-update.html",
    "href": "v8x/v831/whats-new/2-cube-update.html",
    "title": "Update For CUBE 6.4.5",
    "section": "",
    "text": "Update For CUBE 6.4.5\nCube 6.4.5 required that all ZDATI input files be placed before any MATI input files. This requirement was not in previous versions of Cube. The scripts were update to comply with this new requirement so the travel model will run on Cube 6.4.5 without crashing. That said, it is possible that future versions of Cube will address this issue.\nIn addition, Cube 6.4.5 was improved to allow for faster assignment processing in. According to Cube’s 6.4.5 release notes:\n\n\n\n\n\n\nNote\n\n\n\n\n\n“New option F2 for PATHLOAD DEC keyword. Improves run time performance in path building.\nNew keyword MUTITHREAD to distribute Adjust phase across multiple processing cores. Includes sub keyword MEMORY, which is a Boolean option to set the temp files in memory or disk, when using MULTITHREAD. Only applies to COMBINE=EQUI.”\n\n\n\nThe command ‘DEC=F2’ was put into the PATHLOAD control statement and ‘MULTITHREAD=@CoresAvailable@, MEMORY=T’ in the assignment ‘block’ files to improve model runtime. These changes, however, resulted in only minor runtime improvements. These improvements were left in the model scripts but were commented out so users of Cube prior to the 6.4.5 release can still use the model. For those wishing to use this enhancement and have Cube 6.4.5, they will need to uncomment these items.\nThe following files were updated as part of the Cube 6.4.5 work:\n\nDistribution\n\n1_Distribution.s\n4pd_mainbody_distribution.block\n3_SumToDistricts_GRAVITY.s\n\nMode Choice\n\n03_Skim_auto.s\n06_HBW_logsums.s\n07_HBW_dest_choice.s\n11_Mc_HBW_HBO.s,12_Mc_NHB_HBC.s\n14_AsnTran.s\n18_SumToDistricts_FinalTripTables.s\n\nFinal Assignment\n\n4pd_mainbody_managedlanes.block\n4pd_mainbody_managedlanes_SelectLink.block"
  },
  {
    "objectID": "v8x/v831/whats-new/3-segsum.html",
    "href": "v8x/v831/whats-new/3-segsum.html",
    "title": "Segment Summary",
    "section": "",
    "text": "Segment Summary\nSeveral changes were made to the model’s inputs and code to allow for segment level processing of the model results.\nIn the ‘1_Inputs\\6_Segment’ folder, an updated master segment shapefile has been provided. This shapefile contains the segment geography used to summarize and report model data. The shapefile also contains historic UDOT observed volumes (AADT), medium and heavy truck factors, day-of-week and average weekday and weekend factors, and monthly and seasonal factors. Each segment in the segment shapefile has a unique SEGID which has been stamped onto appropriate links on the master highway network. Given the complex geometry in certain areas in the highway network, such as those found near freeway system-to-system interchanges, a polygon shapefile located in the ‘Stamping_Polygons’ folder was created to aid in the SEGID transfer from the segment shapefile onto the highway network links. Note in many cases not all model links in a segment currently receive a SEGID; rather, a sufficient number of links have been identified to represent the segment for data averaging.\nThe ‘1_Inputs\\6_Segment’ folder also contains a polygon shapefile located in the ‘SeasFac_Geog’ folder that contains geographic information that can be spatially joined onto the model highway links so that seasonal factors can be calculated for every link. This data is used by the air quality TDM2MOVES script located in the ‘2_ModelScripts\\7_PostProcessing\\1_TDM_2_MOVES\\1_TDM_2_MOVES - v1’ folder.\nA segment post processing script, ‘06_SegmentSummary.s’ located in the ‘2_ModelScripts\\5_AssignHwy’ folder, has been added to the model’s ’_HailMary.s’ batch script. This script summarizes the final assigned highway network data for the segments in the segment shapefile based on the SEGID on the highway network links. The script produces two summary reports, ‘v83_SE15_Net15_Summary_SEGID.dbf’ and ‘v83_SE15_Net15_Summary_SEGID_Detailed.dbf’ found in the output scenario’s ‘5_AssignHwy\\4_Summaries’ folder. The two files are identical except that the ‘Detailed’ report includes data summaries for all functional groups separately in addition to the total for all functional groups. The reports are generated automatically with every model run. The reports provide data summaries for each direction (direction 1=positive or eastbound/northbound direction, direction 2=negative or westbound/southbound direction) and for the total of both directions and include the following information:\n\nIdentifying fields:\n\nSEGID, functional group, SUBAREAID, county FIPS, and area type\n\nFields for each direction & total:\n\nNumber of Links\nOneway Distance\nNumber of Lanes\nFunctional Type Number and corresponding functional group\nAverage 1-hour, 1-lane capacity\nAverage volume by period (AM, MD, PM, EV & DY) and average daily truck volume (LT, MD, HV)\nAverage speed by period (free flow, AM, MD, PM, EV, DY)"
  },
  {
    "objectID": "v8x/v831/whats-new/4-assign.html",
    "href": "v8x/v831/whats-new/4-assign.html",
    "title": "Assignment Output Folder",
    "section": "",
    "text": "Assignment Output Folder\nSubfolders were added to the final assignment folder, ‘5_AssignHwy’, in the scenario output folder to keep assignment output more organized. The new folders are shown in Figure 1.\n\n\n\nFigure 1: New assignment folder structure.\n\n\nThe ‘0_ConvergeReports’ folder contain the highway assignment convergence reports. These reports were previously written to the assignment temp folder. The ‘1_ODTables’ contain the output of the ‘01_Convert_PA_to_OD.s’ script. The binary ‘.NET’, loaded network files are found in ‘2a_Networks’ and their shapefile equivalents are found in ‘2b_Shapefiles’. The network and matrix output from select link analyses are found in ‘3_SelectLink’. Segment summaries from the new segment processing script are found in ‘4_Summaries’. The period skims produced form the final loaded network travel times are found in ‘5_FinalNetSkims’."
  },
  {
    "objectID": "v8x/v831/whats-new/5-ato.html",
    "href": "v8x/v831/whats-new/5-ato.html",
    "title": "Access to Opportunity",
    "section": "",
    "text": "Access to Opportunity\nAccess to opportunities, also referred to as accessibility or ATO, is a way to measure how well people can connect to jobs, or vice versa. ATO metrics quantify how well the current and future transportation system work with land use. Both shorter travel times and an increased presence of employment and other opportunities result in higher accessibility scores.\nA script to calculate ATO metrics, ‘1_Access_to_Opportunity.s’ located in the ‘2_ModelScripts\\7_PostProcessing’ folder, has been added to the model’s ’_HailMary.s’ batch script and runs automatically with every model run. The script sums the number of jobs and households that are within a typical commute travel shed (in minutes) by auto and transit. The typical commute travel shed is defined using a distance decay curve estimated from the 2012 household travel survey. Metrics that combine the jobs and households are also calculated.\nResults from the ATO script are output into ‘7_PostProcessing\\Access_to_Opportunity_@DemographicYear@.dbf’. Results can be joined with the TAZ shapefile to visualize the data, such as Figure 1\n\n\n\nFigure 1: Example report from the WFRC website displaying results at the TAZ level."
  },
  {
    "objectID": "v8x/v831/whats-new/6-misc.html",
    "href": "v8x/v831/whats-new/6-misc.html",
    "title": "Miscellaneous Changes",
    "section": "",
    "text": "Miscellaneous Changes\nA small bug was fixed in the ‘1_TripTable.s’ script in the ‘2_ModelScripts\\0_InputProcessing\\d_TripTable’ folder. The control totals for the Salt Lake International Airport and Lagoon zones were being assigned to the other location’s output. This fix will cause a localized change to the volumes near the airport and Lagoon.\nA small bug fix was made to the ‘1_NetProcessor.s’ script in the ‘2_ModelScripts\\0_InputProcessing\\ c_NetworkProcessing’ folder. When socioeconomic data is loaded on to the TAZ centroids, home-based job employment had supplanted the construction job variable. This fix only affects labeling of socioeconomic data on the highway network in Cube and does not affect any travel model results.\nTIME fields on the network were edited to have four decimal places of precision instead of two (added to improve speed calculations). Subfolder structure was removed for ‘0_DeleteTempFiles.s’ script in ‘2_ModelScripts\\7_PostProcessing’ folder and corresponding edits were made in the ’_HailMary.s’ batch script.\n’_HailMary.s’ was updated to include more detail in the email functions. The ‘Compare2Assignments.s’ script in the ‘2_ModelScripts\\7_PostProcessing\\2_Compare2Nets’ folder was updated to include SEGID, correct field names for free flow speed, and add Area Type comparison. The associated DEFAULT.VPR file was also cleaned up. A script to compare two master networks, ‘Compare_MasterNet.s’, was also added to the ‘2_ModelScripts\\7_PostProcessing\\2_Compare2Nets’ folder."
  },
  {
    "objectID": "v8x/v832/downloads.html",
    "href": "v8x/v832/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 8.3.2 documentation is shown below by category.\n\nWhat’s New Document\n\n v8.3.2 2022-02-04 Whats New \n v8.3.2 2021-11-10 Whats New \n\n\n\nModel Validation Report\n\n v8.3.2 2022-02-04 Calib Valid \n v8.3.2 2021-10-17 Calib Valid \n\n\n\nInputs Document\n\n v8.3.2 2022-02-04 Inputs"
  },
  {
    "objectID": "v8x/v832/index.html",
    "href": "v8x/v832/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model for Version 8.3.2. The documentation includes the following reports::\n\nWhat’s New Document\nModel Validation Report\nInputs Document\n\nFor access to this version of the TDM please contact the following persons:\n\nSuzie Swim (WFRC): sswim@wfrc.org\nMatt DeLora (MAG): mdelora@magutah.org"
  },
  {
    "objectID": "v8x/v832/whats-new/1-20220204-update.html",
    "href": "v8x/v832/whats-new/1-20220204-update.html",
    "title": "2022-02-04 Update",
    "section": "",
    "text": "This first part of this document contains a quick comparison between the 2022-02-04 version of the model and the 2021-11-10 version of the model.\n\n\nThe following changes were made the Distribution and Final Assignment scripts of the model\n\nChanged truck penalty from speed factor to a speed reduction penalty\n\nUpdated toll calculations:\nUpdate COST function\n\nUpdate TC function\nGeneral model cleanup\n\nAdditionally the Scenario Folder was updated with updated default ControlCenter.block files, a rolled date of model version, Fixed Cluster START & STARTHIDE typo, and added ‘blank folder setup’ folder.\n\n\n\nFigure 1 and Figure 2 contain a daily total volume comparison and a daily truck volume comparison. Daily total volumes are very similar between the two models. There is a slight shift of volume off of I-15 and onto parallel corridors. The largest volume shifts in 2050 are between I-215 and Bangerter Highway. Figure 1 shows one-way volumes.\n\n\n\nFigure 1: Daily Total Volume Difference v8.3.2 2022-02-04 vs v8.3.2 2021-11-10.\n\n\nDaily truck volumes show more differences with volumes dropping between the two models. The drop in volumes is less than a 1,500 trucks per day on freeways but is widespread throughout the region. Figure 2 shows one-way volumes.\n\n\n\nFigure 2: Daily Truck Volume Difference v8.3.2 2022-02-04 vs v8.3.2 2021-11-10."
  },
  {
    "objectID": "v8x/v832/whats-new/1-20220204-update.html#changes",
    "href": "v8x/v832/whats-new/1-20220204-update.html#changes",
    "title": "2022-02-04 Update",
    "section": "",
    "text": "The following changes were made the Distribution and Final Assignment scripts of the model\n\nChanged truck penalty from speed factor to a speed reduction penalty\n\nUpdated toll calculations:\nUpdate COST function\n\nUpdate TC function\nGeneral model cleanup\n\nAdditionally the Scenario Folder was updated with updated default ControlCenter.block files, a rolled date of model version, Fixed Cluster START & STARTHIDE typo, and added ‘blank folder setup’ folder."
  },
  {
    "objectID": "v8x/v832/whats-new/1-20220204-update.html#model-results",
    "href": "v8x/v832/whats-new/1-20220204-update.html#model-results",
    "title": "2022-02-04 Update",
    "section": "",
    "text": "Figure 1 and Figure 2 contain a daily total volume comparison and a daily truck volume comparison. Daily total volumes are very similar between the two models. There is a slight shift of volume off of I-15 and onto parallel corridors. The largest volume shifts in 2050 are between I-215 and Bangerter Highway. Figure 1 shows one-way volumes.\n\n\n\nFigure 1: Daily Total Volume Difference v8.3.2 2022-02-04 vs v8.3.2 2021-11-10.\n\n\nDaily truck volumes show more differences with volumes dropping between the two models. The drop in volumes is less than a 1,500 trucks per day on freeways but is widespread throughout the region. Figure 2 shows one-way volumes.\n\n\n\nFigure 2: Daily Truck Volume Difference v8.3.2 2022-02-04 vs v8.3.2 2021-11-10."
  },
  {
    "objectID": "v8x/v832/whats-new/1-genparams.html",
    "href": "v8x/v832/whats-new/1-genparams.html",
    "title": "General Parameters",
    "section": "",
    "text": "General Parameters\nFor highway calibration purposes, KFACs were defined for the following county-to-county trips:\n\nKFAC for Utah County to/from Salt Lake County trips is set to 0.85.\nKFAC for Davis County to/from Salt Lake County trips is set to 0.95.\n\nFor transit calibration purposes, the BRT Mode 5 multiplier was set to 0.40. The Mode 9 multiplier was removed, since BRT Mode 9 was calibrated independently of LRT for v8.3.2."
  },
  {
    "objectID": "v8x/v832/whats-new/10-modelresults.html",
    "href": "v8x/v832/whats-new/10-modelresults.html",
    "title": "Model Results - Comparison with v8.3.1",
    "section": "",
    "text": "Model Results - Comparison with v8.3.1\nFigure 1 shows a comparison of daily roadway volume in the v8.3.2 model compared to the v8.3.1 model. Roadway links in red demonstrate an increase in traffic and green show a decrease in traffic between the new and the old model. The thicker the line and darker the color, the greater the magnitude of change. At the region level, the changes show that v.8.3.2 includes greater county-to-county flows as demonstrated in the 2019 base year with volume between Salt Lake County and both Davis and Utah Counties increasing while roadways such as I-80, I-215, and SR-201 showing decreasing traffic. This pattern is continued in the 2050 model with the intensity of change increasing on north/south freeways and arterials.\n\n\n\nFigure 1: Model Daily Volumes Comparison (v8.3.2 vs v8.3.1).\n\n\nComparison of the highway volume validations of the v8.3.2 and v8.3.1 models are shown in Figure 2. There are separate charts by facility type and by county, as well as vehicle type. Medium and heavy truck trip generations and trip-length-frequencies were adjusted in the calibration process to bring model truck volumes closer in line with observed. Overall, for all vehicles the v8.3.2 model is closer to observed with all facility types within 4% of observed. Utah County improves significantly to only 1% low while Box Elder, Weber, and Davis counties are a couple percent lower than v8.3.1. When looked at by facility type, medium and heavy trucks see major improvements with minor arterials and major collectors and are much closer to observed by significant margins, but overall are slightly lower than observed as compared to v8.3.1.\n\n\n\nFigure 2: Highway Volumes Validation (v8.3.2 and v8.3.1).\n\n\nFigure 3, Figure 4, and Figure 5 show a comparison between daily model volumes by vehicle type with observed traffic volumes. There are slight changes in the All Vehicles figures between v8.3.2 and v8.3.1. Greater improvements are seen in the Medium and Heavy Truck figures, especially in the Box Elder and the Mountain View Corridor areas.\n\n\n\nFigure 3: All Vehicles Daily Volumes Comparison (Model vs Observed).\n\n\n\n\n\nFigure 4: Medium Trucks Daily Volumes Comparison (Model vs Observed).\n\n\n\n\n\nFigure 5: Heavy Trucks Daily Volumes Comparison (Model vs Observed)\n\n\nTransit ridership between v8.3.1 and v8.3.1 were compared at the trips, boardings, and mode share levels. Figure 6 and Figure 7 show a comparison of daily transit ridership and boardings for both the v8.3.2 and the v8.3.1 models. The v8.3.1 and v8.3.2 model transit was calibrated to the UTA On-Board Survey for 2015 and 2019, respectively, so the ridership for each of those models falls right on the OBS target. The boardings for the model are estimated but are close to average annual boardings as reported by UTA. Boardings between 2015 and 2019 have been relatively flat. The increase to 2050 is based on increased transit attractiveness and more supportive land use as built into the model.\n\n\n\nFigure 6: Daily Transit Ridership - All Modes.\n\n\n\n\n\nFigure 7: Daily Boardings - All Modes.\n\n\nShare by transit mode is shown in Figure 8 and Figure 9 for v8.3.2 and v8.3.1, respectively. In v8.3.2, Core Bus routes (Mode 5) show a greater portion of trips in v8.3.2 than in v8.3.1. These additional trips come mostly from Light Rail, which actually sees a decrease in mode share in 2030. Commuter Rail shares remain relatively consistent, as well as BRT.\n\n\n\nFigure 8: Share by Transit Mode – v8.3.2.\n\n\n\n\n\nFigure 9: Share by Transit Mode – v8.3.1.\n\n\nEven though the transit ridership forecasts are lower by 23% in v8.3.2 compared to v8.3.1, the 2019 to 2050 ratios for each model are similar with 2.0 in v8.3.2 and 2.2 in v8.3.1.\n\n\n\nFigure 10: Comparison of 2019 and 2050 ratios.\n\n\nAs mentioned in a previous section, county-level adjustments were made in Davis and Utah counties to help better align station boardings in the model with observed. The comparison of the models with observed is shown in Figure 11. Due to these adjustments, there is a slight increase in Utah County boardings. However, Provo Station decreased slightly to just over half of what is observed. Davis County boardings proved to be more sensitive to the adjustment and a significant decrease is shown but still higher than observed boardings.\n\n\n\nFigure 11: 2019 Daily FrontRunner Boardings by Station Compared to Observed."
  },
  {
    "objectID": "v8x/v832/whats-new/2-inputdata.html",
    "href": "v8x/v832/whats-new/2-inputdata.html",
    "title": "Input Data",
    "section": "",
    "text": "Speed factor changes were made to the following locations:\n\nUS-89 North Davis County SFAC_BASE adjusted to 0.82\nLegacy Pkwy South of Parrish SFAC_BASE and SFAC_FUT set to 0.95\nUniversity Avenue from 300 South to 700 N SFAC_BASE and SFAC_FUT set to 0.85\nFreedom Boulevard from 300 South to 500 N SFAC_BASE and SFAC_FUT set to 0.85\nProvo Center Street from 500 West to University Ave SFAC_BASE and SFAC_FUT set to 0.60\n\nCapacity factors changes were made to the following locations:\n\nProvo Center Street from 500 West to University Ave CFAC_BASE and CFAC_FUT set to 0.85\n\n\n\nThe highway network was updated in the MAG and WFRC areas to reflect the third round of Regional Transportation Plan (RTP) amendments. Additional edits were made in the MAG area to conform with more recent project clarification. Figure 1 shows where lanes were added (green) or were taken away (orange) between versions 8.3 and 8.3.1 highway networks.\n\n\n\nFigure 1: Lane Change between 2019 and 2050 for Model v8.3.2 2022-02-04.\n\n\n\n\n\nThe speed of rail transit is coded onto rail-only links within the master highway network. Transit speed for LRT were updated to reflect 2019 operations. Most of the speed changes were less than 5 mph. Figure 2 shows where light rail speeds were changed.\n\n\n\nFigure 2: Change in Transit Speeds for LRT in Salt Lake County. Green: Increase in Speeds — Red: Decrease in Speeds.\n\n\ntbl-lrt-speed shows the resulting average speeds along entire light rail routes. The net effect of the update was generally lower speeds, with the TRAX-Blue line and the S-Line having the largest drops in speed with a drop of 8.2% and 14.5%, respectively.\n\n\nCode\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"TRAX-Blue\" ,'24.4','22.4','-2.0','-8.2% '],\n         [\"TRAX-Green\",'19.2','18.6','-0.6','-3.1% '],\n         [\"TRAX-Red\"  ,'24.4','23.6','-0.8','-3.3% '],\n         [\"S-Line\"    ,'13.8','11.8','-2.0','-14.5%']]\nMarkdown(tabulate(\n  table, \n  headers=[\"Route\",\"Before Updates\", \"After Updates\", \"Difference\", \"% Difference\"]\n))\n\n\n\n\nTable 1: Average Travel Speed (MPH) by Route for LRT\n\n\nRoute\nBefore Updates\nAfter Updates\nDifference\n% Difference\n\n\n\n\nTRAX-Blue\n24.4\n22.4\n-2\n-8.2%\n\n\nTRAX-Green\n19.2\n18.6\n-0.6\n-3.1%\n\n\nTRAX-Red\n24.4\n23.6\n-0.8\n-3.3%\n\n\nS-Line\n13.8\n11.8\n-2\n-14.5%\n\n\n\n\n\n\nAdditional changes include the following:\n\nFrontRunner speeds were adjusted to match the 2019 schedule\nSeveral SEGID changes to match UDOT 2019 Segment shapefile\nCorrected I-15 SB to include lane drop north of Lehi 2100 North interchange and lane add south of interchange to match constructefacility\nUpdated GIS link & node shapefiles"
  },
  {
    "objectID": "v8x/v832/whats-new/2-inputdata.html#highway-network",
    "href": "v8x/v832/whats-new/2-inputdata.html#highway-network",
    "title": "Input Data",
    "section": "",
    "text": "Speed factor changes were made to the following locations:\n\nUS-89 North Davis County SFAC_BASE adjusted to 0.82\nLegacy Pkwy South of Parrish SFAC_BASE and SFAC_FUT set to 0.95\nUniversity Avenue from 300 South to 700 N SFAC_BASE and SFAC_FUT set to 0.85\nFreedom Boulevard from 300 South to 500 N SFAC_BASE and SFAC_FUT set to 0.85\nProvo Center Street from 500 West to University Ave SFAC_BASE and SFAC_FUT set to 0.60\n\nCapacity factors changes were made to the following locations:\n\nProvo Center Street from 500 West to University Ave CFAC_BASE and CFAC_FUT set to 0.85\n\n\n\nThe highway network was updated in the MAG and WFRC areas to reflect the third round of Regional Transportation Plan (RTP) amendments. Additional edits were made in the MAG area to conform with more recent project clarification. Figure 1 shows where lanes were added (green) or were taken away (orange) between versions 8.3 and 8.3.1 highway networks.\n\n\n\nFigure 1: Lane Change between 2019 and 2050 for Model v8.3.2 2022-02-04.\n\n\n\n\n\nThe speed of rail transit is coded onto rail-only links within the master highway network. Transit speed for LRT were updated to reflect 2019 operations. Most of the speed changes were less than 5 mph. Figure 2 shows where light rail speeds were changed.\n\n\n\nFigure 2: Change in Transit Speeds for LRT in Salt Lake County. Green: Increase in Speeds — Red: Decrease in Speeds.\n\n\ntbl-lrt-speed shows the resulting average speeds along entire light rail routes. The net effect of the update was generally lower speeds, with the TRAX-Blue line and the S-Line having the largest drops in speed with a drop of 8.2% and 14.5%, respectively.\n\n\nCode\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"TRAX-Blue\" ,'24.4','22.4','-2.0','-8.2% '],\n         [\"TRAX-Green\",'19.2','18.6','-0.6','-3.1% '],\n         [\"TRAX-Red\"  ,'24.4','23.6','-0.8','-3.3% '],\n         [\"S-Line\"    ,'13.8','11.8','-2.0','-14.5%']]\nMarkdown(tabulate(\n  table, \n  headers=[\"Route\",\"Before Updates\", \"After Updates\", \"Difference\", \"% Difference\"]\n))\n\n\n\n\nTable 1: Average Travel Speed (MPH) by Route for LRT\n\n\nRoute\nBefore Updates\nAfter Updates\nDifference\n% Difference\n\n\n\n\nTRAX-Blue\n24.4\n22.4\n-2\n-8.2%\n\n\nTRAX-Green\n19.2\n18.6\n-0.6\n-3.1%\n\n\nTRAX-Red\n24.4\n23.6\n-0.8\n-3.3%\n\n\nS-Line\n13.8\n11.8\n-2\n-14.5%\n\n\n\n\n\n\nAdditional changes include the following:\n\nFrontRunner speeds were adjusted to match the 2019 schedule\nSeveral SEGID changes to match UDOT 2019 Segment shapefile\nCorrected I-15 SB to include lane drop north of Lehi 2100 North interchange and lane add south of interchange to match constructefacility\nUpdated GIS link & node shapefiles"
  },
  {
    "objectID": "v8x/v832/whats-new/2-inputdata.html#transit-network",
    "href": "v8x/v832/whats-new/2-inputdata.html#transit-network",
    "title": "Input Data",
    "section": "Transit Network",
    "text": "Transit Network\n\nHand-Coded Walk-Access Links\nHand-coded walk-access links are an additional input for transit beyond the automatically generated walk-access links. Auto-generated walk-access links are created between zone centroids and transit stops within a certain distance as defined by area of the zone, as long as they do not cross barriers as defined by functional type. Hand-coded walk-access links are user-defined, supplemental walk access where an auto-generated link would not be created or where walk access is more attractive than the TAZ structure and auto-generated links would suggest.\nThe update process removed a majority of the general hand-coded walk access links, reducing the number from 234 to 31 links. Areas that retained or added hand-coded links include SLC International Airport, Hill Air Force Base, University of Utah, and Utah Valley University. Figure 3 shows hand-coded walk-access links before and after the updates.\n\n\n\nFigure 3: Hand-Coded Walk Access Links.\n\n\n\n\nPark-And-Ride\nPark-and-Ride lots are coded onto nodes within the master highway network and are defined by what transit mode they service. To be used by the travel model, park-and-ride nodes need to be coded at nodes that serve as rail or bus stops. Figure 4 (a) shows what changes were made to park-and-ride lots, which include 17 additional locations, 49 removed locations, and 14 locations that were modified by changing the mode they service. Most of the park-and-ride lots removals were due to redundancy on highway nodes adjacent to another park-and-ride lot at a rail node. The park-and-ride lots additions mostly included new lots along express bus routes. The resulting park-and-ride lot locations, including ones that were not edited, are shown in Figure 4 (b).\n\n\n\n\n\n\n\n(a) Park-And-Ride Lot Changes\n\n\n\n\n\n\n\n(b) Park-And-Ride Lots After Updates\n\n\n\n\nFigure 4: Park-And-Ride Lots. Red: Removed — Green: Added — Blue: Modified\n\n\n\n\nTransit Line Changes\nTransit line files were updated based on actual 2019 route configuration. Transit line files include route alignments, stop locations, and peak/off-peak headway designation. Additionally, 2024, 2030, 2040, 2050, 2030UF, 2040UF, 2050UF transit was updated to reflect 2019 input changes.\nA general edit that was made to all lines that connect directly to rail was the removal of bus stops on a roadway node directly adjacent to a stop at a rail node. Only the rail node stop remains. Due to the amount of lines affected by this change, they are not listed individually in the line details below. There were also a couple of highway network edits made in relation to transit line changes:\n\nAt the Blue Line end-of-line in Draper, the centroid connector for the rail station connection to the highway network moved offintersection of Pioneer Road / 1300 East intersection and connected directly to Pioneer Drive.\nA connection between 24th Street and Wall Avenue in Ogden was added to represent the existing connection on each side of theviaduct. The associated transit-only link was removed.\n\nThe line file changes are shown in the lists below, arranged by file and route name. Only lines that have changes, other than those listed above, are included.\nmag_brt_2019.lin\n\nBRT_ProOrm:\n\nstops removed:\n\n24779 - Geneva Road\n26400 - 900 E/Campus Ln\n26487 - 750 S/100 W\n\nStops moved:\n\n22881 to 26206 (from intersection of University Pkwy/900 E to the west)\n25972 to 23019 (moved further west to intersection of 400 E/700 N)\n23069 to 26203 (moved further north off of intersection of 200 N/Univ Ave)\n23066 to 26202 (moved further south off of intersection of 300 S/Univ Ave)\n26184 to 26192 (moved off University Ave and onto Town Centre Blvd)\n23160 to 24332 (moved west of intersection East Bay Blvd/1860 S)\n\nAlignment changed: Off of University Avenue between 920 S and Town Centre Drive and onto Town Centre Blvd\n\n\nmag_exp_2019.lin\n\nM807_NoCnty: Many stops removed. Realignment changed at each end of route. Reverse direction removed.\nM806_EglMtn: Headway changed from 30/0 to 45/0. Many stops removed. Realignment changed at Eagle Mtn end-of-line and to stay on freeway through American Fork. Reverse direction removed.\n\nmag_lcl_2019.lin\n\nM805_Santaquin: Headway 1/2 changed from 30/0 to 45/60. Stop added: 23552 (Santaquin end of line moved one node to west). Three stops removed in SF, only 25321 remains. Three stops removed in Provo: 26487, 26488, 23152.\nM809_AM-PG: Changed from two-way route to one-way route. Stops removed: 24769, 22358, 24162, 25729, 22389, 25727, 25513, 22514, 22390, 25726, 22392, 22394. Stops added: 24189, 22395.\nM821_Psn: Various stops removed.\nM822_Psn: Various stops removed.\nM831_WPr: Alignment changed around UVU. Various stops removed.\nM833_CntrPr: Various stops removals.\nM834_EstPr: Alignment changed at Univ Pkwy/2230 N. Various stops removed.\nM841_UVU: UVU main campus end-of-line moved one further node to 26601. Various stops removed.\nM850_StateStreet: Alignment Changed: Ashton Blvd & 2100 N, PG downtown, which required addition of reverse direction and change to one-way route due to one-way links. Various stops removals.\nM862_Orem: Alignment changed around UVU to use campus circulator roadway. Various stops removed.\nM864_Thanksgiving Point: Various stops removed.\nM871_SLtoUtahCnty: Northern end-of-line alignment changed to match updated highway network connection to Blue Line Draper Station.\n\nrail_2019.lin\n\nOGPNShuttle: Route removed, since service to Pleasant View discontinued in 2015.\n\nwfrc_og_lcl_2019.lin\n\nO601: Connection to Wall Avenue was removed from transit-only link and put on new highway network connection.\nO603: Southern end-of-line moved to McKay Dee Hospital.\nO606: Northern end-of-line moved from Harrison Blvd to Monroe Blvd.\nO608: Northern end-of-line moved from Harrison Blvd to Monroe Blvd.\nO628: Southern end-of-line extended to match southern circulation around Layton IHC.\nO630: Southern end-of-line moved from Weber State University to Ogden FrontRunner Station.\nO645: Northern end-of-line extended to US-89.\nOF618: Headway2 changed from 30 to 60.\nS470: Connection to Clearfield Station CRT added.\nS455: One stop removed in University of Utah area.\n\nwfrc_sl_exp_2019.lin\n\nS2X: Changed to two-way route. Two stops removed on 200 South near Gateway. Two stops added in University of Utah area.\nS307X: Headway 1 changed from 30 to 47.\nS313X: Alignment through Fort Union area changed.\nS354X: Extended north end-of-line to Red Line station.\nS451X: Reverse direction removed.\nS454: Stop added at Green Line airport stop. Some stops along Green Line and North Temple moved to rail stop locations.\nS456: Stop added at Farmington Station CRT. Some stops along Green Line and North Temple moved to rail stop locations.\nS471: Alignment through Bountiful modified.\nS473X: Extended southern end-of-line further to Research Park.\nS902: Headway changed from 15/0 to 60/90. Some stops added.\n\nwfrc_sl_lcl_2019.lin\n\nD461: Some stop in Woods Cross Station CRT area removed.\nS11: Eastern end-of-line shortened to stop at University of Utah Medical Center and not Red Line.\nS201: Southern end-of-line extended to South Jordan Station CRT.\nS217: Alignment changed near green line (N Temple), route removed from 2200 West.\nS218: S218 - changed ONEWAY=F to become two-way route\nS240: Alignment changed at Pieper Blvd.\nS41: West end-of-line extended one node down 5600 West.\nS463: Connection to Wood Cross Station CRT.\nS509: Alignment changed around SR-201.\nS519/520 - added ONEWAY=F to explicitly define two-way route\nS526: Headway changed from 40/40 to 60/0.\nS551: Headway 1 changed from 30 to 40. Some stops along Green Line and North Temple moved to rail stop locations.\nSF453: Eastern EOL brought to rail node 20053.\nSF514: Stop added at SoJo Station CRT.\nSF546: Connection added to Draper Town Center Station CRT.\nSF94: Eastern end-of-line extended one more node to east."
  },
  {
    "objectID": "v8x/v832/whats-new/2-inputdata.html#segments-and-factors",
    "href": "v8x/v832/whats-new/2-inputdata.html#segments-and-factors",
    "title": "Input Data",
    "section": "Segments and Factors",
    "text": "Segments and Factors\nThe Master Segments shapefile was updated with the following changes:\n\nDay-of-week, season, and month factors were updated using 2015-2019 data from UDOT Continuous Count Stations (CCS). To be consistent with the UDOT AADT process, any year of data without a full week of data from each month was excluded from the factor creation.\nCreated single grouping of CCS for all factors (previously weekday and month/season factors were based on separate groupings).\nChanged average weekday factor (FAC_WDAVG) to represent Tuesday through Thursday (previously Monday through Thursday).\nChanged average and max weekend factors (FAC_WEAVG, FAC_WEMAX) to represent Saturday and Sunday (previously Friday through Sunday)."
  },
  {
    "objectID": "v8x/v832/whats-new/2-inputdata.html#other-changes",
    "href": "v8x/v832/whats-new/2-inputdata.html#other-changes",
    "title": "Input Data",
    "section": "Other Changes",
    "text": "Other Changes\nThe following were additional changes made to the model:\n\nAn additional districting grouping (‘DISTSUPER’ and ‘DSUP_NAME’) was added to the TAZ shapefile using definitions from UDOT’s recent work on the long distance model.\nThe toll zone shapefile was also modified to correct a few instances where the HOT lane links were crossing into the opposing direction HOT zone.\nThe ‘1_Inputs\\0_GlobalData\\UbanizationMap’ folder name was changed to ‘1_Inputs\\0_GlobalData\\ArcMap_mxd. The’_Urbanization_ArcMap103.mxd’ file was saved as ArcMap version 10.3 and the ArcMap version was added to the filename\nThe TDM script ’_CreateOutputFolders.s’ in ‘3_CreateScenarios’ folder was modified to account for the changed folder and file names for the urbanization.mxd."
  },
  {
    "objectID": "v8x/v832/whats-new/3-inputprocessing.html",
    "href": "v8x/v832/whats-new/3-inputprocessing.html",
    "title": "Input Processing",
    "section": "",
    "text": "A couple bugs were corrected in the input processing script:\n\nCorrected inbound/outbound designations for EB/WB links.\nRemoved FT=37-38 as a condition for populating link additional HOV capacity (AdHOVCap1H) values since related HOV fields are populated on GP links not HOV links. Also, corrected capacity lookup to be for FT=37 and not FT of link.\n\n\n\n\nThe walk buffer script was improved with a couple simple modifications to the routes and stops that are included in walk buffer creation: - Removed local bus route buffers along expressways and freeways (anything with FT&gt;=12). Only local bus routes along arterials or collectors are now included in route buffers. - Removed buffers that were calculated from local bus stops, which were redundant with local bus route buffers. - The remaining combined walk buffer areas are shown in green. The ’_WalkBuffer_ArcMap103.mxd’ file was updated to version 10.3 of ArcMap, and the scripts were modified to copy the walk buffer mxd to scenario folders.\n\n\n\nFigure 1: Walk Buffer Modifications."
  },
  {
    "objectID": "v8x/v832/whats-new/3-inputprocessing.html#inboundoutbound-and-hov-capacity",
    "href": "v8x/v832/whats-new/3-inputprocessing.html#inboundoutbound-and-hov-capacity",
    "title": "Input Processing",
    "section": "",
    "text": "A couple bugs were corrected in the input processing script:\n\nCorrected inbound/outbound designations for EB/WB links.\nRemoved FT=37-38 as a condition for populating link additional HOV capacity (AdHOVCap1H) values since related HOV fields are populated on GP links not HOV links. Also, corrected capacity lookup to be for FT=37 and not FT of link."
  },
  {
    "objectID": "v8x/v832/whats-new/3-inputprocessing.html#walk-buffer-modifications",
    "href": "v8x/v832/whats-new/3-inputprocessing.html#walk-buffer-modifications",
    "title": "Input Processing",
    "section": "",
    "text": "The walk buffer script was improved with a couple simple modifications to the routes and stops that are included in walk buffer creation: - Removed local bus route buffers along expressways and freeways (anything with FT&gt;=12). Only local bus routes along arterials or collectors are now included in route buffers. - Removed buffers that were calculated from local bus stops, which were redundant with local bus route buffers. - The remaining combined walk buffer areas are shown in green. The ’_WalkBuffer_ArcMap103.mxd’ file was updated to version 10.3 of ArcMap, and the scripts were modified to copy the walk buffer mxd to scenario folders.\n\n\n\nFigure 1: Walk Buffer Modifications."
  },
  {
    "objectID": "v8x/v832/whats-new/4-hhdisag.html",
    "href": "v8x/v832/whats-new/4-hhdisag.html",
    "title": "Household Disaggregation and Auto Ownership",
    "section": "",
    "text": "Household Disaggregation and Auto Ownership\nSeveral changes were made to clean up and fix minor errors in the household disaggregation and auto ownership scripts:\n\nAdded Box Elder Vehicles to the totals calculated for the ‘VO_Tmp_CountyVehicleTotal.txt’ file in the ‘3_AutoOwnership.s’ file.\nCorrected VO_DebugUtility.csv header row in ‘3_AutoOwnership.s’ to keep it from repeating. Commented out debug csv creation.\nCorrected AVGINCOME in ‘Tmp_Marginal_Income_beforeIPF.dbf’.\nCommented out ‘test.csv’ creation in ‘2_ModelScripts\\1_HHDisag_AutoOwn\\1_LifeCycle.s’.\nCorrected CO_TAZID in ‘LifeCycle_Households_Population.dbf’ in ‘2_ModelScripts\\1_HHDisag_AutoOwn\\1_LifeCycle.s’.\nUpdated ‘Lookup - BYTAZAgePct - AllCo.csv’ and source materials (’_TAZ_AgePct_Lookup_Source - 2020-06-23.xlsb’) in ‘1_Inputs\\0_GlobalData\\1_HHDisag_AutoOwn’. This update reflects the updated source materials structure in the statewide spreadsheet and updated data for Summit/Wasatch counties and UDOT area. The Wasatch Front area data did not change."
  },
  {
    "objectID": "v8x/v832/whats-new/5-tripgen.html",
    "href": "v8x/v832/whats-new/5-tripgen.html",
    "title": "Trip Generation",
    "section": "",
    "text": "Trip Generation\nSeveral changes were made in the trip generation scripts:\n\nAdded factors to reduce special generation attractiveness to Temple Square, SLC Library, and many colleges.\nAdded Large District calibration factors.\nAdjusted short-haul truck light/medium/heavy trip production rates.\nUpdated county-level adjustments to short-haul truck medium/heavy productions and attractions.\nTruck speed factors are now applied to all facility types, previously they applied only to freeway."
  },
  {
    "objectID": "v8x/v832/whats-new/6-distribution.html",
    "href": "v8x/v832/whats-new/6-distribution.html",
    "title": "Distribution",
    "section": "",
    "text": "Distribution\nThe following changes were made in the distribution scripts:\n\nFriction factors, which were previously calibrated to the county level, were recalibrated at the large district level.\nTruck speed factors are now applied to all facility types, where previously they applied only to freeway."
  },
  {
    "objectID": "v8x/v832/whats-new/7-mc.html",
    "href": "v8x/v832/whats-new/7-mc.html",
    "title": "Mode Choice",
    "section": "",
    "text": "Mode Choice\nMode choice was recalibrated to match target values from UTA 2019 On-Board Survey.\nThe following changes were made in the transit .FAC files in PT_Parameter Folder and associated voyager script in mode choice:\n\nDecreased WAITFACTOR to 2.0 (previously 3.0).\nChanged mode-specific weight applied to transit in-vehicle times and non-transit leg times (Relative mode factor to the skimmed specific mode) for express bus to 3.50.\nChanged the following to fine-tune boardings by mode (to increase for LCL, and decrease for other modes).\nAdded initial boarding penalty for local bus of 5 minutes.\nIncreased transit transfer boarding penalty to 12 minutes for all modes but walk to local which was set at 6 minutes (previously 10 minutes for all modes).\n\nAdditional changes were made to mode choice:\n\nCombined Mode Choice scripts 11 and 12 into ‘11_12_MC_HBW_HBO_NHB_HBC.s’ to allow simultaneous running on eight cores.\nBRT Mode 9 constants were calibrated independently of LRT. However, BRT Mode 5 continues to use a multiplier of the LRT constant and was increased to 0.40 from 0.33.\nAdjustments were made to FrontRunner to bring station boardings closer to observed. Davis County boardings were significantly higher than observed, while Utah County boardings were significantly lower. A +15 multiplier of initial in-vehicle time penalty was added to all stations in Davis County, while -15 multiplier of in-vehicle time was added to all stations in Utah County. This brought boardings closer to observed, but there is still significant difference in boardings that should be accounted for when using the model for any station-level forecasts. A comparison of station model and observed volumes is found in the final section of this document comparing v8.3.2 to v8.3.1."
  },
  {
    "objectID": "v8x/v832/whats-new/8-assign.html",
    "href": "v8x/v832/whats-new/8-assign.html",
    "title": "Highway Assignment",
    "section": "",
    "text": "Highway Assignment\nThe fowllowing changes were made in highway assignment scripts:\n\nSegment summary processing script was updated to include truck volumes in detailed output.\nIn harmony with the changes in distribution, truck speed factors are now applied to all facility types, were previously they applied only to freeway.\n\nAccess-to-Opportunity (ATO) scripts were moved to the Assignment folder. The following edits were made to the ATO script:\n\nMade output field names more descriptive.\nChanged output format from dbf to csv.\nAdded Free Flow auto time and straight-line time (based on auto free flow) ATO calculations/output\nUpdated script to get the ATO weights from empirical HBW distance decay curve from Household Travel Survey as a look up table rather than calculate from a step function."
  },
  {
    "objectID": "v8x/v832/whats-new/9-pp.html",
    "href": "v8x/v832/whats-new/9-pp.html",
    "title": "Post Processing",
    "section": "",
    "text": "Post Processing\nThe TDM2MOVES folder was removed."
  },
  {
    "objectID": "v8x/v832/whats-new/references.html",
    "href": "v8x/v832/whats-new/references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "v9x/v901/downloads.html",
    "href": "v9x/v901/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 9.0.1 documentation is shown below by category.\n\nWhat’s New Document\n\n What’s New (Pdf) \n\n\n\nModel Validation Report\n\n Model Validation (Pdf)"
  },
  {
    "objectID": "v9x/v901/index.html",
    "href": "v9x/v901/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model Version 9.0.1. The documentation includes the following reports:\n\nWhat’s New Document\nModel Validation Report\n\nFor access to this version of the TDM please contact the following persons:\n\nSuzie Swim (WFRC): sswim@wfrc.org\nTim Hereth (MAG): thereth@magutah.org"
  },
  {
    "objectID": "v9x/v901/validation/1-tripgen.html",
    "href": "v9x/v901/validation/1-tripgen.html",
    "title": "Trip Generation",
    "section": "",
    "text": "Trip Generation validation was considered for both production ratios and relative shares."
  },
  {
    "objectID": "v9x/v901/validation/1-tripgen.html#ratios",
    "href": "v9x/v901/validation/1-tripgen.html#ratios",
    "title": "Trip Generation",
    "section": "Ratios",
    "text": "Ratios\nValidation for production ratios looked at three sets of measures: productions-to-household ratios (Figure 1), total trips (Figure 2), and trip balance ratios (Figure 3). The sources of the data include the Utah Household Travel Survey from 2012 (2012 HTS), the base year model (BY 2019 Model), and the National Household Travel Survey from 2017 with data from the Mountain Census Division (2017 NHTS - Mountain).\nThe model shows an average 4.01 trips per person which is slightly higher than the 2017 NHTS - Mountain average of 3.54. The model also shows an average 12.4 trips per household which is higher than the 2017 NHTS - Mountain average of 9.1. Utah, including the Wasatch Front, has a significantly higher average household size of 3.09 persons per household when compared to the Mountain Census Division average of 2.58, which accounts for the differences when compared to the 2017 NHTS - Mountain averages.\n\n\n\n\n                                                \nFigure 1: Productions to Households Ratios – Total Trip Ends (II + IX).\n\n\n\n\n\n\n\n                                                \nFigure 2: Total Trip Validation\n\n\n\n\n\n\n\n                                                \nFigure 3: Trip Balance Ratios"
  },
  {
    "objectID": "v9x/v901/validation/1-tripgen.html#relative-shares",
    "href": "v9x/v901/validation/1-tripgen.html#relative-shares",
    "title": "Trip Generation",
    "section": "Relative Shares",
    "text": "Relative Shares\nValidation for production relative shares considered the reasonableness of relative shares as shown in Table 1. The relative share between HBW, HBO and NHB trips looks reasonable with HBW at about 14% of the total and the highest share going to HBO. Commercial vehicles account for about 22% of the total trips generated by the model. This is within the expected range for an urban area like the Wasatch Front. IX and XI trips account for around 2% of the total trip generation. This also appears to be reasonable.\n\n\n\n\n\n\n\n\n\nTable 1: Relative Shares of Trip Productions\n\n\nPurpose\nProduction\nShare\n\n\n\n\nHBW\n1,758,104\n14.1%\n\n\nHBO\n5,317,476\n42.5%\n\n\n     HBShp\n908,733\n7.3%\n\n\n     HBOth\n3,719,191\n29.7%\n\n\n     HBScK6\n365,084\n2.9%\n\n\n     HBsc712\n324,468\n2.6%\n\n\nNHB\n2,405,720\n19.2%\n\n\n     NHBW\n812,855\n6.5%\n\n\n     NHBNW\n1,592,865\n12.7%\n\n\nTotal Person\n9,481,300\n75.8%\n\n\nTotal External\n172,855\n1.4%\n\n\n     IX\n78,057\n0.6%\n\n\n     XI\n94,798\n0.8%\n\n\nTotal Truck\n2,802,234\n22.4%\n\n\n     LT\n1,553,653\n12.4%\n\n\n     MD\n884,558\n7.1%\n\n\n     HV\n364,023\n2.9%\n\n\nTotal IX Truck\n21,750\n0.2%\n\n\n     IX MD\n10,716\n0.1%\n\n\n     IX HV\n11,034\n0.1%\n\n\nTotal XI Truck\n30,741\n0.2%\n\n\n     XI MD\n14,372\n0.1%\n\n\n     XI HV\n16,369\n0.1%\n\n\nTelecommute Share of HBW\n69,175\n0.6%\n\n\nTelecommute Share of NHBW\n19,552\n0.2%\n\n\nTOTAL\n12,508,880\n100.0%"
  },
  {
    "objectID": "v9x/v901/validation/2-distribute.html",
    "href": "v9x/v901/validation/2-distribute.html",
    "title": "Trip Distribution",
    "section": "",
    "text": "Modeled average trip lengths for the base year were compared to the 2012 Household Travel Survey. The model was validated for for distance, time, and generalized cost using the following measures:"
  },
  {
    "objectID": "v9x/v901/validation/2-distribute.html#average-trip-lengths",
    "href": "v9x/v901/validation/2-distribute.html#average-trip-lengths",
    "title": "Trip Distribution",
    "section": "Average Trip Lengths",
    "text": "Average Trip Lengths\nThe following figure shows the average trip lengths the modeled and observed time, distance, and generalized cost.\n\n\n\n\n\n\n\nCode\nviewof varSelect = Inputs.select(new Map([['Generalized Cost','GC'], ['Distance', 'Dist'], ['Time', 'Time']]), {value: 'Variable', label: \"Variable\"})\n\nviewof purpSelect  = Inputs.select(new Map([['Internal Trip Purposes', 'MainPurposes'], ['External Trip Purposes', 'Externals']]), {value: 'PurpType', label: \"Purpose Set\"});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndataLT = transpose(dataStats)\nfiltered_data = dataLT.filter(function(dataL) {\n    return varSelect == dataL.Variable &&\n           purpSelect == dataL.PurpType;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotTable\n\n\n\n\nCode\n//https://observablehq.com/@d3/grouped-bar-chart\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Purpose,\n    y: d =&gt; d.AVG_TRIP_LEN,\n    z: d =&gt; d.DataSource,\n    yLabel: \"Average Trip Length\",\n    zDomain: ['Model','Observed'],\n    height: 500,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\nFigure 1: Average Trip Length between model and observed.\n\n\n\n\n\n\n\nCode\nInputs.table(filtered_data)"
  },
  {
    "objectID": "v9x/v901/validation/2-distribute.html#trip-length-frequencies",
    "href": "v9x/v901/validation/2-distribute.html#trip-length-frequencies",
    "title": "Trip Distribution",
    "section": "Trip Length Frequencies",
    "text": "Trip Length Frequencies\nModeled trip lengths for the base year were compared to the 2012 Household Travel Survey. The following figures shows the modeled and observed time and distance average trip lengths and trip length frequencies.\n\n\n\n\n\n\n\nCode\noptionsTripPurp = \n[\n    ['Home-Based Work'                   , 'HBW'    ],\n    ['Home-Based Shopping'               , 'HBShp'  ],\n    ['Home-Based Other'                  , 'HBOth'  ],\n    ['Home-Based School - Primary'       , 'HBSchPr'],\n    ['Home-Based School - Secondary'     , 'HBSchSc'],\n    ['Non-Home-Based Work'               , 'NHBW'   ],\n    ['Non-Home-Based Non-Work'           , 'NHBNW'  ],\n    ['Light Trucks'                      , 'LT'     ],\n    ['Medium Trucks'                     , 'MD'     ],\n    ['Heavy Trucks'                      , 'HV'     ],\n    ['Internal-to-External'              , 'IX'     ],\n    ['External-to-Internal'              , 'XI'     ]\n]\n\nviewof vTripPurp = Inputs.select(new Map(optionsTripPurp), {value: 'HBW', label: \"Trip Purpose:\"})\n\nviewof vTlfType = Inputs.select(new Map([['Generalized Cost','GC'],['Distance','Dist'],['Time','Time']]), {value: 'Dist', label: \"Variable:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfreqT = transpose(freq)\n\nfreqT_filtered_Obs = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqObs' == freqData.freqSource;\n})\n\nfreqT_filtered_Mod = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqMod' == freqData.freqSource;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Distance/Time/Cost', tickFormat: d =&gt; d},\n  y: {label: 'Frequency', tickFormat: f =&gt; `${Math.round(f * 100)}%`},\n  marginRight: 60,\n  marginLeft: 60,\n  style: {\n    fontSize: 15\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  marks: [\n    Plot.line(\n      freqT_filtered_Mod, {x: 'BIN', y: 'freq', stroke: \"#376092\", strokeWidth: 4}),\n    Plot.line(\n      freqT_filtered_Obs, {x: 'BIN', y: 'freq', stroke:  \"#77933c\", strokeWidth: 4}),\n    Plot.frame({strokeOpacity: 0.2}),\n    ]\n});\n\n\n\n\n\n\nFigure 2: Trip Length Frequencies between Model and Observed."
  },
  {
    "objectID": "v9x/v901/validation/3-modechoice.html",
    "href": "v9x/v901/validation/3-modechoice.html",
    "title": "Mode Choice",
    "section": "",
    "text": "The validation results for the Mode Choice portion of the model are shown in this section. Mode Choice was validated against the Utah Transit Authority 2019 On-Board Survey as well as the 2012 Household Travel Survey. Validation is summarized by the following categories:"
  },
  {
    "objectID": "v9x/v901/validation/3-modechoice.html#transit-trips-and-boardings",
    "href": "v9x/v901/validation/3-modechoice.html#transit-trips-and-boardings",
    "title": "Mode Choice",
    "section": "Transit Trips and Boardings",
    "text": "Transit Trips and Boardings\nThe validation of daily transit trips and boardings is shown through the comparison of model and observed data by mode. The model was validated by the following measures:\n\nTrips by Hierarchical Mode\nBoardings by Hierarchical Mode\nTransfer Ratio by Hierarchical Mode\nBoardings by Surveyed Mode (for comparison only)\n\nThe three hierarchical mode measures are summarized by the highest hierarchy mode in a given trip with local bus being the lowest on the hierarchy and commuter rail being the highest. For example, if a trip uses Local Bus and then transfers to LRT, the trip is stored as a LRT trip. Trips by Hierarchical Mode represent each trip as a single number, regardless of the number of transfer or different modes that were used on a trip.\nBoardings by Hierarchical Mode represent each boarding separately but summarized at the highest hierarchical mode of the trip. For example, for one transfer from Local Bus to LRT there are two boardings, one on each mode, but they are both stored in the highest hierarchal mode of LRT. The Transfer Ratio by Hierarchical Mode is the ratio between boardings and trips for any given mode.\nThe final measure Boardings by Surveyed Mode represents the total boardings on each mode individually. They are not summarize at the highest hierarchical mode of the trip but rather at the mode on which the boarding actually occurred. For example, the Local Bus to LRT trip mentioned previously would be summarized in this measure as one boarding on Local Bus and one boarding one LRT. This measure is for comparison use only, since the structure of the Mode Choice model does not consider this measure during calibration.\nThe total number of boardings are the same between hierarchical mode and surveyed mode, but depending on the make-up of the trips, there totals by mode will vary.\nThe model data for hierarchical mode measures is taken from the shares reports v901_SE19_Net19_RegionShares_Pk.csv and v901_SE19_Net19_RegionShares_Ok.csv. The model data for the surveyed mode comparison is taken from _v901_SE19_Net19_1_PA_Route.dbf.\nThe interactive Figure 1 allows for the visual comparison of model and observed values for each Transit Trips and Boardings category.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bPlotSelect = Inputs.select(new Map([['Trips by Hierarchical Mode', 'Trips by Hierarchical Mode'], ['Boardings by Hierarchical Mode', 'Boardings by Hierarchical Mode'], ['Transfer Ratio by Hierarchical Mode','Transfer Ratio'], ['Boardings by Mode Surveyed','Boardings by Mode Surveyed']]), {value: nameGroup, label: \"Category\"})\nviewof metric = Inputs.radio(new Map([[\"Difference\", \"Difference\"], [\"% Difference\", \"% Difference\"]]), {value: \"Difference\", label: \"View:\"})\n\ndataBLC = transpose(boardChart)\nfiltered_bDataC = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title &&\n           \"Value\" == dataBLC.View;\n})\ndataBTT = transpose(boardTable)\nfiltered_bDataT = dataBTT.filter(function(dataBTT) {\n    return bPlotSelect == dataBTT.Title;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n            const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_bDataT.map(row =&gt; {\n            const isBold = row['Mode'] === 'Total';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"Mode\", \"Model\", \"Observed\", \"Difference\", \"% Difference\"].map((d, i) =&gt; {\n                    const widths = ['90px', '60px', '70px', '75px', '90px']; // Define the widths\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widths[i]}; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${row[d]}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(bChart.scales.color, {title: \"Data Source\"})\n\nbChart = GroupedBarChart(filtered_bDataC, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'],\n    yLabel: \"Value\",\n    zDomain: ['Model','Observed'],\n    width: 500,\n    height: 225,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_bData2 = dataBLC.filter(function(dataBLC) {\n    return bPlotSelect == dataBLC.Title  &&\n           metric == dataBLC.View;\n})\n\n//https://observablehq.com/@d3/diverging-bar-chart\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nchart3 = DivergingBarChart(filtered_bData2, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.Mode,\n    xFormat: metric === \"Difference\" ? \"+,d\" : \"+%\",\n    xLabel: \"Model vs Observed Differences\",\n    height: 200,\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell = 1\n\n\n\n\n\n\nFigure 1: Transit Trips and Boardings Model vs Observed Comparison\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\nWhen considering Trips by Hierarchical Mode, the calibration routine of the model results in the total number of transit trips in the model being very close to the observed. For this model the model trips are only 0.1% higher than observed for the total number of trips. By mode the differences are within reasonable ranges for the higher trip modes. For example, LRT is only 0.3% high and CRT is only 0.1% low.\nDue to the very low number of trips for Core Bus and Express Bus, their differences are acceptable. Currently, Core Bus for example has only one route. In future phases of the RTP, additional Core Bus service is planned. While further calibration could have brought the Core Bus validation more in line with observed, over-calibrating the model was not desired.\nBoardings by Hierarchical Mode show a similar pattern. Overall boardings are only 1.9% lower in model compared to observed, and the modes Local Bus, LRT, and CRT all within 5%. Core Bus is again the furthest away, but it also is a single route with lower number of boardings as compared to the higher boarding modes.\nThe Transfer Ratio by Hierarchical Mode shows the relationship between the trips and the boardings. While the model was only slightly higher in trips, the boardings were low. This results in a lower transfer ratio, which is still acceptable with all values being within about 5%.\nAnd for comparison, Boardings by Mode Surveyed shows acceptable differences. The Core Bus and Express Bus values show much larger differences; but again given their low volumes, these are reasonable differences."
  },
  {
    "objectID": "v9x/v901/validation/3-modechoice.html#mode-share",
    "href": "v9x/v901/validation/3-modechoice.html#mode-share",
    "title": "Mode Choice",
    "section": "Mode Share",
    "text": "Mode Share\nMode Share validation is shown through the comparison by groups of mode, time period, and trip purpose. For model and observed shares, the total percent for each combination of mode group, time period, and trip purpose adds up to 100%.\nMode groups compared include groupings of auto, transit, vehicle occupancy, and transit modes. The highest nest is motorized and non-motorized down to lower nests of individual transit modes and transit access modes. Shares were calculated for the following mode groupings:\n\nMotorized / Non-Motorized\nAuto / Transit\nDrive Alone / Shared Ride\nShared Ride # of Occupants\nTransit Mode\nTransit Access Mode\n\nAdditionally, the shares were compared by the following time period groupings:\n\nDaily\nPeak\nOff-peak\n\nFinally, the shares were further compared for each of the following trip purposes:\n\nAll Purposes\nHome-Based Work\nHome-Based College\nHome-Based Other\nNon-Home Based\n\nIn the model, Home-Based College is the only trip purpose that does not include trips in the off-peak time period. So, any trips with this purpose in the observed data were moved to the peak time period for comparison.\nThe interactive Figure 2 allows for selecting of different combinations to visualize the comparisons. The observed data comes from a combination of the Household Travel Survey and the 2019 Transit On-Board Survey.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof plotSelect    = Inputs.select(new Map([[nameModeMnMShare,nameModeMnMShare],\n                                              [nameModeATShare ,nameModeATShare ],\n                                              [nameModeDAShare ,nameModeDAShare ],\n                                              [nameMode23Share ,nameMode23Share ],\n                                              [nameModeTransit ,nameModeTransit ],\n                                              [nameModeAccess  ,nameModeAccess  ]\n                                             ]), {value: nameGroup, label: \"Mode Group:\"})\nviewof periodSelect  = Inputs.select(new Map([['Daily', 'DY'], ['Peak', 'PK'], ['Off-Peak', 'OK']]), {value: namePeriod, label: \"Time Period:\"});\nviewof purposeSelect = Inputs.select(new Map([['All Purposes', 'All'], ['Home-Based Work', 'HBW'], ['Home-Based College', 'HBC'], ['Home-Based Other', 'HBO'], ['Non-Home Based', 'NHB']]), {value: 'TripPurpose', label: \"Trip Purpose:\"});\n\ndataLT = transpose(dataLong)\ndataTT = transpose(dataTable)\n\nfiltered_data = dataLT.filter(function(dataL) {\n    return plotSelect == dataL.Group &&\n           periodSelect == dataL.Period &&\n           purposeSelect == dataL.TripPurpose;\n})\ntable_filtered_data = dataTT.filter(function(dataTT) {\n    return plotSelect == dataTT.Group &&\n           periodSelect == dataTT.Period &&\n           purposeSelect == dataTT.TripPurpose;\n})\n\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\nxDomain = {\n    switch(plotSelect) {  // assuming all data points have the same Mode\n        case nameModeMnMShare:\n            return ['Motorized', 'Non-Motorized'];\n            break;\n        case nameModeATShare:\n            return ['Auto', 'Transit'];\n            break;\n        case nameModeDAShare:\n            return ['Drive Alone', 'Shared Ride'];\n            break;\n        case nameMode23Share:\n            return ['Shared Ride 2 Occupants', 'Shared Ride 3+ Occupants'];\n            break;\n        case nameModeTransit:\n            return ['Local Bus', 'Core Bus', 'Express Bus', 'BRT', 'LRT', 'CRT'];\n            break;\n        case nameModeAccess:\n            return ['Walk', 'Drive'];\n            break;\n        default:\n            return [];  // or set some sensible default\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;br/&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[plotSelect, \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n        html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${d}&lt;/th&gt;`)}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    ${table_filtered_data.map(row =&gt; html`\n        &lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n        ${[\"Mode\", \"Model\", \"Observed\", \"Difference\"].map((d, i) =&gt; \n            html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; ${i === 0 ? \"width: 185px;\" : \"\"}'&gt;${row[d]}&lt;/td&gt;`)}\n        &lt;/tr&gt;`)}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Mode,\n    y: d =&gt; d.Percent,\n    z: d =&gt; d.DataSource,\n    xDomain: xDomain,\n    yLabel: \"Percent\",\n    yDomain: [0,1],\n    zDomain: ['Model','Observed'],\n    width: 400,\n    height: 250,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbEmtptyCell=1\n\n\n\n\n\n\nFigure 2: Model vs Observed Mode Shares by Mode Group, Time Period, and Trip Purpose\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;br/&gt;`\n\n\n\n\n\n\n\nThe Motorized / Non-motorized grouping of model shares are within 0.2% of the observed data for the daily time period and all trip purposes with non-motorized shares being slightly higher than observed and motorized shares being slightly lower. The model shares for additional combinations of time period and purpose are all within 0.5%.\nThe Transit Mode group of model shares are also close to observed with all modes for all time periods and trip purposes. At the Daily time period for all purposes, Local Bus has slightly higher share at 1.5% compared to observed than other modes, such as CRT that is 0.3% lower than observed and LRT that is 0.2% lower than observed. Nearly all the model shares for Transit Mode combinations of time period and are within 5% of observed. The one exception is Home-Based Other which in the peak period for Local Bus is 5.5% higher than observed. Transit Access Mode model shares are all within 5% of observed shares."
  },
  {
    "objectID": "v9x/v901/validation/4-assignhwy.html",
    "href": "v9x/v901/validation/4-assignhwy.html",
    "title": "Highway Assignment",
    "section": "",
    "text": "Validation of final highway assignment was done comparing model outputs from the final loaded networks with observed data. The comparisons were done with volumes and speeds."
  },
  {
    "objectID": "v9x/v901/validation/4-assignhwy.html#volumes",
    "href": "v9x/v901/validation/4-assignhwy.html#volumes",
    "title": "Highway Assignment",
    "section": "Volumes",
    "text": "Volumes\nThe validation results for the Highway Assignment portion of the model are shown in this section. The observed data for 2019 volumes is taken from the Utah Department of Transportation (UDOT) Average Annual Daily Traffic (AADT) History and associated with their respective model segments. The traffic model data is taken from segment summary report for the 2019 base year model: v901_SE19_Net19_Summary_SEGID.csv. The results are divided into three sections:\n\nSummary Comparison\nDetailed Comparison\nMap Comparison\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Comparison\nThe summary comparison shows region and county-wide differences between model and observed for Average Daily Volume and Vehicle-Miles Traveled (VMT) by vehicle type. The values for Box Elder and Weber counties are only the portions within the MPO planning area. Validation was checked comparing the average daily volume at the region and county levels. Figure 1, below, contains an interactive view of model vs observed differences by roadway class and vehicle type.\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bSummaryFuncClass = Inputs.select(new Map([['All Roadways','All Roadways'], ['Freeway','Freeway'], ['Principal','Principal'], ['Minor', 'Minor'], ['Collector', 'Collector']]), {value: 'All Roadways', label: \"Roadway Class:\"})\nviewof bSummaryVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\nviewof bSummaryDiffType = Inputs.select(new Map([['Percent Difference','DiffPct'], ['Difference','Diff']]), {value: 'DiffPct', label: \"Display:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nvolDiffLongT = transpose(volDiffLong)\nvmtDiffLongT = transpose(vmtDiffLong)\n\nvolDiffLongT_filtered = volDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vol' + bSummaryDiffType) == dataL.View);\n})\nvmtDiffLongT_filtered = vmtDiffLongT.filter(function(dataL) {\n    return bSummaryFuncClass == dataL.funcClass &&\n           bSummaryVehType == dataL.vehType &&\n           (('vmt' + bSummaryDiffType) == dataL.View);\n})\n\nvvp = transpose(vvpct)\nvvpL = transpose(vvpctLong)\nvvaL = transpose(vvabsLong)\nvvaLR = transpose(vvabsLongR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {DivergingBarChart} from \"@d3/diverging-bar-chart\"\n\nfunction getXDomainVol(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_volDiff * -1, max_abs_value_volDiff];\n    } else {\n        //return [max_abs_value_volDiffPct * -1, max_abs_value_volDiff]; // -100% to 100%\n        return [-100, 100]\n    }\n}\n\nfunction getXDomainVmt(bSummaryDiffType) {\n    if (bSummaryDiffType === \"Diff\") {\n        return [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff];\n    } else {\n        //return [max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiff]; // -100% to 100%\n        return [-1,1]\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Average Daily Volume&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVolDiff = DivergingBarChart(volDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_volDiff * -1, max_abs_value_volDiff] : [-1, 1], //[max_abs_value_volDiffPct * -1, max_abs_value_volDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;&lt;h4&gt;Vehicle-Miles Traveled&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nchartVmtDiff = DivergingBarChart(vmtDiffLongT_filtered, {\n    x: d =&gt; d.ViewValue,\n    y: d =&gt; d.coFips,\n    xFormat: bSummaryDiffType === \"Diff\" ? \"+,d\" : \"+.1%\",\n    xLabel: \"Model vs Observed Differences\",\n    width: 440,\n    xDomain: bSummaryDiffType === \"Diff\" ? [max_abs_value_vmtDiff * -1, max_abs_value_vmtDiff] : [-1, 1], //[max_abs_value_vmtDiffPct * -1, max_abs_value_vmtDiffPct],\n    yDomain:  ['Region','Box Elder County - WFRC','Weber County - WFRC','Davis County','Salt Lake County','Utah County'],\n    colors: d3.schemeRdBu[3]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell1 = 1\n\n\n\n\n\n\nFigure 1: Highway Assignment Summary Comparison\n\n\n\nAt the region level model volume is 0.4% lower than observed volume. The four more urban counties (Weber, Davis, Salt Lake, and Davis) were all within 5% of observed volumes with Salt Lake County being the closest. Weber and Davis were slightly lower and Utah County was slightly higher. Box Elder County is more rural than the other counties. Box Elder model volumes are about 10% lower than observed. Time did not allow for further calibration of the volumes in Box Elder area to account for the larger differences.\nOne important observation at the Collector and All Vehicles level is that Utah County shows a much higher difference than the other counties. Upon further investigation of observed Collector volumes in Utah County, many roadway segments had very low volumes compared to what was expected. Utah County is one of the highest growth areas in the region. For this reason, we expect that the observed count data may be underrepresenting actual volumes. We also anticipate observed volumes in Utah County to improve in the near-term. Within the last several years, a large investment in continuous count station in Utah County has been made. The new counters will add additional information to generate observed volumes for all roadway segments.\nThe largest differences in model vs observed volumes occur in the Medium Truck and Heavy Truck vehicle types. A good amount of time was spent attempting to bring model truck volumes closer to observed. However, due to the limited data sources for truck information, further need to investigate observed truck volumes, and a desire to not over-calibrate the model, further calibration was stopped. Truck modeling remains a future priority for model improvement.\n\n\nDetailed Comparison\nThe model vs observed details in this section are presented by volume and Vehicle-Miles Traveled (VMT) through the comparison of model and observed data facility type by region and also by county. Figure 2 allows for the interactive visual comparison of model and observed values for the region and each county for all vehicles, cars, medium trucks, and heavy trucks. The comparisons are shown in four different types of charts and tables:\n\nAverage Daily Volume by Roadway Class (2a): The daily volume is averaged across all segments within their respective geography and vehicle type.\nTotal VMT by Roadway Class (2b): For each segment*, the daily volume is multiplied by segment distance and then summed across all segments within their respective geography and vehicle type.\nModel vs Count Segment Volume (2c): This is a scatter plot of segment daily volume with the x-axis as the observed volume and the y-axis as the model volume. The red line shows the location of where model and observed volumes are equal. The dashed blue line shows a least-squares linear regression. The further the blue line moved away from the red line, the further the model is from observed.\nSegment Percent Error (2d): This is a scatter plot showing the amount of error (percent difference) between the observed volume and the model volume. The observed volume is the x-axis and the percent error is the y-axis. The red lines are a bounding box that shows the control target. As volume increases, it is expected that the percent error should decrease.\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof bCountySelect = Inputs.select(new Map([['Region', 'Region'], ['Box Elder County - WFRC',3], ['Weber County - WFRC',57], ['Davis County',11], ['Salt Lake County',35], ['Utah County',49]]), {value: 'All', label: \"Geography:\"})\nviewof bVehType = Inputs.select(new Map([['All Vehicles','All Vehicles'], ['Passenger Cars', 'Passenger Cars'], ['Medium Trucks','Medium Trucks'], ['Heavy Trucks','Heavy Trucks']]), {value: 'All Vehicles', label: \"Vehicle Type:\"})\n\nsortOrder = ['Freeway', 'Principal', 'Minor', 'Collector', 'All Roadways'];\n\nvolT = transpose(vol)\nvmtT = transpose(vmt)\nfiltered_volData = volT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtData = vmtT.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\nvolTL = transpose(volLong)\nvmtTL = transpose(vmtLong)\nfiltered_volDataL = volTL.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\nfiltered_vmtDataL = vmtTL.filter(function(dataL){\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n}).sort((a, b) =&gt; sortOrder.indexOf(a.funcClass) - sortOrder.indexOf(b.funcClass));\n\n\nallvehplotT = transpose(allvehplot)\nfiltered_allvehplotData = allvehplotT.filter(function(dataL) {\n    return bCountySelect == dataL.coFips &&\n           bVehType == dataL.vehType;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfunction formatNumber(value, isPercentage=false) {\n    if (typeof value === 'undefined') {\n        return '';  // or return a default value or message\n    }\n    \n    if (isPercentage) {\n        return (Number(value) * 100).toFixed(1) + '%';\n    }\n    return Number(value.toFixed(0)).toLocaleString();\n}\n\nwidthsVol = ['100px', '52px', '70px', '70px', '73px', '73px', '63px', '63px']; // Define the widths\nwidthsVmt = ['100px', '88px', '88px', '88px', '88px'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2a. Average Daily Volume by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"# Segs\", \"Volume\", \"Observed\", \"Difference\", \"Percent Difference\", \"RMSE\", \"Percent RMSE\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVol[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_volData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"numSegs\", \"volMod\", \"volObs\", \"volDiff\", \"volDiffPct\", \"volRmse\", \"volRmsePct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 5 || i === 7) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 4) || i==6) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVol = Legend(bChartVol.scales.color, {title: \"Data Source\"})\n\nbChartVol = GroupedBarChart(filtered_volDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"Volume (thousands)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`\n&lt;h4&gt;2b. Total Daily VMT by Roadway Class&lt;/h4&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        ${[\"Roadway Class\", \"Model\", \"Observed\", \"Difference\", \"Percent Difference\"].map((d, i) =&gt; {\n            return html`&lt;th style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; width: ${widthsVmt[i]};'&gt;${d}&lt;/th&gt;`;\n        })}\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ${filtered_vmtData.map(row =&gt; {\n            const isBold = row['funcClass'] === 'All Roadways';\n            return html`&lt;tr style='border-bottom: 1px solid lightgrey;'&gt;\n                ${[\"funcClass\", \"vmtMod\", \"vmtObs\", \"vmtDiff\", \"vmtDiffPct\"].map((d, i) =&gt; {\n                    // Check if the current cell is one of the numeric columns that need formatting\n                    let formattedValue;\n                    if (i === 4 || i === 6) {\n                        formattedValue = formatNumber(row[d], true);  // True for percentage formatting\n                    } else if ((i &gt;= 1 && i &lt;= 3) || i==5) {\n                        formattedValue = formatNumber(row[d]);\n                    } else {\n                        formattedValue = row[d];\n                    }\n                    return html`&lt;td style='text-align: ${i === 0 ? \"left\" : \"right\"}; padding: 5px; font-weight: ${isBold ? 'bold' : 'normal'};'&gt;${formattedValue}&lt;/td&gt;`;\n                })}\n            &lt;/tr&gt;`;\n        })}\n    &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;&nbsp;&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nkeyVmt = Legend(bChartVmt.scales.color, {title: \"Data Source\"})\n\nbChartVmt = GroupedBarChart(filtered_vmtDataL, {\n    x: d =&gt; d.funcClass,\n    y: d =&gt; d.ViewValue,\n    z: d =&gt; d.DataSource,\n    xDomain: ['Freeway','Principal','Minor','Collector','All Roadways'],\n    yLabel: \"VMT (millions)\",\n    zDomain: ['Model','Observed'],\n    width: 320,\n    height: 175,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {max} from 'd3-array';\n\n\n\n\n\n\n\n\n\nCode\nmaxVal = {\n  return Math.max(\n    d3.max(filtered_allvehplotData, d =&gt; d.volObs),\n    d3.max(filtered_allvehplotData, d =&gt; d.volMod)\n  );\n}\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2c. Model vs Observed Volumes&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Model Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.link([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x1: 0,\n      y1: 0,\n      x2: maxVal,\n      y2: (k) =&gt; maxVal * k,\n      strokeOpacity: (k) =&gt; k === 1 ? 1 : 0.2,\n      stroke: \"red\",\n      strokeWidth: (k) =&gt; k === 1 ? 2 : 1.5\n    }),\n    Plot.text([0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4], {\n      x: maxVal,\n      y: (k) =&gt; maxVal * k,\n      text: ((f) =&gt; (k) =&gt; k === 1 ? \"Equal\" : f(k - 1))(d3.format(\"+.0%\")),\n      textAnchor: \"start\",\n      dx: 6\n    }),\n    Plot.linearRegressionY(filtered_allvehplotData, {\n        x: \"volObs\",\n        y: \"volMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;2d. Segment Percent Error&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Volume (thousands)\",\n    domain: [0, maxVal]\n  },\n  y: {\n    label: \"Percent Error\",\n    domain: [-2, 2],\n    tickFormat: d3.format(\".0%\")\n  },\n  marks: [\n    Plot.dot(filtered_allvehplotData, {\n      x: \"volObs\",\n      y: \"volErrorPct\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.ruleY([2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: 1,\n      y2: 2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: 0.5,\n      y2: 1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: 0.25,\n      y2: 0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: 0.20,\n      y2: 0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: 0.15,\n      y2: 0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: 0.10,\n      y2: 0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-2], {\n      x1: 0,\n      x2: 1,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([1], {\n      y1: -1,\n      y2: -2,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-1], {\n      x1: 1,\n      x2: 2.5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([2.5], {\n      y1: -0.5,\n      y2: -1.0,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.5], {\n      x1: 2.5,\n      x2: 5,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([5], {\n      y1: -0.25,\n      y2: -0.50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.25], {\n      x1: 5,\n      x2: 10,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([10], {\n      y1: -0.20,\n      y2: -0.25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.20], {\n      x1: 10,\n      x2: 25,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([25], {\n      y1: -0.15,\n      y2: -0.20,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.15], {\n      x1: 25,\n      x2: 50,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleX([50], {\n      y1: -0.10,\n      y2: -0.15,\n      stroke: \"red\",\n      strokeWidth: 2\n    }),\n    Plot.ruleY([-0.10], {\n      x1: 50,\n      x2: 300,\n      stroke: \"red\",\n      strokeWidth: 2\n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntbEmptyCell2 = 1\n\n\n\n\n\n\nFigure 2: Detailed Model vs Observed Comparison of Highway Assignment\n\n\n\n\n\nMap Comparison\nThe maps in Figure 3 shows a comparison of segment level model vs observed volumes by vehicle types. Blue represents model lower than observed and red represent model volume higher than observed.\n\n\n\nFigure 3: Segment-Level Model vs Observed Volume Comparison by Vehicle Type\n\n\nLooking at the All Vehicles map, the model volumes are lower than observed for by more than 15,000 vehicles per day for the east side of I-215 and for I-15 through northern Utah County. Model volumes are higher than observed volumes by more than than 15,000 vehicles for I-15 in southern Salt lake County and for I-15 in Utah County between Springville and Spanish Fork. When looking at these areas by vehicle type, the drop in Cars and Light Trucks are actual greater since the Medium Trucks and Heavy Trucks in these areas are greater in the model vs observed. Outside of these areas, the volume differences between model and observed are relatively minor.\nThe lower arterial model vs observed volumes of Heavy Trucks on 9000 South in Salt Lake County was further investigated. The Heavy Truck observed volume for this roadway seemed much higher than expected for this roadway. The lower volumes are likely due to the observed data and not anything in the model."
  },
  {
    "objectID": "v9x/v901/validation/4-assignhwy.html#speeds",
    "href": "v9x/v901/validation/4-assignhwy.html#speeds",
    "title": "Highway Assignment",
    "section": "Speeds",
    "text": "Speeds\nComparisons were made between model and observed for a sample of OD pairs. Observed speeds come from sampled data at various time periods in 2019 for the WFRC area using the Google API for reported travel times between coordinates for an origin and destination. Model speeds come from the final network skims that report travel times between all TAZs in the model for each period of the day. The two data sets were joined using a coordinate to TAZ spatial join to locate Google end points to match their respective TAZ.\n\n\n\n\n\n\n\nCode\nhtml`&lt;br/&gt;`\n\n\n\n\n\n\n\n\n\nCode\nviewof vPeriod = Inputs.select(new Map([['AM','AM'], ['Midday','MD'], ['PM','PM'], ['Evening', 'EV']]), {value: 'AM', label: \"Period:\"})\n\nspeedT = transpose(speed)\n\nspeedT_filtered = speedT.filter(function(dataSpd) {\n    return vPeriod == dataSpd.Period;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;h4&gt;Model vs Observed Speeds&lt;/h4&gt;`\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  width: 460,\n  height: 300,\n  marginRight: 40,\n  x: {\n    label: \"Observed Speed (mph)\",\n    domain: [0, 70]\n  },\n  y: {\n    label: \"Model Speed (mph)\",\n    domain: [0, 70]\n  },\n  marks: [\n    Plot.dot(speedT_filtered, {\n      x: \"spdObs\",\n      y: \"spdMod\",\n      r: 1,\n      fill: \"rgb(80, 116, 230)\",\n      fillOpacity: 0.5,\n      stroke: \"none\"\n    }),\n    Plot.linearRegressionY(speedT_filtered, {\n        x: \"spdObs\",\n        y: \"spdMod\",\n        stroke: \"rgb(80, 116, 230)\",\n        strokeDasharray: \"4 4\",  // This creates a dashed line pattern,\n        strokeWidth: 2 \n    })\n  ]\n})\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "v9x/v901/whats-new/1-overview.html",
    "href": "v9x/v901/whats-new/1-overview.html",
    "title": "Overview",
    "section": "",
    "text": "Version 9.0.1 is a minor update to the Wasatch Front Travel Demand Model. The model processes and parameters are the same as version 9.0.0. Minor changes were made to a few of the primary input files and to the model scripts. These changes were primarily to fix issues in data and calculations or to further enhance the model’s capability or reporting. It is not anticipated that the changes made to the model would affect project decisions. However, model users should verify this for individual projects.\nChanges to the model inputs in version 9.0.1 include minor updates made to the TAZ shapefile and transit networks. More significant updates were made to the highway network and segment shapefile. The updates to the highway network include changing the network geometry and link/node structure to align with the updated planning segments, correcting issues in project coding and zone connection, and general maintenance. The updates to the segment shapefile include additional segments, deleted segments, field reordering, and various segment realignments. Because of the large number of edits made to the highway network link/node structure and to the segment shapefile, network and segment related reporting in version 9.0.1 are not backward compatible with version 9.0.0.\nChanges made to the model scripts in version 9.0.1 include edits for minor issue resolution, file renaming, and various cleanup items meant to improve the model’s capability and cleanliness."
  },
  {
    "objectID": "v9x/v901/whats-new/2-input-files.html",
    "href": "v9x/v901/whats-new/2-input-files.html",
    "title": "Changes to Input Files",
    "section": "",
    "text": "The following attributes in the TAZ shapefile were updated (note, TAZ geometry and numbering were unchanged).\nCity Name\n\nThe value “Mill Creek” was replaced with “Millcreek” in the CITY_NAME field\nThe CITY_UGRC and CITY_FIPS fields were updated to be consistent with CITY_NAME\nA new City district shapefile was created based on updated the city name and ID fields\n\nDevelopable Acres\n\nThe DEVACRES and DEVPBLEPCT fields were set to 0 in TAZs with no developable land. A new point shapefile, undevelopable-points_WF.shp, was added to the 1_Inputs\\1_TAZ\\_Source\\EnvConstraints folder to keep track of these override undevelopable TAZs. Figure 1 shows which TAZs had their fields set to 0.\n\n\n\nCode\nL = require('leaflet@1.2.0')\nhtml`&lt;link href='${resolve('leaflet@1.2.0/dist/leaflet.css')}' rel='stylesheet' /&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngeojsonTaz    = FileAttachment(\"data/WFv901_TAZ_20240412.geojson\"   ).json()\n\n\n\n\n\n\n\n\n\n\n\nCode\nmapTazUndvp= {\n\n  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });\n  yield container;\n  \n  let map = L.map(container).setView([40.7608, -111.8910], 8.25);\n\n  let greyLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n  }).addTo(map);\n\n  let tazColors = ['#00887F'   ,'#BD0026'       ]\n  let tazLabels = ['Developable Space','Undevelopable Space'];\n  \n  let lyrTAZNew = L.geoJson(geojsonTaz, {\n                            style: function(feature) {\n                              var d = feature.properties.DEVPBLEPCT;\n                              return d&gt;0  ? {color:tazColors[0], weight:1, opacity:0.95} :\n                                     d==0 ? {color:tazColors[1], weight:1, opacity:0.95} : \n                                            {color:    '#000000', weight:1, opacity:0.95} ;\n                            }\n  }).addTo(map);\n  \n  var legend = L.control({position: 'bottomleft'});\n  legend.onAdd = function (map) {\n    var div = L.DomUtil.create('div', 'legend');\n    div.innerHTML = '';\n    for (var i = 0; i &lt; tazLabels.length; i++) {\n      div.innerHTML += '&lt;i style=\"background:' + tazColors[i] + '\"&gt;&nbsp;&lt;/i&gt; ' + tazLabels[i] + '&lt;br/&gt;';\n    }\n\n    // Add CSS style for the background color\n    div.style.backgroundColor = 'lightgray';\n    div.style.padding = '10px';\n    \n    return div;\n  };\n  legend.addTo(map);\n}\n\n\n\n\n\n\nFigure 1: TAZs with Undevelopable Acres\n\n\n\n\n\n\nThe TAZ shapefile was renamed from TAZ.shp to WFv901_TAZ_{date-stamp}.shp to comply with the new model file naming convention determined by the Interagency Modeling Technical Committee (IMTC). The TAZ_DBF variable was updated in the Scenarios\\_default\\ControlCenter.block files."
  },
  {
    "objectID": "v9x/v901/whats-new/2-input-files.html#traffic-analysis-zone",
    "href": "v9x/v901/whats-new/2-input-files.html#traffic-analysis-zone",
    "title": "Changes to Input Files",
    "section": "",
    "text": "The following attributes in the TAZ shapefile were updated (note, TAZ geometry and numbering were unchanged).\nCity Name\n\nThe value “Mill Creek” was replaced with “Millcreek” in the CITY_NAME field\nThe CITY_UGRC and CITY_FIPS fields were updated to be consistent with CITY_NAME\nA new City district shapefile was created based on updated the city name and ID fields\n\nDevelopable Acres\n\nThe DEVACRES and DEVPBLEPCT fields were set to 0 in TAZs with no developable land. A new point shapefile, undevelopable-points_WF.shp, was added to the 1_Inputs\\1_TAZ\\_Source\\EnvConstraints folder to keep track of these override undevelopable TAZs. Figure 1 shows which TAZs had their fields set to 0.\n\n\n\nCode\nL = require('leaflet@1.2.0')\nhtml`&lt;link href='${resolve('leaflet@1.2.0/dist/leaflet.css')}' rel='stylesheet' /&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngeojsonTaz    = FileAttachment(\"data/WFv901_TAZ_20240412.geojson\"   ).json()\n\n\n\n\n\n\n\n\n\n\n\nCode\nmapTazUndvp= {\n\n  let container = DOM.element('div', { style: `width:${width}px;height:${width/1.6}px` });\n  yield container;\n  \n  let map = L.map(container).setView([40.7608, -111.8910], 8.25);\n\n  let greyLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors'\n  }).addTo(map);\n\n  let tazColors = ['#00887F'   ,'#BD0026'       ]\n  let tazLabels = ['Developable Space','Undevelopable Space'];\n  \n  let lyrTAZNew = L.geoJson(geojsonTaz, {\n                            style: function(feature) {\n                              var d = feature.properties.DEVPBLEPCT;\n                              return d&gt;0  ? {color:tazColors[0], weight:1, opacity:0.95} :\n                                     d==0 ? {color:tazColors[1], weight:1, opacity:0.95} : \n                                            {color:    '#000000', weight:1, opacity:0.95} ;\n                            }\n  }).addTo(map);\n  \n  var legend = L.control({position: 'bottomleft'});\n  legend.onAdd = function (map) {\n    var div = L.DomUtil.create('div', 'legend');\n    div.innerHTML = '';\n    for (var i = 0; i &lt; tazLabels.length; i++) {\n      div.innerHTML += '&lt;i style=\"background:' + tazColors[i] + '\"&gt;&nbsp;&lt;/i&gt; ' + tazLabels[i] + '&lt;br/&gt;';\n    }\n\n    // Add CSS style for the background color\n    div.style.backgroundColor = 'lightgray';\n    div.style.padding = '10px';\n    \n    return div;\n  };\n  legend.addTo(map);\n}\n\n\n\n\n\n\nFigure 1: TAZs with Undevelopable Acres\n\n\n\n\n\n\nThe TAZ shapefile was renamed from TAZ.shp to WFv901_TAZ_{date-stamp}.shp to comply with the new model file naming convention determined by the Interagency Modeling Technical Committee (IMTC). The TAZ_DBF variable was updated in the Scenarios\\_default\\ControlCenter.block files."
  },
  {
    "objectID": "v9x/v901/whats-new/2-input-files.html#highway-network",
    "href": "v9x/v901/whats-new/2-input-files.html#highway-network",
    "title": "Changes to Input Files",
    "section": "Highway Network",
    "text": "Highway Network\n\nNetwork Changes due to Segment Shapefile Updates\nThe highway network was updated to coincide with the updates made to the segment shapefile (see the Segment Shapefile section of this report). Primarily, these changes consisted of adding nodes, splitting links, and updating the SEGID link field. However, a few new corridors were added to the network and some link/nodes positions were changed to better align with the segment shapefile. The edits made to the network node and link geometry to accommodate desired segment updates constitute the vast majority of the geometric changes made to the network in version 9.0.1. Because of the large number of edits made to the highway link-node structure, the version 9.0.1 highway network is not backward compatible with version 9.0.0 highway network.\nThe complexity of the frontage road system in the highway network in future scenarios caused the value in the SEGID field to not be unique for all scenarios. To allow for a link’s SEGID to change between scenarios, a set of SEGID exception fields were added to the Master Network. When SEGID changes in a scenario, the new SEGID is coded into the scenario’s corresponding SEGID exception field. This will trigger an override of the SEGID calculation in the network processor script. Blank values use the primary SEGID field, i.e. no override. The field names for the SEGID exception field set follow the naming convention used for the lane and functional type field set:\n\nBase and TIP years\n\nSGX_2019\nSGX_2023\n\nSGX_2028\n\nFiscally Constrained Plan years\nSGX23_32\nSGX23_42\nSGX23_50\n\nUnfunded Need Plan years\n\nSGX23_32UF\nSGX23_42UF\nSGX23_50UF\n\n\nA new variable, SegIdExField, was added to the 1ControlCenter.block file to select which SEGID exception field to use in the scenario.\n\n\nGeneral Maintenance & Corrections\nClean up work was done to the highway network to fix errors or to do general maintenance. Below is a list of specific changes made to the highway network. Note that the project list coded into the v9.0.1 highway network represents the Regional Transportation Plans adopted May 2023.\nNodes\n\nMAG_NODE field was corrected for 16 nodes\nGEOGKEY field was corrected in 10 instances\nThe PNR fields were updated for two nodes at the Tooele express bus park and ride location where PNR values were set to 0.\n\nLinks\n\nUpdated connections to TAZ 90 and removed 1500 S in Brigham City between 775 W and Hwy 89 (not yet existing or planned in future phases)\nConnected 4600 S from Harrison Blvd to Skyline Drive south of Weber St Campus\nUpdated connection for West Weber Corridor to Hwy 89 and corrected some centroid connections\nRemoved Arsenal Rd in HAFB from 2015-2028 and left connections in TAZs 647, 632, and 655 to the base to the east only\nUpdated I-15 Northbound from Park Ln to 200 N to reflect 4 lanes\nUpdated West Davis/West Weber corridor north of SR 193 to a functional type of 12\nFixed Shephard Ln disconnect\nTurned off link for 400 N / North St where it does not yet cross the rail tracks\nRemoved floating link on 700 S just west of 3000 W in West Pointe\nUpdated 4700 S westbound from 4000 W to 4800 to reflect 2 lanes\nAdjusted the 7400 South from Oquirrh Blvd to MVC RTP Project to be a grade separated crossing at MVC instead of at-grade\nTurned on Herriman Phase 1 project at Silver Sky Dr\nAdded in 520 W (Seg ID 3440_005.8) between 400 N and 2nd St\nAdded in 3200 W from 2100 N to 3500 N and 3500 N from 3200 W to 2200 W (Scannell Swaner development)\nAdded in 4420 W between 4700 W and 5400 S (used Seg ID from UDOT)\nTurned on links for 3800 S between 220 W and 1700 W\nAdded in 3785 S between 6400 W and 7200 W\nAdded in 6000 W between 3500 S and 4100 S\nRemoved local connection between 11800 S and Lake Ave at MVC\nRemoved local connection between 14600 S and 14400 S at Redwood Rd\nAligned Doubleday and Sunrise Ranch in Mapleton with existing roads\nTurned on Ring Road links in Saratoga Springs to match existing conditions\nTurned off 2023 road between Pony Express Parkway and Temple Area (non-foothill)\nFixed network in Saratoga and Eagle Mountain to match existing roadway network\nExtended Foothill frontage roads down to Lariat Blvd in Saratoga Springs\nTurned on Sunset Drive in Eagle Mountain for 2019, 2023, and 2028\nTurned on Mt Airey Drive in Eagle Mountain for 2019, 2023, and 2028\nFixed centroid connection to TAZs 42, 260, 1992, 1993, 2005, and 2006 and edited other centroid connectors to fix unconnected zones\nConnected centroid to TAZ 931 to unfunded network\nRealigned links and added links based on UDOT LRS updates on the following corridors:\n\n500 W / 3700 W between Bluff Ridge Blvd and Antelope Dr\nStation Pkwy / Burke Ln between 1525 W and Park Ln\n1525 W between Station Pkwy / Burke Ln and Clark Ln\nNorth Frontage Rd / 8000 W / 1400 N between 7200 W and Utah State Prison and Correctional Facility\nGordon Ave\nCherry Ln\n13200 S between 1300 W and Highland\nHerriman Main St\nPorter Rockwell Blvd\nLayton Pkwy\nHill Field Rd\n2700 W between WDC and Hill Field Rd\n2200 W between Layton Pkwy and 700 S\n1800 S to 2100 S Connector between SR-126 and 2700 W\n3600 S to 3300 S Connector between 2700 W and 3600 W\nDepot St between 700 S and 1000 E\nShadow Valley between SR-203 and Skyline Pkwy\nFrontage Rd between Shepard Ln and Burton Ln\nPetunia Wy, 9800 S, 17000 E collector roads between 9400 S and Sego Lily Dr and 1300 E and Eastdell Dr\nLincoln Ln and 2000 E collector roads between Highland Dr and 2700 E and 3900 S and 4500 S\n\nFixed HOT23_32 through HOT23_50UF fields to correctly reflect the RTP projects from Farmington to the Utah/Salt Lake County line\n\nBetween the edits made to the highway network for the segment shapefile update and the general network maintenance, approximately 150 nodes and 900 links were added to the highway network in version 9.0.1, the bulk of which occurred in Saratoga Springs, Eagle Mountain, Weber County, Holladay, Sandy, and Draper. Figure 2 highlights the locations of the new nodes and links added to the version 9.0.1 network.\n\n\n\nFigure 2: New Highway Nodes & Links (blue)\n\n\n\n\nRename Master Network\nThe master network was renamed from MasterNet_v9 – {date-stamp}.net to WFv901_MasterNet_{date-stamp}.net to comply with the new model file naming convention determined by the Interagency Modeling Technical Committee (IMTC). The MasterPrefix variable was updated in the Scenarios\\_default\\ControlCenter.block files."
  },
  {
    "objectID": "v9x/v901/whats-new/2-input-files.html#transit-networks",
    "href": "v9x/v901/whats-new/2-input-files.html#transit-networks",
    "title": "Changes to Input Files",
    "section": "Transit Networks",
    "text": "Transit Networks\n\nChanges to Transit Line Files\nThe changes made to the transit line files were to make the line files compatible with the highway network geometry edits, primarily where links were split along a transit route. The project list coded into the v9.0.1 transit network represents the Regional Transportation Plans adopted May 2023."
  },
  {
    "objectID": "v9x/v901/whats-new/2-input-files.html#segment-shapefile",
    "href": "v9x/v901/whats-new/2-input-files.html#segment-shapefile",
    "title": "Changes to Input Files",
    "section": "Segment Shapefile",
    "text": "Segment Shapefile\n\nChanges to Segment Attributes and Geometry\nThe segment shapefile was updated extensively to allow for future segment-level processing of the transit results, to develop a more accurate traffic volume forecast, and to correct for compatibility issues with the highway network. Hundreds of new segments were added and many were deleted or adjusted to better reflect the current and future physical roadway. Because of the large number of edits made to the segments, the segment shapefile and any segment reporting in version 9.0.1 are not backward compatible with version 9.0.0.\nOverall, there were approximately 5000 changes to the SEGID value between version 9.0.0 and version 9.0.1. This includes the addition of around 3000 new SEGID values and the renaming of around 2000 SEGID values. SEGID shapefile edits were also reflected in the highway network. Table 1 gives the percentage of SEGID changes by county. The majority of SEGID updates occurred in Utah County followed by Salt Lake County.\n\n\n\n\n\n\n\n\n\nTable 1: Percentage of SEGID Changes by County\n\n\nCounty\nChange in SEGID\n\n\n\n\nBox Elder\n1%\n\n\nWeber\n3%\n\n\nDavis\n6%\n\n\nSalt Lake\n21%\n\n\nUtah\n69%\n\n\n\n\n\n\n\n\nEagle Mountain saw the most SEGID changes (22%), followed by Saratoga Springs (8%), Santaquin (6%), West Jordan (5%), and Payson (5%).\nFigure 3 shows where SEGIDs changes occurred between versions 9.0.0 and 9.0.1 in the model network. This provides a representation of where new and adjusted segments are located in segment shapefile.\n\n\n\nFigure 3: Highway Links and New or Adjusted SEGID Value (blue)\n\n\n\n\nRenamed Segment Shapefile\nThe segment shapefile was renamed from Segments_WF – {date-stamp}.shp to WFv901_Segments_{date-stamp}.shp to comply with statewide naming standards as determined by the Interagency Modeling Technical Committee (IMTC).\n\n\nAdded _Segment Processing Tools Folder\nA new methodology was developed and utilized for updating the segment shapefile. This process is documented in a Jupyter notebook file 0-How-to-Prep-Segments-for-TDM.ipynb located in a new folder 1_Inputs\\6_Segment\\_Segment Processing Tools. In short, this script outlines five steps to be followed when developing new and updated segments.\n\nEnsure consistency between the master network and segment shapefile.\n\nUnique SEGIDs in shapefile.\nCorrect DISTANCE.\nCorrect LRS Segments BMP, EMP, and DISTANCE.\nTDM Network includes all SEGIDs.\nSegment Shapefile includes all SEGIDs.\nCorrect geographic coordinate system.\n\nAdd Geographic Keys onto Segments (SUBAREAID, PLANAREA, CO_FIPS).\nAdd AADTs onto Segments.\nAdd Factors from Continuous Count Station groups.\nAdd final forecasts from forecasts process.\n\nThis new process ensures the segment shapefile is ready for the traffic volume forecasts map, as well as ensures only the needed and relevant attributes are included."
  },
  {
    "objectID": "v9x/v901/whats-new/3-model-enhancements.html",
    "href": "v9x/v901/whats-new/3-model-enhancements.html",
    "title": "Model Enhancements",
    "section": "",
    "text": "The following sections highlight the scripts that were edited in version 9.0.1 and why those edits were made. These changes were primarily to fix issues in data and calculations or to further enhance the model’s capability or reporting. The changes made to the model scripts are minor and should not affect project decisions.\n\n\na_Setup\\1_InputSetup.s\n\nUpdated checking code block to look for SegIdField and SegIdExField variables from control center\nFixed spelling error in log file reporting\n\nc_NetworkProcessing\\1_NetProcessor.s\n\nAdded code block to use SegIdField and SegIdExField variables from control center to populate SEGID link field\nFixed error in operational project capacity calculation to use 10% increase in capacity if Run_Op_Proj control center variable is on and the Op_Proj link field is greater than zero (previous script used the value in the Op_Proj field as a multiplier on capacity)\nFixed error in the HOV_LYEAR usage so calculation is performed on the general purpose links where there is an adjacent HOV/HOT lane (previous script was coded to process HOV/HOT links)\nMiscellaneous edits to clean up script\n\nc_NetworkProcessing\\4_Create_walk_xfer_access_links.s\n\nUpdated code to point to @ScenarioDir@0_InputProcessing\\UpdatedMasterNet\\@MasterPrefix@.net instead of master network from the input folder\nUpdated code to process only internal zones (i.e. exclude external and dummy zones) to fix an error where walk access links were being generated to external/dummy zones\nAdded SEGID, including code to process SEGID exception field, to the rail network export\n\n\n\n\n2_estimateHOTspeedtoll.s\n\nUpdated code so period speeds and times are not greater than free flow (some locations in the assigned output networks displayed HOT speeds greater than free flow)\nRounded free flow and daily speed to 1 decimal and rounded all times to 3 decimals\nNote, similar edits were made in 5_AssignHwy\\04_SummarizeLoadedNetworks.s\n\n\n\n\n11-13_MC_HBW_HBO_NHB_HBC.s\n\nAppended the content of 13_DailyModeSplit.s script to the end of 11_12_MC_HBW_HBO_NHB_HBC.s script\nRenamed 11_12_MC_HBW_HBO_NHB_HBC.s script to 11-13_MC_HBW_HBO_NHB_HBC.s\nDeleted 13_DailyModeSplit.s\nUpdated script references in _HailMary.s, __HailMary_1Subfolder.s, and __HailMary_2Subfolders.s in the Scenarios\\_default folder\n\n\n\n\n02_Assign_AM_MD_PM_EV and 04_SummarizeLoadedNetworks.s\n\nScripts were updated to create additional select link summary statistics and to provide enhanced reporting\nSelect link information are reported for a summary of trip purposes and vehicle classes and time period\nLike other select link data, new select link files are only created if the Use_SelLinkGrp parameter in the control center is set to 1\n02_Assign_AM_MD_PM_EV.s edits:\n\nAdded code to output daily origin-destination (OD) vehicle trip matrices\nAdded code to create a new report, @unloadednetprefix@_SL_Summary.csv located in the scenario 5_AssignHwy\\3_SelectLink folder, that lists row and column sums from the period OD vehicle trips\n\n04_SummarizeLoadedNetworks.s\n\nAdded code to create two new networks, @unloadednetprefix@__SL_TotVolume.net and @unloadednetprefix@__SL_MaxVolume.net located in the scenario _AssignHwy\\2a_Networks folder:\n\nSL_TotVolume.net – shows the percentage of select link volume of each link to total roadway volume of each link\nSL_MaxVolume.net – shows the percent of select link volume of each link to the total (or max) volume of the selected link\n\n\n\n07_PerformFinalNetSkim.s\n\nCode was modified to report no-access time and distance values to be 9999 (previously was 10000)\nCode was updated so in-vehicle times and distances and terminal times are no longer reported for unconnected zones\n\n08_Access_to_Opportunity.s\n\nRenamed output to @RID@_Access_to_Opportunity.csv (was Access_to_Opportunity_@DemographicYear@.csv)\nOutput report moved to 5_AssignHwy\\4_Summaries (was 7_PostProcessing)\nRead in scenario network node file and changed straight line distance calculation to use highway network zone centroid locations\nUpdated script to not report data for unused (dummy) zones and externals\nPerformed miscellaneous edits for general clean up\n\n7_PostProcessing\n\nThe Compare_2Assignments.s and Compare_2MasterNet.s postprocessing scripts were adjusted to change the input network variables from net_compare and net_base to net_1 and net_2, respectively\nCompare_2MasterNet.s fields updated to reflect RTP 2023 scenario years\n\n\n\n\n1ControlCenter - XXXX.block\n\nModified references to model version from v9.0 or v9 to v9.0.1 or v901, respectively\nUpdated input variable references to TAZ shapefile, master highway network, and master link shapefile\nAdded SEGIDField and SEGIDExField variables\n\n_HailMary.s, _HailMary_1Subfolder.s, and _HailMary_2Subfolders.s\n\nRenamed 11_12_MC_HBW_HBO_NHB_HBC.s script to 11-13_MC_HBW_HBO_NHB_HBC.s\nDeleted 13_DailyModeSplit.s"
  },
  {
    "objectID": "v9x/v901/whats-new/3-model-enhancements.html#miscellaneous-script-edits-bug-fixes",
    "href": "v9x/v901/whats-new/3-model-enhancements.html#miscellaneous-script-edits-bug-fixes",
    "title": "Model Enhancements",
    "section": "",
    "text": "The following sections highlight the scripts that were edited in version 9.0.1 and why those edits were made. These changes were primarily to fix issues in data and calculations or to further enhance the model’s capability or reporting. The changes made to the model scripts are minor and should not affect project decisions.\n\n\na_Setup\\1_InputSetup.s\n\nUpdated checking code block to look for SegIdField and SegIdExField variables from control center\nFixed spelling error in log file reporting\n\nc_NetworkProcessing\\1_NetProcessor.s\n\nAdded code block to use SegIdField and SegIdExField variables from control center to populate SEGID link field\nFixed error in operational project capacity calculation to use 10% increase in capacity if Run_Op_Proj control center variable is on and the Op_Proj link field is greater than zero (previous script used the value in the Op_Proj field as a multiplier on capacity)\nFixed error in the HOV_LYEAR usage so calculation is performed on the general purpose links where there is an adjacent HOV/HOT lane (previous script was coded to process HOV/HOT links)\nMiscellaneous edits to clean up script\n\nc_NetworkProcessing\\4_Create_walk_xfer_access_links.s\n\nUpdated code to point to @ScenarioDir@0_InputProcessing\\UpdatedMasterNet\\@MasterPrefix@.net instead of master network from the input folder\nUpdated code to process only internal zones (i.e. exclude external and dummy zones) to fix an error where walk access links were being generated to external/dummy zones\nAdded SEGID, including code to process SEGID exception field, to the rail network export\n\n\n\n\n2_estimateHOTspeedtoll.s\n\nUpdated code so period speeds and times are not greater than free flow (some locations in the assigned output networks displayed HOT speeds greater than free flow)\nRounded free flow and daily speed to 1 decimal and rounded all times to 3 decimals\nNote, similar edits were made in 5_AssignHwy\\04_SummarizeLoadedNetworks.s\n\n\n\n\n11-13_MC_HBW_HBO_NHB_HBC.s\n\nAppended the content of 13_DailyModeSplit.s script to the end of 11_12_MC_HBW_HBO_NHB_HBC.s script\nRenamed 11_12_MC_HBW_HBO_NHB_HBC.s script to 11-13_MC_HBW_HBO_NHB_HBC.s\nDeleted 13_DailyModeSplit.s\nUpdated script references in _HailMary.s, __HailMary_1Subfolder.s, and __HailMary_2Subfolders.s in the Scenarios\\_default folder\n\n\n\n\n02_Assign_AM_MD_PM_EV and 04_SummarizeLoadedNetworks.s\n\nScripts were updated to create additional select link summary statistics and to provide enhanced reporting\nSelect link information are reported for a summary of trip purposes and vehicle classes and time period\nLike other select link data, new select link files are only created if the Use_SelLinkGrp parameter in the control center is set to 1\n02_Assign_AM_MD_PM_EV.s edits:\n\nAdded code to output daily origin-destination (OD) vehicle trip matrices\nAdded code to create a new report, @unloadednetprefix@_SL_Summary.csv located in the scenario 5_AssignHwy\\3_SelectLink folder, that lists row and column sums from the period OD vehicle trips\n\n04_SummarizeLoadedNetworks.s\n\nAdded code to create two new networks, @unloadednetprefix@__SL_TotVolume.net and @unloadednetprefix@__SL_MaxVolume.net located in the scenario _AssignHwy\\2a_Networks folder:\n\nSL_TotVolume.net – shows the percentage of select link volume of each link to total roadway volume of each link\nSL_MaxVolume.net – shows the percent of select link volume of each link to the total (or max) volume of the selected link\n\n\n\n07_PerformFinalNetSkim.s\n\nCode was modified to report no-access time and distance values to be 9999 (previously was 10000)\nCode was updated so in-vehicle times and distances and terminal times are no longer reported for unconnected zones\n\n08_Access_to_Opportunity.s\n\nRenamed output to @RID@_Access_to_Opportunity.csv (was Access_to_Opportunity_@DemographicYear@.csv)\nOutput report moved to 5_AssignHwy\\4_Summaries (was 7_PostProcessing)\nRead in scenario network node file and changed straight line distance calculation to use highway network zone centroid locations\nUpdated script to not report data for unused (dummy) zones and externals\nPerformed miscellaneous edits for general clean up\n\n7_PostProcessing\n\nThe Compare_2Assignments.s and Compare_2MasterNet.s postprocessing scripts were adjusted to change the input network variables from net_compare and net_base to net_1 and net_2, respectively\nCompare_2MasterNet.s fields updated to reflect RTP 2023 scenario years\n\n\n\n\n1ControlCenter - XXXX.block\n\nModified references to model version from v9.0 or v9 to v9.0.1 or v901, respectively\nUpdated input variable references to TAZ shapefile, master highway network, and master link shapefile\nAdded SEGIDField and SEGIDExField variables\n\n_HailMary.s, _HailMary_1Subfolder.s, and _HailMary_2Subfolders.s\n\nRenamed 11_12_MC_HBW_HBO_NHB_HBC.s script to 11-13_MC_HBW_HBO_NHB_HBC.s\nDeleted 13_DailyModeSplit.s"
  },
  {
    "objectID": "v9x/v901/whats-new/4-v901-patch1-update.html",
    "href": "v9x/v901/whats-new/4-v901-patch1-update.html",
    "title": "v901-patch1 Update (2024-04-30)",
    "section": "",
    "text": "An update to v9.0.1 related to SEGID and the SEGID exception fields was accidentally left out of the version published on April 23, 2024, causing the model to crash. The updated scripts were added back into the model.\nA few minor edits were made to the highway network to correct the direction of a oneway frontage road link and to add a few nodes/links to make the network more consistent with v9.0.2. The transit line files were edited to reflect the updated highway network added nodes/links. No changes were made to the RTP project list."
  },
  {
    "objectID": "v9x/v901/whats-new/4-v901-patch1-update.html#changes-to-input-files",
    "href": "v9x/v901/whats-new/4-v901-patch1-update.html#changes-to-input-files",
    "title": "v901-patch1 Update (2024-04-30)",
    "section": "",
    "text": "An update to v9.0.1 related to SEGID and the SEGID exception fields was accidentally left out of the version published on April 23, 2024, causing the model to crash. The updated scripts were added back into the model.\nA few minor edits were made to the highway network to correct the direction of a oneway frontage road link and to add a few nodes/links to make the network more consistent with v9.0.2. The transit line files were edited to reflect the updated highway network added nodes/links. No changes were made to the RTP project list."
  },
  {
    "objectID": "v9x/v901/whats-new/5-v901-patch2-update.html",
    "href": "v9x/v901/whats-new/5-v901-patch2-update.html",
    "title": "v901-patch2 Update (2024-06-24)",
    "section": "",
    "text": "Changes to v9.0.1-patch 2 include: Minor edits to the segment shapefile\nMinor edits to the highway & transit networks\nRename input files\n\nSegment Shapefile Edits\nThe segment shapefile was edited to better visualize bus ridership around rail stations and to fix minor errors. Edits include splitting and adjusting segment geometry and updating related fields in the attribute table.\nHighway & Transit Network Edits\nTwo rail station connector links in the highway network (Farmington commuter rail station and Jordan Valley light rail station on the Red Line) were updated to better reflect station access. Subsequent edits were made to the transit line node strings in the transit line files to ensure the transit network compiled on the highway network. The transit network was also updated for model years 2028 and beyond to better reflect the stops and alignment of the 5600 West core bus route.\nRename Input Files\nThe filenames of the TAZ, Segments, Factor Geographies, and Highway Network were renamed slightly to comply with the updated model file naming convention determined by the IMTC. In addition, the Control Center files were updated to match any filename changes"
  },
  {
    "objectID": "v9x/v901/whats-new/5-v901-patch2-update.html#changes-to-input-files",
    "href": "v9x/v901/whats-new/5-v901-patch2-update.html#changes-to-input-files",
    "title": "v901-patch2 Update (2024-06-24)",
    "section": "",
    "text": "Changes to v9.0.1-patch 2 include: Minor edits to the segment shapefile\nMinor edits to the highway & transit networks\nRename input files\n\nSegment Shapefile Edits\nThe segment shapefile was edited to better visualize bus ridership around rail stations and to fix minor errors. Edits include splitting and adjusting segment geometry and updating related fields in the attribute table.\nHighway & Transit Network Edits\nTwo rail station connector links in the highway network (Farmington commuter rail station and Jordan Valley light rail station on the Red Line) were updated to better reflect station access. Subsequent edits were made to the transit line node strings in the transit line files to ensure the transit network compiled on the highway network. The transit network was also updated for model years 2028 and beyond to better reflect the stops and alignment of the 5600 West core bus route.\nRename Input Files\nThe filenames of the TAZ, Segments, Factor Geographies, and Highway Network were renamed slightly to comply with the updated model file naming convention determined by the IMTC. In addition, the Control Center files were updated to match any filename changes"
  },
  {
    "objectID": "v9x/v902/downloads.html",
    "href": "v9x/v902/downloads.html",
    "title": "Downloads",
    "section": "",
    "text": "The downloads for the Version 9.0.2 documentation is shown below by category.\n\nWhat’s New Document\n\n What’s New (Pdf) \n\n\n\nModel Validation Report\n\n Model Validation (Pdf)"
  },
  {
    "objectID": "v9x/v902/index.html",
    "href": "v9x/v902/index.html",
    "title": "Preface",
    "section": "",
    "text": "This is the documentation for the Wasatch Front Travel Demand Model Version 9.0.2. The documentation includes the following reports:\n\nWhat’s New Document\nModel Validation Report\n\nFor access to this version of the TDM please contact the following persons:\n\nSuzie Swim (WFRC): sswim@wfrc.org\nTim Hereth (MAG): thereth@magutah.org"
  },
  {
    "objectID": "v9x/v902/validation/1-tripgen.html",
    "href": "v9x/v902/validation/1-tripgen.html",
    "title": "Trip Generation",
    "section": "",
    "text": "Trip Generation validation was considered for both production ratios and relative shares."
  },
  {
    "objectID": "v9x/v902/validation/1-tripgen.html#ratios",
    "href": "v9x/v902/validation/1-tripgen.html#ratios",
    "title": "Trip Generation",
    "section": "Ratios",
    "text": "Ratios\nValidation for production ratios looked at three sets of measures: productions-to-household ratios (Figure 1), total trips (Figure 2), and trip balance ratios (Figure 3). The sources of the data include the Utah Household Travel Survey from 2012 (2012 HTS), the base year model (BY 2019 Model), and the National Household Travel Survey from 2017 with data from the Mountain Census Division (2017 NHTS - Mountain).\nThe model shows an average 4.01 trips per person which is slightly higher than the 2017 NHTS - Mountain average of 3.54. The model also shows an average 12.4 trips per household which is higher than the 2017 NHTS - Mountain average of 9.1. Utah, including the Wasatch Front, has a significantly higher average household size of 3.09 persons per household when compared to the Mountain Census Division average of 2.58, which accounts for the differences when compared to the 2017 NHTS - Mountain averages.\n\n\n\n\n                                                \nFigure 1: Productions to Households Ratios – Total Trip Ends (II + IX).\n\n\n\n\n\n\n\n                                                \nFigure 2: Total Trip Validation\n\n\n\n\n\n\n\n                                                \nFigure 3: Trip Balance Ratios"
  },
  {
    "objectID": "v9x/v902/validation/1-tripgen.html#relative-shares",
    "href": "v9x/v902/validation/1-tripgen.html#relative-shares",
    "title": "Trip Generation",
    "section": "Relative Shares",
    "text": "Relative Shares\nValidation for production relative shares considered the reasonableness of relative shares as shown in Table 1. The relative share between HBW, HBO and NHB trips looks reasonable with HBW at about 14% of the total and the highest share going to HBO. Commercial vehicles account for about 22% of the total trips generated by the model. This is within the expected range for an urban area like the Wasatch Front. IX and XI trips account for around 2% of the total trip generation. This also appears to be reasonable.\n\n\n\n\n\n\n\n\n\nTable 1: Relative Shares of Trip Productions\n\n\nPurpose\nProduction\nShare\n\n\n\n\nHBW\n1,758,104\n14.1%\n\n\nHBO\n5,317,476\n42.5%\n\n\n     HBShp\n908,733\n7.3%\n\n\n     HBOth\n3,719,191\n29.7%\n\n\n     HBScK6\n365,084\n2.9%\n\n\n     HBsc712\n324,468\n2.6%\n\n\nNHB\n2,405,720\n19.2%\n\n\n     NHBW\n812,855\n6.5%\n\n\n     NHBNW\n1,592,865\n12.7%\n\n\nTotal Person\n9,481,300\n75.8%\n\n\nTotal External\n172,855\n1.4%\n\n\n     IX\n78,057\n0.6%\n\n\n     XI\n94,798\n0.8%\n\n\nTotal Truck\n2,802,234\n22.4%\n\n\n     LT\n1,553,653\n12.4%\n\n\n     MD\n884,558\n7.1%\n\n\n     HV\n364,023\n2.9%\n\n\nTotal IX Truck\n21,750\n0.2%\n\n\n     IX MD\n10,716\n0.1%\n\n\n     IX HV\n11,034\n0.1%\n\n\nTotal XI Truck\n30,741\n0.2%\n\n\n     XI MD\n14,372\n0.1%\n\n\n     XI HV\n16,369\n0.1%\n\n\nTelecommute Share of HBW\n69,175\n0.6%\n\n\nTelecommute Share of NHBW\n19,552\n0.2%\n\n\nTOTAL\n12,508,880\n100.0%"
  },
  {
    "objectID": "v9x/v902/validation/2-distribute.html",
    "href": "v9x/v902/validation/2-distribute.html",
    "title": "Trip Distribution",
    "section": "",
    "text": "Modeled average trip lengths for the base year were compared to the 2012 Household Travel Survey. The model was validated for for distance, time, and generalized cost using the following measures:"
  },
  {
    "objectID": "v9x/v902/validation/2-distribute.html#average-trip-lengths",
    "href": "v9x/v902/validation/2-distribute.html#average-trip-lengths",
    "title": "Trip Distribution",
    "section": "Average Trip Lengths",
    "text": "Average Trip Lengths\nThe following figure shows the average trip lengths the modeled and observed time, distance, and generalized cost.\n\n\n\n\n\n\n\nCode\nviewof varSelect = Inputs.select(new Map([['Generalized Cost','GC'], ['Distance', 'Dist'], ['Time', 'Time']]), {value: 'Variable', label: \"Variable\"})\n\nviewof purpSelect  = Inputs.select(new Map([['Internal Trip Purposes', 'MainPurposes'], ['External Trip Purposes', 'Externals']]), {value: 'PurpType', label: \"Purpose Set\"});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndataLT = transpose(dataStats)\nfiltered_data = dataLT.filter(function(dataL) {\n    return varSelect == dataL.Variable &&\n           purpSelect == dataL.PurpType;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {GroupedBarChart} from \"@d3/grouped-bar-chart\"\nimport {Legend, Swatches} from \"@d3/color-legend\"\nimport {howto, altplot} from \"@d3/example-components\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotTable\n\n\n\n\nCode\n//https://observablehq.com/@d3/grouped-bar-chart\nkey = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\nchart = GroupedBarChart(filtered_data, {\n    x: d =&gt; d.Purpose,\n    y: d =&gt; d.AVG_TRIP_LEN,\n    z: d =&gt; d.DataSource,\n    yLabel: \"Average Trip Length\",\n    zDomain: ['Model','Observed'],\n    height: 500,\n    colors: [\"#376092\", \"#77933c\"]\n})\n\n\n\n\n\n\nFigure 1: Average Trip Length between model and observed.\n\n\n\n\n\n\n\nCode\nInputs.table(filtered_data)"
  },
  {
    "objectID": "v9x/v902/validation/2-distribute.html#trip-length-frequencies",
    "href": "v9x/v902/validation/2-distribute.html#trip-length-frequencies",
    "title": "Trip Distribution",
    "section": "Trip Length Frequencies",
    "text": "Trip Length Frequencies\nModeled trip lengths for the base year were compared to the 2012 Household Travel Survey. The following figures shows the modeled and observed time and distance average trip lengths and trip length frequencies.\n\n\n\n\n\n\n\nCode\noptionsTripPurp = \n[\n    ['Home-Based Work'                   , 'HBW'    ],\n    ['Home-Based Shopping'               , 'HBShp'  ],\n    ['Home-Based Other'                  , 'HBOth'  ],\n    ['Home-Based School - Primary'       , 'HBSchPr'],\n    ['Home-Based School - Secondary'     , 'HBSchSc'],\n    ['Non-Home-Based Work'               , 'NHBW'   ],\n    ['Non-Home-Based Non-Work'           , 'NHBNW'  ],\n    ['Light Trucks'                      , 'LT'     ],\n    ['Medium Trucks'                     , 'MD'     ],\n    ['Heavy Trucks'                      , 'HV'     ],\n    ['Internal-to-External'              , 'IX'     ],\n    ['External-to-Internal'              , 'XI'     ]\n]\n\nviewof vTripPurp = Inputs.select(new Map(optionsTripPurp), {value: 'HBW', label: \"Trip Purpose:\"})\n\nviewof vTlfType = Inputs.select(new Map([['Generalized Cost','GC'],['Distance','Dist'],['Time','Time']]), {value: 'Dist', label: \"Variable:\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfreqT = transpose(freq)\n\nfreqT_filtered_Obs = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqObs' == freqData.freqSource;\n})\n\nfreqT_filtered_Mod = freqT.filter(function(freqData) {\n    return vTripPurp == freqData.TRIPPURP &&\n    vTlfType == freqData.TLFTYPE &&\n    'freqMod' == freqData.freqSource;\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nkey2 = Legend(chart.scales.color, {title: \"Data Source\"})\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  grid: true,\n  aspectRatio: 0.5,\n  x: {label: 'Distance/Time/Cost', tickFormat: d =&gt; d},\n  y: {label: 'Frequency', tickFormat: f =&gt; `${Math.round(f * 100)}%`},\n  marginRight: 60,\n  marginLeft: 60,\n  style: {\n    fontSize: 15\n  },\n  marginTop: 60,\n  marginBottom: 60,\n  marks: [\n    Plot.line(\n      freqT_filtered_Mod, {x: 'BIN', y: 'freq', stroke: \"#376092\", strokeWidth: 4}),\n    Plot.line(\n      freqT_filtered_Obs, {x: 'BIN', y: 'freq', stroke:  \"#77933c\", strokeWidth: 4}),\n    Plot.frame({strokeOpacity: 0.2}),\n    ]\n});\n\n\n\n\n\n\nFigure 2: Trip Length Frequencies between Model and Observed."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation",
    "section": "",
    "text": "Documentation of the Wasatch Front Travel Demand Model (WF TDM) has been separated into three documents:\n\nWhat’s New Document – describes the changes made to the WF TDM since the last model release\nModel Validation Report – provides the base year validation of the current version of the WF TDM, as well as a reasonableness check of the model as a forecasting tool\nModel Process Report – provides an overview of the model, a summary of the model’s input data sets, and an outline of the model’s primary steps and logic\n\nThese reports will be available as PDF documents in the “_Notes” folder in the WF TDM’s root directory. However, it is expected that the primary means of accessing the model’s documentation will be online at the following links:\n\nWhat’s New Document\nModel Validation Report\nModel Process Report (in progress)"
  }
]